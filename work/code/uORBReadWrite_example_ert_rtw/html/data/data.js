var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"uORBReadWrite_example","ref":false,"files":[{"name":"ert_main.cpp","type":"source","group":"main","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Main file","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: ert_main.cpp\r\n//\r\n// Code generated for Simulink model 'uORBReadWrite_example'.\r\n//\r\n// Model version                  : 1.1\r\n// Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n// C/C++ source code generated on : Thu Aug  1 15:06:36 2024\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include \"uORBReadWrite_example.h\"\r\n#include \"uORBReadWrite_example_private.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"limits.h\"\r\n#include \"MW_PX4_TaskControl.h\"\r\n#include \"nuttxinitialize.h\"\r\n#define UNUSED(x)                      x = x\r\n#define NAMELEN                        16\r\n\r\n// Function prototype declaration\r\nvoid exitFcn(int sig);\r\nvoid *terminateTask(void *arg);\r\nvoid *baseRateTask(void *arg);\r\nvoid *subrateTask(void *arg);\r\nvolatile boolean_T stopRequested = false;\r\nvolatile boolean_T runModel = true;\r\npx4_sem_t stopSem;\r\npx4_sem_t baserateTaskSem;\r\npthread_t schedulerThread;\r\npthread_t baseRateThread;\r\nvoid *threadJoinStatus;\r\nint terminatingmodel = 0;\r\nvoid *baseRateTask(void *arg)\r\n{\r\n  runModel = (rtmGetErrorStatus(uORBReadWrite_example_M) == (NULL));\r\n  while (runModel) {\r\n    px4_sem_wait(&baserateTaskSem);\r\n    uORBReadWrite_example_step();\r\n\r\n    // Get model outputs here\r\n    stopRequested = !((rtmGetErrorStatus(uORBReadWrite_example_M) == (NULL)));\r\n  }\r\n\r\n  runModel = 0;\r\n  terminateTask(arg);\r\n  pthread_exit((void *)0);\r\n  return NULL;\r\n}\r\n\r\nvoid exitFcn(int sig)\r\n{\r\n  UNUSED(sig);\r\n  rtmSetErrorStatus(uORBReadWrite_example_M, \"stopping the model\");\r\n  runModel = 0;\r\n}\r\n\r\nvoid *terminateTask(void *arg)\r\n{\r\n  UNUSED(arg);\r\n  terminatingmodel = 1;\r\n\r\n  {\r\n    runModel = 0;\r\n  }\r\n\r\n  MW_PX4_Terminate();\r\n\r\n  // Terminate model\r\n  uORBReadWrite_example_terminate();\r\n  px4_sem_post(&stopSem);\r\n  return NULL;\r\n}\r\n\r\nint px4_simulink_app_task_main (int argc, char *argv[])\r\n{\r\n  px4_simulink_app_control_MAVLink();\r\n  rtmSetErrorStatus(uORBReadWrite_example_M, 0);\r\n\r\n  // Initialize model\r\n  uORBReadWrite_example_initialize();\r\n\r\n  // Call RTOS Initialization function\r\n  nuttxRTOSInit(0.2, 0);\r\n\r\n  // Wait for stop semaphore\r\n  px4_sem_wait(&stopSem);\r\n\r\n#if (MW_NUMBER_TIMER_DRIVEN_TASKS > 0)\r\n\r\n  {\r\n    int i;\r\n    for (i=0; i < MW_NUMBER_TIMER_DRIVEN_TASKS; i++) {\r\n      CHECK_STATUS(px4_sem_destroy(&timerTaskSem[i]), 0, \"px4_sem_destroy\");\r\n    }\r\n  }\r\n\r\n#endif\r\n\r\n  return 0;\r\n}\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"uORBReadWrite_example.cpp","type":"source","group":"model","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: uORBReadWrite_example.cpp\r\n//\r\n// Code generated for Simulink model 'uORBReadWrite_example'.\r\n//\r\n// Model version                  : 1.1\r\n// Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n// C/C++ source code generated on : Thu Aug  1 15:06:36 2024\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#include \"uORBReadWrite_example.h\"\r\n#include <uORB/topics/vehicle_rates_setpoint.h>\r\n#include \"rtwtypes.h\"\r\n\r\n// Block signals (default storage)\r\nB_uORBReadWrite_example_T uORBReadWrite_example_B;\r\n\r\n// Block states (default storage)\r\nDW_uORBReadWrite_example_T uORBReadWrite_example_DW;\r\n\r\n// Real-time model\r\nRT_MODEL_uORBReadWrite_exampl_T uORBReadWrite_example_M_ =\r\n  RT_MODEL_uORBReadWrite_exampl_T();\r\nRT_MODEL_uORBReadWrite_exampl_T *const uORBReadWrite_example_M =\r\n  &uORBReadWrite_example_M_;\r\n\r\n// Model step function\r\nvoid uORBReadWrite_example_step(void)\r\n{\r\n  px4_Bus_vehicle_rates_setpoint rtb_BusAssignment;\r\n  boolean_T b_varargout_1;\r\n\r\n  // BusAssignment: '<Root>/Bus Assignment' incorporates:\r\n  //   Constant: '<S1>/Constant'\r\n  //   MATLABSystem: '<Root>/PX4 Timestamp'\r\n\r\n  rtb_BusAssignment = uORBReadWrite_example_P.Constant_Value_l;\r\n  rtb_BusAssignment.timestamp = hrt_absolute_time();\r\n\r\n  // MATLABSystem: '<S2>/SourceBlock'\r\n  b_varargout_1 = uORB_read_step(uORBReadWrite_example_DW.obj_p.orbMetadataObj,\r\n    &uORBReadWrite_example_DW.obj_p.eventStructObj,\r\n    &uORBReadWrite_example_B.b_varargout_2, false, 1.0);\r\n\r\n  // Outputs for Enabled SubSystem: '<S2>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S4>/Enable'\r\n\r\n  // Start for MATLABSystem: '<S2>/SourceBlock'\r\n  if (b_varargout_1) {\r\n    // SignalConversion generated from: '<S4>/In1'\r\n    uORBReadWrite_example_B.In1 = uORBReadWrite_example_B.b_varargout_2;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S2>/Enabled Subsystem'\r\n\r\n  // BusAssignment: '<Root>/Bus Assignment' incorporates:\r\n  //   Constant: '<Root>/Constant'\r\n  //   Sum: '<Root>/Add'\r\n\r\n  rtb_BusAssignment.roll = uORBReadWrite_example_B.In1.roll_body +\r\n    uORBReadWrite_example_P.Constant_Value_e;\r\n  rtb_BusAssignment.pitch = uORBReadWrite_example_B.In1.pitch_body;\r\n  rtb_BusAssignment.yaw = uORBReadWrite_example_B.In1.yaw_body;\r\n\r\n  // MATLABSystem: '<S3>/SinkBlock' incorporates:\r\n  //   BusAssignment: '<Root>/Bus Assignment'\r\n\r\n  uORB_write_step(uORBReadWrite_example_DW.obj_a.orbMetadataObj,\r\n                  &uORBReadWrite_example_DW.obj_a.orbAdvertiseObj,\r\n                  &rtb_BusAssignment);\r\n}\r\n\r\n// Model initialize function\r\nvoid uORBReadWrite_example_initialize(void)\r\n{\r\n  {\r\n    px4_Bus_vehicle_rates_setpoint rtb_BusAssignment;\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S2>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S4>/In1' incorporates:\r\n    //   Outport: '<S4>/Out1'\r\n\r\n    uORBReadWrite_example_B.In1 = uORBReadWrite_example_P.Out1_Y0;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S2>/Enabled Subsystem'\r\n\r\n    // Start for MATLABSystem: '<Root>/PX4 Timestamp'\r\n    uORBReadWrite_example_DW.obj.matlabCodegenIsDeleted = false;\r\n    uORBReadWrite_example_DW.obj.isInitialized = 1;\r\n    uORBReadWrite_example_DW.obj.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S2>/SourceBlock'\r\n    uORBReadWrite_example_DW.obj_p.matlabCodegenIsDeleted = false;\r\n    uORBReadWrite_example_DW.obj_p.isInitialized = 1;\r\n    uORBReadWrite_example_DW.obj_p.orbMetadataObj = ORB_ID\r\n      (vehicle_rates_setpoint);\r\n    uORB_read_initialize(uORBReadWrite_example_DW.obj_p.orbMetadataObj,\r\n                         &uORBReadWrite_example_DW.obj_p.eventStructObj);\r\n    uORBReadWrite_example_DW.obj_p.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S3>/SinkBlock' incorporates:\r\n    //   BusAssignment: '<Root>/Bus Assignment'\r\n\r\n    uORBReadWrite_example_DW.obj_a.matlabCodegenIsDeleted = false;\r\n    uORBReadWrite_example_DW.obj_a.isInitialized = 1;\r\n    uORBReadWrite_example_DW.obj_a.orbMetadataObj = ORB_ID\r\n      (vehicle_rates_setpoint);\r\n    uORB_write_initialize(uORBReadWrite_example_DW.obj_a.orbMetadataObj,\r\n                          &uORBReadWrite_example_DW.obj_a.orbAdvertiseObj,\r\n                          &rtb_BusAssignment, 1);\r\n    uORBReadWrite_example_DW.obj_a.isSetupComplete = true;\r\n  }\r\n}\r\n\r\n// Model terminate function\r\nvoid uORBReadWrite_example_terminate(void)\r\n{\r\n  // Terminate for MATLABSystem: '<Root>/PX4 Timestamp'\r\n  if (!uORBReadWrite_example_DW.obj.matlabCodegenIsDeleted) {\r\n    uORBReadWrite_example_DW.obj.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<Root>/PX4 Timestamp'\r\n\r\n  // Terminate for MATLABSystem: '<S2>/SourceBlock'\r\n  if (!uORBReadWrite_example_DW.obj_p.matlabCodegenIsDeleted) {\r\n    uORBReadWrite_example_DW.obj_p.matlabCodegenIsDeleted = true;\r\n    if ((uORBReadWrite_example_DW.obj_p.isInitialized == 1) &&\r\n        uORBReadWrite_example_DW.obj_p.isSetupComplete) {\r\n      uORB_read_terminate(&uORBReadWrite_example_DW.obj_p.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S2>/SourceBlock'\r\n\r\n  // Terminate for MATLABSystem: '<S3>/SinkBlock'\r\n  if (!uORBReadWrite_example_DW.obj_a.matlabCodegenIsDeleted) {\r\n    uORBReadWrite_example_DW.obj_a.matlabCodegenIsDeleted = true;\r\n    if ((uORBReadWrite_example_DW.obj_a.isInitialized == 1) &&\r\n        uORBReadWrite_example_DW.obj_a.isSetupComplete) {\r\n      uORB_write_terminate(&uORBReadWrite_example_DW.obj_a.orbAdvertiseObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S3>/SinkBlock'\r\n}\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"uORBReadWrite_example.h","type":"header","group":"model","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: uORBReadWrite_example.h\r\n//\r\n// Code generated for Simulink model 'uORBReadWrite_example'.\r\n//\r\n// Model version                  : 1.1\r\n// Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n// C/C++ source code generated on : Thu Aug  1 15:06:36 2024\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef RTW_HEADER_uORBReadWrite_example_h_\r\n#define RTW_HEADER_uORBReadWrite_example_h_\r\n#include <drivers/drv_hrt.h>\r\n#include <poll.h>\r\n#include <uORB/uORB.h>\r\n#include \"rtwtypes.h\"\r\n#include \"MW_uORB_Read.h\"\r\n#include \"MW_uORB_Write.h\"\r\n#include \"uORBReadWrite_example_types.h\"\r\n#include <uORB/topics/vehicle_attitude_setpoint.h>\r\n#include <uORB/topics/vehicle_rates_setpoint.h>\r\n#include <stddef.h>\r\n\r\n// Macros for accessing real-time model data structure\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n// Block signals (default storage)\r\nstruct B_uORBReadWrite_example_T {\r\n  px4_Bus_vehicle_attitude_setpoint In1;// '<S4>/In1'\r\n  px4_Bus_vehicle_attitude_setpoint b_varargout_2;\r\n};\r\n\r\n// Block states (default storage) for system '<Root>'\r\nstruct DW_uORBReadWrite_example_T {\r\n  px4_internal_block_getPX4Abso_T obj; // '<Root>/PX4 Timestamp'\r\n  px4_internal_block_Subscriber_T obj_p;// '<S2>/SourceBlock'\r\n  px4_internal_block_Publisher__T obj_a;// '<S3>/SinkBlock'\r\n};\r\n\r\n// Parameters (default storage)\r\nstruct P_uORBReadWrite_example_T_ {\r\n  px4_Bus_vehicle_attitude_setpoint Out1_Y0;// Computed Parameter: Out1_Y0\r\n                                               //  Referenced by: '<S4>/Out1'\r\n\r\n  px4_Bus_vehicle_attitude_setpoint Constant_Value;// Computed Parameter: Constant_Value\r\n                                                      //  Referenced by: '<S2>/Constant'\r\n\r\n  px4_Bus_vehicle_rates_setpoint Constant_Value_l;// Computed Parameter: Constant_Value_l\r\n                                                     //  Referenced by: '<S1>/Constant'\r\n\r\n  real32_T Constant_Value_e;           // Computed Parameter: Constant_Value_e\r\n                                          //  Referenced by: '<Root>/Constant'\r\n\r\n};\r\n\r\n// Real-time Model Data Structure\r\nstruct tag_RTM_uORBReadWrite_example_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n// Block parameters (default storage)\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern P_uORBReadWrite_example_T uORBReadWrite_example_P;\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n\r\n// Block signals (default storage)\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern struct B_uORBReadWrite_example_T uORBReadWrite_example_B;\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n\r\n// Block states (default storage)\r\nextern struct DW_uORBReadWrite_example_T uORBReadWrite_example_DW;\r\n\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  // Model entry point functions\r\n  extern void uORBReadWrite_example_initialize(void);\r\n  extern void uORBReadWrite_example_step(void);\r\n  extern void uORBReadWrite_example_terminate(void);\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n\r\n// Real-time Model object\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern RT_MODEL_uORBReadWrite_exampl_T *const uORBReadWrite_example_M;\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n\r\nextern volatile boolean_T stopRequested;\r\nextern volatile boolean_T runModel;\r\n\r\n//-\r\n//  These blocks were eliminated from the model due to optimizations:\r\n//\r\n//  Block '<S2>/NOT' : Unused code path elimination\r\n\r\n\r\n//-\r\n//  The generated code includes comments that allow you to trace directly\r\n//  back to the appropriate location in the model.  The basic format\r\n//  is <system>/block_name, where system is the system number (uniquely\r\n//  assigned by Simulink) and block_name is the name of the block.\r\n//\r\n//  Use the MATLAB hilite_system command to trace the generated code back\r\n//  to the model.  For example,\r\n//\r\n//  hilite_system('<S3>')    - opens system 3\r\n//  hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n//\r\n//  Here is the system hierarchy for this model\r\n//\r\n//  '<Root>' : 'uORBReadWrite_example'\r\n//  '<S1>'   : 'uORBReadWrite_example/PX4 uORB Message'\r\n//  '<S2>'   : 'uORBReadWrite_example/PX4 uORB Read'\r\n//  '<S3>'   : 'uORBReadWrite_example/PX4 uORB Write'\r\n//  '<S4>'   : 'uORBReadWrite_example/PX4 uORB Read/Enabled Subsystem'\r\n\r\n#endif                                 // RTW_HEADER_uORBReadWrite_example_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"uORBReadWrite_example_private.h","type":"header","group":"model","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: uORBReadWrite_example_private.h\r\n//\r\n// Code generated for Simulink model 'uORBReadWrite_example'.\r\n//\r\n// Model version                  : 1.1\r\n// Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n// C/C++ source code generated on : Thu Aug  1 15:06:36 2024\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef RTW_HEADER_uORBReadWrite_example_private_h_\r\n#define RTW_HEADER_uORBReadWrite_example_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"uORBReadWrite_example_types.h\"\r\n#endif                           // RTW_HEADER_uORBReadWrite_example_private_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"uORBReadWrite_example_types.h","type":"header","group":"model","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: uORBReadWrite_example_types.h\r\n//\r\n// Code generated for Simulink model 'uORBReadWrite_example'.\r\n//\r\n// Model version                  : 1.1\r\n// Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n// C/C++ source code generated on : Thu Aug  1 15:06:36 2024\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef RTW_HEADER_uORBReadWrite_example_types_h_\r\n#define RTW_HEADER_uORBReadWrite_example_types_h_\r\n#include \"rtwtypes.h\"\r\n#include <uORB/topics/vehicle_rates_setpoint.h>\r\n#include <uORB/topics/vehicle_attitude_setpoint.h>\r\n#ifndef struct_e_px4_internal_block_SampleTi_T\r\n#define struct_e_px4_internal_block_SampleTi_T\r\n\r\nstruct e_px4_internal_block_SampleTi_T\r\n{\r\n  int32_T __dummy;\r\n};\r\n\r\n#endif                                // struct_e_px4_internal_block_SampleTi_T\r\n\r\n#ifndef struct_px4_internal_block_getPX4Abso_T\r\n#define struct_px4_internal_block_getPX4Abso_T\r\n\r\nstruct px4_internal_block_getPX4Abso_T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  e_px4_internal_block_SampleTi_T SampleTimeHandler;\r\n};\r\n\r\n#endif                                // struct_px4_internal_block_getPX4Abso_T\r\n\r\n#ifndef struct_px4_internal_block_Subscriber_T\r\n#define struct_px4_internal_block_Subscriber_T\r\n\r\nstruct px4_internal_block_Subscriber_T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  e_px4_internal_block_SampleTi_T SampleTimeHandler;\r\n  pollfd_t eventStructObj;\r\n  orb_metadata_t * orbMetadataObj;\r\n};\r\n\r\n#endif                                // struct_px4_internal_block_Subscriber_T\r\n\r\n#ifndef struct_px4_internal_block_Publisher__T\r\n#define struct_px4_internal_block_Publisher__T\r\n\r\nstruct px4_internal_block_Publisher__T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  orb_advert_t orbAdvertiseObj;\r\n  orb_metadata_t * orbMetadataObj;\r\n};\r\n\r\n#endif                                // struct_px4_internal_block_Publisher__T\r\n\r\n// Parameters (default storage)\r\ntypedef struct P_uORBReadWrite_example_T_ P_uORBReadWrite_example_T;\r\n\r\n// Forward declaration for rtModel\r\ntypedef struct tag_RTM_uORBReadWrite_example_T RT_MODEL_uORBReadWrite_exampl_T;\r\n\r\n#endif                             // RTW_HEADER_uORBReadWrite_example_types_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"uORBReadWrite_example_data.cpp","type":"source","group":"data","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Data files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: uORBReadWrite_example_data.cpp\r\n//\r\n// Code generated for Simulink model 'uORBReadWrite_example'.\r\n//\r\n// Model version                  : 1.1\r\n// Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n// C/C++ source code generated on : Thu Aug  1 15:06:36 2024\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#include \"uORBReadWrite_example.h\"\r\n\r\n// Block parameters (default storage)\r\nP_uORBReadWrite_example_T uORBReadWrite_example_P = {\r\n  // Computed Parameter: Out1_Y0\r\n  //  Referenced by: '<S4>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    0.0F,                              // roll_body\r\n    0.0F,                              // pitch_body\r\n    0.0F,                              // yaw_body\r\n    0.0F,                              // yaw_sp_move_rate\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F, 0.0F }\r\n    ,                                  // q_d\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F }\r\n    ,                                  // thrust_body\r\n    false,                             // roll_reset_integral\r\n    false,                             // pitch_reset_integral\r\n    false,                             // yaw_reset_integral\r\n    false,                             // fw_control_yaw\r\n    0U,                                // apply_flaps\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value\r\n  //  Referenced by: '<S2>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    0.0F,                              // roll_body\r\n    0.0F,                              // pitch_body\r\n    0.0F,                              // yaw_body\r\n    0.0F,                              // yaw_sp_move_rate\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F, 0.0F }\r\n    ,                                  // q_d\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F }\r\n    ,                                  // thrust_body\r\n    false,                             // roll_reset_integral\r\n    false,                             // pitch_reset_integral\r\n    false,                             // yaw_reset_integral\r\n    false,                             // fw_control_yaw\r\n    0U,                                // apply_flaps\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_l\r\n  //  Referenced by: '<S1>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    0.0F,                              // roll\r\n    0.0F,                              // pitch\r\n    0.0F,                              // yaw\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F }\r\n    // thrust_body\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_e\r\n  //  Referenced by: '<Root>/Constant'\r\n\r\n  100.0F\r\n};\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rtwtypes.h\r\n//\r\n// Code generated for Simulink model 'uORBReadWrite_example'.\r\n//\r\n// Model version                  : 1.1\r\n// Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n// C/C++ source code generated on : Thu Aug  1 15:06:36 2024\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n// Logical type definitions\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n//=======================================================================*\r\n//  Target hardware information\r\n//    Device type: ARM Compatible->ARM Cortex\r\n//    Number of bits:     char:   8    short:   16    int:  32\r\n//                        long:  32    long long:  64\r\n//                        native word size:  32\r\n//    Byte ordering: LittleEndian\r\n//    Signed integer division rounds to: Zero\r\n//    Shift right on a signed integer as arithmetic shift: on\r\n// =======================================================================\r\n\r\n//=======================================================================*\r\n//  Fixed width word size data types:                                     *\r\n//    int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n//    uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n//    real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n// =======================================================================\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n//===========================================================================*\r\n//  Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n//                            real_T, time_T, ulong_T, ulonglong_T.           *\r\n// ===========================================================================\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n//===========================================================================*\r\n//  Complex number type definitions                                           *\r\n// ===========================================================================\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n//=======================================================================*\r\n//  Min and Max:                                                          *\r\n//    int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n//    uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n// =======================================================================\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n// Block D-Work pointer type\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 // RTWTYPES_H\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Interface files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rtmodel.h\r\n//\r\n// Code generated for Simulink model 'uORBReadWrite_example'.\r\n//\r\n// Model version                  : 1.1\r\n// Simulink Coder version         : 23.2 (R2023b) 01-Aug-2023\r\n// C/C++ source code generated on : Thu Aug  1 15:06:36 2024\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"uORBReadWrite_example.h\"\r\n\r\n// Macros generated for backwards compatibility\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 // RTW_HEADER_rtmodel_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"MW_PX4_TaskControl.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2023b\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright 2018-2022 The MathWorks, Inc.\n *\n * File: MW_PX4_TaskControl.c\n *\n * Abstract:\n *  This file contains the main application for Simulink that is launched\n *  by PX4 stack at boot up. The main function spawns a new task and assigns\n *  the main function in ert_main.c as callback.\n *\n */\n\n#include \"nuttxinitialize.h\"\n#include \"MW_PX4_TaskControl.h\"\n/*Simulink model generated code specific headers*/\n\n#define MW_StringifyDefine(x) MW_StringifyDefineExpanded(x)\n#define MW_StringifyDefineExpanded(x) #x\n\n#define MW_StringifyDefineFunction(x, y) MW_StringifyDefineExpandedFunction(x, y)\n#define MW_StringifyDefineExpandedFunction(x, y) x##y\n\n#define MW_StringifyDefineX(x) MW_StringifyDefineExpandedX(x)\n#define MW_StringifyDefineExpandedX(x) x.##h\n\n#define MW_StringifyDefineTypesX(x) MW_StringifyDefineExpandedTypesX(x)\n#define MW_StringifyDefineExpandedTypesX(x) x##_types.h\n\n#define MW_StringifyDefinePrivateX(x) MW_StringifyDefineExpandedPrivateX(x)\n#define MW_StringifyDefineExpandedPrivateX(x) x##_private.h\n\n#include MW_StringifyDefine(MODEL.h)\n#include MW_StringifyDefine(MW_StringifyDefineTypesX(MODEL))\n#include MW_StringifyDefine(MW_StringifyDefinePrivateX(MODEL))\n\n#ifndef MW_PX4_DISABLE_MAVLINK\n#include \"mavlink_main.h\"\n#endif\n\n#define DEBUG 0\n\n#ifdef PIL\nextern int errorOccurred;\n#endif\n\nextern \"C\" __EXPORT int px4_simulink_app_main(int argc,\n                                              char* argv[]); /* sbcheck:ok:extern_c needed */\n\nextern struct hrt_call\n    BaseRate_HRT; /* Base-rate HRT-callback is used to post base-rate semaphore */\nextern int terminatingmodel;\nextern int baserate_sem_copy; /* used for checking HRT semaphore water-mark*/\nstatic bool g_baseRateLife =\n    false;                        /* global storage to contain the status of the px4_simulink_app */\nstatic int px4_simulink_app_task; /* Handle of daemon thread */\nchar mavlink_shell_started = 0;\n\n#ifndef MW_PX4_DISABLE_MAVLINK\nconst char* mavlink_start_command[] = {\"mavlink\",      \"start\", \"-r\",     \"800000\", \"-d\",\n                                       \"/dev/ttyACM0\", \"-m\",    \"config\", \"-x\",     0};\n#endif\n\n/* Print the correct usage. */\nvoid px4_app_usage(const char* reason) {\n    if (reason) {\n        PX4_INFO(\"px4_simulink_app : %s\\n\", reason);\n    }\n    errx(1, \"usage: px4_simulink_app {start|stop|status} [-p <additional params>]\\n\\n\");\n}\n\n#if defined(MW_PX4_DISABLE_MAVLINK)\nuint8_t buffer[100];\nMavlinkShell shell;\nvoid shellWait(MavlinkShell* shell_ptr, uint8_t buf[]) {\n    /*The shell wait here is to be used for commands which are expected to\n      return a few characters (a max. of 100 characters.)*/\n    int read = 0, readTotal = 0;\n    for (int i = 0; i < 100; i++) {\n        buf[i] = 0;\n    }\n    while (strstr((char*)buf, \"nsh>\") == NULL) {\n        read = shell_ptr->read(buf + readTotal, 100 - readTotal);\n        readTotal = readTotal + read;\n    }\n}\n#endif\n\nvoid px4_simulink_app_control_MAVLink() {\n    if (mavlink_shell_started == 0) {\n#ifdef MW_PX4_DISABLE_MAVLINK\n        shell.start();\n        shellWait(&shell, buffer);\n#endif\n    }\n\n#ifndef MW_PX4_DISABLE_MAVLINK\n    int narg = sizeof(mavlink_start_command) / sizeof(mavlink_start_command[0]);\n    Mavlink::start(narg - 1, (char**)mavlink_start_command);\n#endif\n\n#ifdef MW_PX4_DISABLE_MAVLINK\n    shell.write((uint8_t*)\"mavlink stop-all\\n\", sizeof(\"mavlink stop-all\\n\"));\n    usleep(100000);\n#endif\n}\n\nint px4_simulink_app_main(int argc, char* argv[]) {\n    if (argc < 2) {\n        px4_app_usage(\"missing command\");\n    }\n\n    if (!strcmp(argv[1], \"start\")) {\n        if (g_baseRateLife == false) {\n            /* Start the Simulink Tasks here */\n#if DEBUG\n            printf(\"px4_simulink_app : Starting the Simulink model\\n\");\n            fflush(stdout);\n#endif\n\n            /* Reset semaphore */\n            g_baseRateLife = true;\n            terminatingmodel =\n                0; // reset global variable. For more info on the rational behind this, please see:\n            // http://nuttx.org/doku.php?id=wiki:nxinternal:tasks-vs-processes#nuttx_flat-build_behavior\n\n            px4_simulink_app_task = px4_task_spawn_cmd(\n                \"px4_simulink_app_task\", /* Definition of px4_task_spawn_cmd :\n                                            C:\\px4\\Firmware\\src\\platforms\\nuttx\\px4_layer\\px4_nuttx_tasks.c\n                                          */\n                SCHED_DEFAULT,           /* For STM32 F4, NuttX has SCHED_DEFAULT as SCHED_RR */\n                SCHED_PRIORITY_MAX - 15, /* SCHED_PRIORITY_MAX: 255 */\n                2048, px4_simulink_app_task_main, (char* const*)NULL);\n\n        } else {\n            warnx(\"px4_simulink_app : Simulink model is already running\\n\");\n            fflush(stdout);\n        }\n#if defined(MW_PX4_NUTTX_BUILD)\n        exit(0);\n#else\n        return 0;\n#endif\n    }\n\n    if (!strcmp(argv[1], \"stop\")) {\n        if (g_baseRateLife == true) {\n#ifdef PIL\n            errorOccurred = 1;\n#else\n            rtmSetErrorStatus(MW_StringifyDefineFunction(MODEL, _M), \"Module stopped by user\");\n            g_baseRateLife = false;\n            px4_sem_post(&baserateTaskSem);\n#endif\n#if DEBUG\n            PX4_INFO(\"px4_simulink_app : Exiting the Simulink model\\n\");\n#endif\n        } else {\n            warnx(\"px4_simulink_app : No Simulink model is running\\n\");\n        }\n\n        fflush(stdout);\n#if defined(MW_PX4_NUTTX_BUILD)\n        exit(0);\n#else\n        return 0;\n#endif\n    }\n\n    if (!strcmp(argv[1], \"status\")) {\n        if (g_baseRateLife) {\n            PX4_INFO(\"px4_simulink_app : model is running\\n\");\n        } else {\n            PX4_INFO(\"px4_simulink_app : model is not started\\n\");\n        }\n        fflush(stdout);\n#if defined(MW_PX4_NUTTX_BUILD)\n        exit(0);\n#else\n        return 0;\n#endif\n    }\n\n    px4_app_usage(\"unrecognized command\");\n#if defined(MW_PX4_NUTTX_BUILD)\n    exit(1);\n#else\n    return 1;\n#endif\n}\n\nvoid MW_PX4_Terminate() {\n    hrt_cancel(&BaseRate_HRT);\n    g_baseRateLife = false; // set status of PX4 Simulink App to stop\n\n#if defined(MW_HRT_CONSTRAINT) && (1 == MW_HRT_CONSTRAINT)\n    if (baserate_sem_copy > MW_SEM_WATERMARK) {\n        PX4_INFO(\"Hard real-time constraint violated, shutting down. Updating log file. \\n\");\n        FILE* fp_taskover_run = NULL;\n        char msg_watermark[100] = {0};\n        char msg_timestamp[50] = {0};\n        struct tm* sTm;\n        time_t now = time(NULL);\n        sTm = gmtime(&now);\n        sprintf(msg_watermark,\n                \"Base-rate semaphore exceeded water-mark value %d. Model base-rate = %.3f sec.\",\n                MW_SEM_WATERMARK, (float)MW_BASERATE_PERIOD);\n        strftime(msg_timestamp, sizeof(msg_timestamp), \"%Y-%m-%d %H:%M:%S\", sTm);\n        fp_taskover_run = fopen(\"/fs/microsd/log/task_overrun_log.txt\", \"a+\");\n        fprintf(fp_taskover_run, \"%s Timestamp=%s \\n\", msg_watermark, msg_timestamp);\n        fclose(fp_taskover_run);\n    }\n#endif\n\n#if DEBUG\n    PX4_INFO(\"px4_simulink_app : Received command to end the Simulink task \\n\");\n    fflush(stdout);\n#endif\n}\n\n// LocalWords:  HRT px nsh mavlink nuttx doku nxinternal Nutt SCHED fs microsd\n// LocalWords:  dev ACM tty\n"},{"name":"MW_custom_RTOS_header.h","type":"header","group":"other","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef _MW_CUSTOM_RTOS_HEADER_H_\r\n#define _MW_CUSTOM_RTOS_HEADER_H_\r\n#define MW_BASERATE_PRIORITY           250\r\n#define MW_BASERATE_PERIOD             0.2\r\n#define MW_NUMBER_SUBRATES             0\r\n#define MW_NUMBER_APERIODIC_TASKS      0\r\n#define MW_IS_CONCURRENT               0\r\n#define MW_NUMBER_TIMER_DRIVEN_TASKS   0\r\n\r\nextern void exitFcn(int sig);\r\nextern void *terminateTask(void *arg);\r\nextern void *baseRateTask(void *arg);\r\nextern void *subrateTask(void *arg);\r\nextern pthread_t schedulerThread;\r\nextern pthread_t baseRateThread;\r\nextern pthread_t subRateThread[];\r\nextern px4_sem_t stopSem;\r\nextern px4_sem_t baserateTaskSem;\r\nextern px4_sem_t subrateTaskSem[];\r\nextern int taskId[];\r\nextern int subratePriority[];\r\n\r\n#endif\r\n\r\n#define MW_MAX_TASKNAME                16\r\n"},{"name":"MW_target_hardware_resources.h","type":"header","group":"other","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef PORTABLE_WORDSIZES\n#ifdef __MW_TARGET_USE_HARDWARE_RESOURCES_H__\n#ifndef __MW_TARGET_HARDWARE_RESOURCES_H__\n#define __MW_TARGET_HARDWARE_RESOURCES_H__\n\n#define MW_MULTI_TASKING_MODE 1\n#include \"MW_PX4_TaskControl.h\"\n\n#define MW_USECODERTARGET 1\n#define MW_TARGETHARDWARE PX4 Cube Orange\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERSIZE 1024\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERNUM 3\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_MAXCONTIGSAMPLES 10\n#define MW_CONNECTIONINFO_XCPONSERIAL_BAUDRATE codertarget.pixhawk.internal.getExternalModeBaudrate(hCS);\n#define MW_CONNECTIONINFO_XCPONSERIAL_COMPORT codertarget.pixhawk.internal.getExternalSerialPortName(hCS);\n#define MW_CONNECTIONINFO_XCPONSERIAL_VERBOSE 1\n#define MW_EXTMODE_CONFIGURATION XCP on Serial\n#define MW_RTOS NuttX\n#define MW_RTOSBASERATETASKPRIORITY 250\n#define MW_SCHEDULER_INTERRUPT_SOURCE 0\n#define MW_RUNTIME_BUILDACTION 1\n#define MW_CMAKECONFIG cubepilot_cubeorange_default\n#define MW_CHANGECMAKECONFIG 48\n#define MW_AUTOMATIC_SERIAL_SCAN 1\n#define MW_COM_UPLOAD_STORAGE \n#define MW_NUTTX_SERIAL_PORT \n#define MW_ENABLE_HITL 1\n#define MW_SIMULATOR 0\n#define MW_CONNECTEDIOSERIALPORT /dev/ttyACM0\n#define MW_CONNECTEDIOSERIALPORT_CHECKBOX 1\n#define MW_CONNECTEDIOHOSTCOMPORT \n#define MW_SIMULINKIO_MODELTRANSPORTDATAFCN px4.internal.ConnectedIO.getConfigsetInfo\n#define MW_SIMULINKIO_SERVERDEPLOYFCN px4.internal.ConnectedIO.buildAndDeployPX4IOServer\n#define MW_CLOCKING_CPUCLOCKRATEMHZ 400\n#define MW_EXTSERIALPORT 0\n#define MW_EXTMODESERIALPORT_CHECKBOX 1\n#define MW_EXTMODEHOSTCOMPORT \n#define MW_PILSERIALPORT /dev/ttyACM0\n#define MW_PILSERIALPORT_CHECKBOX 1\n#define MW_PILHOSTCOMPORT \n#define MW_I2C_BUS1SPEEDKHZ_INDEX 0\n#define MW_I2C_BUS2SPEEDKHZ_INDEX 0\n#define MW_I2C_BUS1SPEEDKHZ 100\n#define MW_I2C_BUS2SPEEDKHZ 100\n#define MW_ENABLEMAVLINKCHECKBOX 1\n#define MW_TTYACM0_BAUDRATE 27\n#define MW_TTYACM0_PARITY 0\n#define MW_TTYACM0_STOPBIT 0\n#define MW_TTYACM0_PORTMAP 48\n#define MW_TTYS0_BAUDRATE 27\n#define MW_TTYS0_PARITY 0\n#define MW_TTYS0_STOPBIT 0\n#define MW_TTYS0_PORTMAP 48\n#define MW_TTYS0HWFLOWCONTROL_CHECKBOX 0\n#define MW_TTYS1_BAUDRATE 27\n#define MW_TTYS1_PARITY 0\n#define MW_TTYS1_STOPBIT 0\n#define MW_TTYS1_PORTMAP 48\n#define MW_TTYS1HWFLOWCONTROL_CHECKBOX 0\n#define MW_TTYS2_BAUDRATE 27\n#define MW_TTYS2_PARITY 0\n#define MW_TTYS2_STOPBIT 0\n#define MW_TTYS2_PORTMAP 48\n#define MW_TTYS2HWFLOWCONTROL_CHECKBOX 0\n#define MW_TTYS5_BAUDRATE 27\n#define MW_TTYS5_PARITY 0\n#define MW_TTYS5_STOPBIT 0\n#define MW_TTYS5_PORTMAP 48\n#define MW_PWM_MAIN_ONESHOT 0\n#define MW_PWM_MAIN_FREQUENCY 400\n#define MW_PWM_AUX_ONESHOT 0\n#define MW_PWM_AUX_FREQUENCY 200\n#define MW_PWM_CH1_FAILSAFE 900\n#define MW_PWM_CH1_DISARMED 900\n#define MW_PWM_CH2_FAILSAFE 900\n#define MW_PWM_CH2_DISARMED 900\n#define MW_PWM_CH3_FAILSAFE 900\n#define MW_PWM_CH3_DISARMED 900\n#define MW_PWM_CH4_FAILSAFE 900\n#define MW_PWM_CH4_DISARMED 900\n#define MW_PWM_CH5_FAILSAFE 900\n#define MW_PWM_CH5_DISARMED 900\n#define MW_PWM_CH6_FAILSAFE 900\n#define MW_PWM_CH6_DISARMED 900\n#define MW_PWM_CH7_FAILSAFE 900\n#define MW_PWM_CH7_DISARMED 900\n#define MW_PWM_CH8_FAILSAFE 900\n#define MW_PWM_CH8_DISARMED 900\n#define MW_PWM_AUX_CH1_FAILSAFE 900\n#define MW_PWM_AUX_CH1_DISARMED 900\n#define MW_PWM_AUX_CH2_FAILSAFE 900\n#define MW_PWM_AUX_CH2_DISARMED 900\n#define MW_PWM_AUX_CH3_FAILSAFE 900\n#define MW_PWM_AUX_CH3_DISARMED 900\n#define MW_PWM_AUX_CH4_FAILSAFE 900\n#define MW_PWM_AUX_CH4_DISARMED 900\n#define MW_PWM_AUX_CH5_FAILSAFE 900\n#define MW_PWM_AUX_CH5_DISARMED 900\n#define MW_PWM_AUX_CH6_FAILSAFE 900\n#define MW_PWM_AUX_CH6_DISARMED 900\n#define MW_HRT_CONSTRAINT 0\n#define MW_SEM_WATERMARK 20\n#define MW_IOBLOCKSMODE connected\n#define MW_DATAVERSION 2016.02\n\n#endif /* __MW_TARGET_HARDWARE_RESOURCES_H__ */\n\n#endif\n\n#endif\n"},{"name":"MW_uORB_Read.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2023b\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/* Copyright 2018-2020 The MathWorks, Inc. */\n\n#include \"nuttxinitialize.h\"\n#include \"MW_PX4_TaskControl.h\"\n#include \"MW_uORB_Read.h\"\n\n#define DEBUG 0\n\nvoid uORB_read_initialize(orb_metadata_t* orbData, pollfd_t* eventStructObj) {\n    int fd = orb_subscribe(orbData);\n    eventStructObj->fd = fd;\n    eventStructObj->events = POLLIN;\n#if DEBUG\n    PX4_INFO(\"* Subscribed to topic: %s (fd = %d)*\\n\", orbData->o_name, fd);\n#endif\n}\n\nboolean_T uORB_read_step(orb_metadata_t* orbData,\n                         pollfd_t* eventStructObj,\n                         void* busData,\n                         boolean_T blockingMode,\n                         double blockingTimeout) {\n    boolean_T updated = 0;\n    bool isUpdated = false;\n    if (blockingMode) {\n#if defined(MW_PX4_NUTTX_BUILD)\n        int poll_ret = px4_poll(eventStructObj, 1, blockingTimeout);\n        static int error_counter = 0;\n        if (poll_ret == 0) {\n#if DEBUG\n            PX4_ERR(\"Got no data within %.9lf second\", blockingTimeout / 1000.0);\n#endif\n        } else if (poll_ret < 0) {\n            if (error_counter < 10 || error_counter % 500 == 0) {\n                /* use a counter to prevent flooding and slowing the system down */\n#if DEBUG\n                PX4_ERR(\"ERROR return value from poll(): %d\", poll_ret);\n#endif\n            }\n            error_counter++;\n\n        } else {\n            if (eventStructObj->revents & POLLIN) {\n                orb_copy(orbData, eventStructObj->fd, busData);\n                updated = 1;\n            }\n        }\n#elif defined(MW_PX4_POSIX_BUILD)\n        double count = 0;\n        /* The blocking timeout mentioned in the block mask is seconds but\n         * system object converts it to milliseconds*/\n        while (count < blockingTimeout) {\n            // Sleep for 1 ms and then again check if\n            // uORB topic is updated\n            usleep(1000);\n            orb_check(eventStructObj->fd, &isUpdated);\n            if (isUpdated) {\n                orb_copy(orbData, eventStructObj->fd, busData);\n                break;\n            }\n            count++;\n        }\n\n        updated = isUpdated ? 1 : 0;\n#endif\n    } else {\n        orb_check(eventStructObj->fd, &isUpdated);\n        if (isUpdated) {\n            orb_copy(orbData, eventStructObj->fd, busData);\n        }\n        updated = isUpdated ? 1 : 0;\n    }\n\n    return updated;\n}\n\nvoid uORB_read_terminate(const pollfd_t* eventStructObj) {\n    orb_unsubscribe(eventStructObj->fd);\n}\n"},{"name":"MW_uORB_Write.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2023b\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/* Copyright 2018 The MathWorks, Inc. */\n\n#include \"nuttxinitialize.h\"\n#include \"MW_PX4_TaskControl.h\"\n#include \"MW_uORB_Write.h\"\n\n#define DEBUG 0\n\nvoid uORB_write_initialize(orb_metadata_t* orbData,\n                          orb_advert_t* orbAdvertObj,\n                          void* busData,\n                          int queueLen) {\n    *orbAdvertObj = orb_advertise_queue(orbData, busData, queueLen);    \n#if DEBUG\n    PX4_INFO(\"Started advertising topic: %s \\n\",  orbData->o_name);\n#endif    \n}\n\nvoid uORB_write_step(orb_metadata_t* orbData,\n                    orb_advert_t* orbAdvertObj,\n                    void* busData) {\n    orb_publish(orbData, *orbAdvertObj, busData);\n}\n\nvoid uORB_write_terminate(const orb_advert_t* orbAdvertObj) {\n    orb_unadvertise(*orbAdvertObj);\n}\n"},{"name":"MW_uORB_busstruct_conversion.h","type":"header","group":"other","path":"E:\\OneDrive\\Research\\Hexacopter_FDDProject\\work\\code\\uORBReadWrite_example_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef _MW_UORB_BUSSTRUCT_CONVERSION_H_\r\n#define _MW_UORB_BUSSTRUCT_CONVERSION_H_\r\n\r\n#include <uORB/topics/vehicle_attitude_setpoint.h>\r\n#include <uORB/topics/vehicle_rates_setpoint.h>\r\n\r\ntypedef struct vehicle_attitude_setpoint_s  px4_Bus_vehicle_attitude_setpoint ;\r\ntypedef struct vehicle_rates_setpoint_s  px4_Bus_vehicle_rates_setpoint ;\r\n\r\n#endif\r\n"},{"name":"nuttxinitialize.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2023b\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright 2018-2022 The MathWorks, Inc.\n *\n * File: nuttxinitialize.c\n *\n * Abstract:\n *  This file contains RTOS thread creation functions\n *\n */\n\n#include \"nuttxinitialize.h\"\n#include \"MW_PX4_TaskControl.h\"\n\n/***********************************************\n * Added for Simulink Threads\n ************************************************/\npthread_attr_t attr;\nstatic baseRateInfo_t g_info;\nstruct sched_param g_sp;\n// extern volatile boolean_T runModel ;\n\n/***********************************************\n * Added for HRT\n ************************************************/\nstruct hrt_call BaseRate_HRT;\nint baserate_sem_copy;\n\n\n#define MW_RTOS_DEBUG 0\n\nbaseRateInfo_t EXT_sig_info;\nbaseRateInfo_t SDCard_sig_info;\nextern pthread_t backgroundThread;\nextern pthread_t loggingThread;\nextern void exitFcn(int sig);\n\nvoid setTaskPeriod(double periodInSeconds, int sigNo) {\n    timer_t timerId;\n    struct sigevent sev;\n    struct itimerspec its;\n    long stNanoSec;\n    int status;\n\n    /* Create a timer */\n    sev.sigev_notify = SIGEV_SIGNAL;\n    sev.sigev_signo = sigNo;\n    sev.sigev_value.sival_ptr = &timerId;\n    status = timer_create(CLOCK_REALTIME, &sev, &timerId);\n    CHECK_STATUS(status, 0, \"timer_create\");\n\n    /* Arm real-time scheduling timer */\n    stNanoSec = (long)(periodInSeconds * 1e9);\n    its.it_value.tv_sec = stNanoSec / 1000000000;\n    its.it_value.tv_nsec = stNanoSec % 1000000000;\n    its.it_interval.tv_sec = its.it_value.tv_sec;\n    its.it_interval.tv_nsec = its.it_value.tv_nsec;\n    status = timer_settime(timerId, 0, &its, NULL);\n    CHECK_STATUS(status, 0, \"timer_settime\");\n}\n\nvoid print_sem_value() {\n    PX4_WARN(\"Sem value = %d\", baserate_sem_copy);\n}\n\nstatic void Base_HRT_Callback(void* arg) {\n#ifndef PX4_CONNECTEDIO\n    int sem_value_check;\n\n    px4_sem_getvalue(&baserateTaskSem, &sem_value_check);\n    px4_sem_post(&baserateTaskSem);\n    baserate_sem_copy = sem_value_check;\n\n#endif\n}\n\n/* ---------------------------- */\n/* Externally visible functions */\n/* ---------------------------- */\nvoid myWaitForThisEvent(int sigNo) {\n    sigset_t sigMask;\n\n    sigemptyset(&sigMask);\n    sigaddset(&sigMask, sigNo);\n    sigwaitinfo(&sigMask, NULL);\n    //\tCHECK_STATUS_NOT(status, -1, \"sigwaitinfo\");\n}\n\nvoid MW_PX4_WaitForThisEvent(void* arg) {\n#ifdef EXT_MODE\n    /*pace External mode thread at 10 Hz*/\n    usleep(100000);\n\n    /*Signaling is causing issue when sample time is greater than 0.1\n     and model runs for more than 60 seconds. In this case model stop is not\n     stopping External mode. Using usleep for now to sleep the External Mode thread.*/\n\n    // baseRateInfo_t ext_info = *((baseRateInfo_t *)arg);\n    // static boolean_T isTaskPeriodSet = false;\n    // boolean_T rtmStopReq = rtmGetStopRequested(MW_StringifyDefineFunction(MODEL, _M));\n\n    // if (!isTaskPeriodSet) {\n    //     setTaskPeriod(ext_info.period, ext_info.sigNo);\n    //     isTaskPeriodSet = true;\n    // }\n\n    // if (!rtmStopReq) {\n    //     myWaitForThisEvent(ext_info.sigNo);\n    // }\n\n#endif\n}\n\nvoid myAddBlockForThisEvent(int sigNo) {\n    int status;\n    sigset_t sigMask;\n\n    sigemptyset(&sigMask);\n    sigaddset(&sigMask, sigNo);\n    status = pthread_sigmask(SIG_BLOCK, &sigMask, NULL);\n    CHECK_STATUS(status, 0, \"pthread_sigmask\");\n}\n\nvoid nuttxRTOSInit(double baseRatePeriod, int numSubrates) {\n    /* This is because in Daren's original Task callback ,a sleep was added before creating the\n     * threads*/\n    sleep(1);\n\n    int status;\n\n#if defined(MW_PX4_NUTTX_BUILD)\n    size_t stackSize;\n    int baseRatePriority = MW_BASERATE_PRIORITY;\n#endif\n\n#ifdef MW_HAS_MULTIPLE_RATES\n    int i;\n    // char taskName[20];\n#endif\n#if defined(MW_PX4_NUTTX_BUILD)\n    sched_lock();\n#endif\n    // status = px4_sem_init(&termSem, 0, 0); PX4 PSP Dev: termSem no longer needed\n    // CHECK_STATUS(status, 0,\"px4_sem_init:termSem\");\n    status = px4_sem_init(&stopSem, 0, 0);\n    CHECK_STATUS(status, 0, \"px4_sem_init:stopSem\");\n    status = px4_sem_init(&baserateTaskSem, 0, 0);\n    CHECK_STATUS(status, 0, \"px4_sem_init:baserateTaskSem\");\n\n    // or you can use/check: _POSIX_PRIORITY_SCHEDULING\n    // _POSIX_THREAD_PRIORITY_SCHEDULING\n#if !defined(_POSIX_PRIORITY_SCHEDULING)\n    PX4_INFO(\"Priority scheduling is NOT supported by your system.\");\n    PX4_INFO(\"The generated code will not run correctly because your\");\n    PX4_INFO(\"model contains multiple rates and uses multi-tasking\");\n    PX4_INFO(\"code generation mode. You can only run the generated code\");\n    PX4_INFO(\"in single-tasking mode in your system. Open\");\n    PX4_INFO(\"Simulation -> Configuration Parameters -> Solver dialog\");\n    PX4_INFO(\"and set \\\"Tasking mode for periodic sample times\\\" parameter to SingleTasking.\");\n    PX4_INFO(\n        \"Re-build the Simulink model with the new settings and try executing the generated code \"\n        \"again.\");\n    fflush(stdout);\n    exit(-1);\n#endif\n\n#if defined(MW_PX4_NUTTX_BUILD)\n    /* Set scheduling policy of the main thread to SCHED_FIFO */\n    g_sp.sched_priority = sched_get_priority_max(SCHED_FIFO) - 50;\n    status = sched_setscheduler(0, SCHED_FIFO, &g_sp);\n    CHECK_STATUS(status, 0, \"sched_setscheduler\");\n\n    /*Added init attribute and scheduler policy */\n    pthread_attr_init(&attr);\n    status = pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);\n    CHECK_STATUS(status, 0, \"pthread_attr_setinheritsched\");\n    status = pthread_attr_setschedpolicy(&attr, SCHED_FIFO);\n    CHECK_STATUS(status, 0, \"pthread_attr_setschedpolicy\");\n    // status = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n    // CHECK_STATUS(status, 0, \"pthread_attr_setdetachstate\");\n\n    /* PTHREAD_STACK_MIN is the minimum stack size required to start a thread */\n    stackSize = 8192 + PTHREAD_STACK_MIN;\n\n    /*added stack attribute back in */\n    status = pthread_attr_setstacksize(&attr, stackSize);\n    CHECK_STATUS(status, 0, \"pthread_attr_setstacksize\");\n#endif\n    /* set up info structure */\n    g_info.period = baseRatePeriod;\n    g_info.sigNo = BASERATE_TIMER_SIGNAL; // SIGRTMIN;\n\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"   stackSize = %d sched_priority = %d\", stackSize, g_sp.sched_priority);\n    PX4_INFO(\"   MW_BASERATE_PERIOD = %8.5f MW_BASERATE_PRIORITY = %d SIGRTMIN = 0x%08X\",\n             (double)baseRatePeriod, (int)baseRatePriority, SIGRTMIN);\n    PX4_INFO(\"   Init info.period = %8.5f sigNo = 0x%04X\", g_info.period, g_info.sigNo);\n    PX4_INFO(\"**creating the Base Rate thread before calling pthread_create**\");\n    fflush(stdout);\n#endif\n\n    /* Create the Base Rate Task here */\n#if defined(MW_PX4_NUTTX_BUILD)\n    g_sp.sched_priority = baseRatePriority;\n    status = pthread_attr_setschedparam(&attr, &g_sp);\n    status = pthread_create(&baseRateThread, &attr, &baseRateTask, (void*)&g_info);\n#elif defined(MW_PX4_POSIX_BUILD)\n    status = pthread_create(&baseRateThread, nullptr, &baseRateTask, (void*)&g_info);\n#endif\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"** Base Rate Task ID = %d with Priority = %d\\n\", baseRateThread, g_sp.sched_priority);\n    fflush(stdout);\n#endif\n\n/* Create sub-rate Tasks here */\n#ifdef MW_HAS_MULTIPLE_RATES\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"Creating sub-rate task threads\\n\");\n    PX4_INFO(\"Number of sub rate tasks: %d \\n\", MW_NUMBER_SUBRATES);\n    fflush(stdout);\n#endif\n\n    for (i = 0; i < MW_NUMBER_SUBRATES; i++) {\n        taskId[i] = i;\n        status = px4_sem_init(&subrateTaskSem[i], 0, 0);\n        CHECK_STATUS(status, 0, \"px4_sem_init: subrateTaskSem\");\n        // g_sp.sched_priority = MW_BASERATE_PRIORITY -40 + subratePriority[i] - 1;\n        g_sp.sched_priority = subratePriority[i];\n#if MW_RTOS_DEBUG\n        PX4_INFO(\"MW_SUBRATE_PRIORITY = %d \", (int)g_sp.sched_priority);\n#endif\n\n#if defined(MW_PX4_NUTTX_BUILD)\n        status = pthread_attr_setschedparam(&attr, &g_sp);\n        CHECK_STATUS(status, 0, \"pthread_attr_setschedparam\");\n        status = pthread_create(&subRateThread[i], &attr, &subrateTask, (void*)&taskId[i]);\n#elif defined(MW_PX4_POSIX_BUILD)\n        status = pthread_create(&subRateThread[i], nullptr, &subrateTask, (void*)&taskId[i]);\n#endif\n        CHECK_STATUS(status, 0, \"pthread_create\");\n\n#if MW_RTOS_DEBUG\n        PX4_INFO(\"** Sub Rate Task ID = %d \", subRateThread[i]);\n        fflush(stdout);\n#endif\n    }\n#endif // End of \"If Multiple Rates\" check\n\n#if defined(MW_PX4_NUTTX_BUILD)\n    g_sp.sched_priority = baseRatePriority;\n    status = pthread_attr_setschedparam(&attr, &g_sp);\n#endif\n\n    /* Create the Scheduler Task here */\n    long stMicroSec;\n    stMicroSec = (long)(g_info.period * 1e6);\n    hrt_call_every(&BaseRate_HRT, stMicroSec, stMicroSec, Base_HRT_Callback,\n                   NULL); // timing callback to post base-rate semaphore\n\n/* Create the External Mode Task here */\n#ifdef EXT_MODE\n    /*---------- Creating EXT-mode Background Task ------------------*/\n    /* Setup signal info to block for EXT Mode */\n    EXT_sig_info.period = 0.1; // Sample rate at which we want Simulink to update w/ ext mode\n    EXT_sig_info.sigNo = SIGRTMIN;\n    /* Signaling the thread not working for low sample frequency*/\n    // sigemptyset(&EXT_sig_info.sigMask);\n    // sigaddset(&EXT_sig_info.sigMask, EXT_sig_info.sigNo);\n    // myAddBlockForThisEvent(EXT_sig_info.sigNo);\n\n    /* Setup thread for Custom Task */\n    fflush(stdout);\n#if defined(MW_PX4_NUTTX_BUILD)\n    g_sp.sched_priority = 40; // default is 100\n    status = pthread_attr_setschedparam(&attr, &g_sp);\n    status = pthread_create(&backgroundThread, &attr, &backgroundTask, (void*)&EXT_sig_info);\n#elif defined(MW_PX4_POSIX_BUILD)\n    status = pthread_create(&backgroundThread, nullptr, &backgroundTask, (void*)&EXT_sig_info);\n#endif\n    CHECK_STATUS(status, 0, \"EXT Mode Background pthread_create\");\n/*---------------------------------------------------------*/\n#endif\n\n/* Create the SD Card Task here */\n#if MAT_FILE\n    /*---------- Creating SD Card Background Task ------------------*/\n    fflush(stdout);\n#if defined(MW_PX4_NUTTX_BUILD)\n    g_sp.sched_priority = 40; // default is 100\n    status = pthread_attr_setschedparam(&attr, &g_sp);\n    status = pthread_create(&loggingThread, &attr, &loggingThreadFcn, NULL);\n#elif defined(MW_PX4_POSIX_BUILD)\n    status = pthread_create(&loggingThread, nullptr, &loggingThreadFcn, NULL);\n#endif\n    CHECK_STATUS(status, 0, \"SD Card Background pthread_create\");\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"** SD Card Background ID = %d \", loggingThread);\n    fflush(stdout);\n#endif\n\n/*---------------------------------------------------------*/\n#endif\n\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"px4_simulink_app : Created Simulink task threads successfully\\n\");\n    fflush(stdout);\n#endif\n#if defined(MW_PX4_NUTTX_BUILD)\n    sched_unlock();\n#endif\n}\n\n/*---------- Following function is added as a workaround for uavcan module build failure -------------\n  Original definition of the function is in the file <px4dir>\\Firmware\\Boards\\px4\\fmu-v5\\src\\can.c*/\n#if defined(MW_PX4_NUTTX_BUILD) && defined(CONFIG_CAN) && defined(UAVCAN_NUM_IFACES_RUNTIME)\n__EXPORT\nuint16_t board_get_can_interfaces(void)\n{\n\tuint16_t enabled_interfaces = 0x7;\n\n\tif (!PX4_MFT_HW_SUPPORTED(PX4_MFT_CAN2)) {\n\t\tenabled_interfaces &= ~(1 << 1);\n\t}\n\n\tif (!PX4_MFT_HW_SUPPORTED(PX4_MFT_CAN3)) {\n\t\tenabled_interfaces &= ~(1 << 2);\n\t}\n\n\treturn enabled_interfaces;\n }\n#endif\n/*---------------------------------------------------------*/\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};