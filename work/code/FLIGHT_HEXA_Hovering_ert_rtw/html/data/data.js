var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"FLIGHT_HEXA_Hovering","ref":false,"files":[{"name":"ert_main.cpp","type":"source","group":"main","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Main file","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: ert_main.cpp\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include \"FLIGHT_HEXA_Hovering.h\"\r\n#include \"FLIGHT_HEXA_Hovering_private.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"limits.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"MW_PX4_TaskControl.h\"\r\n#include \"nuttxinitialize.h\"\r\n#define UNUSED(x)                      x = x\r\n#define NAMELEN                        16\r\n\r\n// Function prototype declaration\r\nvoid exitFcn(int sig);\r\nvoid *terminateTask(void *arg);\r\nvoid *baseRateTask(void *arg);\r\nvoid *subrateTask(void *arg);\r\nvolatile boolean_T stopRequested = false;\r\nvolatile boolean_T runModel = true;\r\npx4_sem_t stopSem;\r\npx4_sem_t baserateTaskSem;\r\npthread_t schedulerThread;\r\npthread_t baseRateThread;\r\nvoid *threadJoinStatus;\r\nint terminatingmodel = 0;\r\nvoid *baseRateTask(void *arg)\r\n{\r\n  runModel = (rtmGetErrorStatus(FLIGHT_HEXA_Hovering_M) == (NULL));\r\n  while (runModel) {\r\n    px4_sem_wait(&baserateTaskSem);\r\n    FLIGHT_HEXA_Hovering_step();\r\n\r\n    // Get model outputs here\r\n    stopRequested = !((rtmGetErrorStatus(FLIGHT_HEXA_Hovering_M) == (NULL)));\r\n  }\r\n\r\n  runModel = 0;\r\n  terminateTask(arg);\r\n  pthread_exit((void *)0);\r\n  return NULL;\r\n}\r\n\r\nvoid exitFcn(int sig)\r\n{\r\n  UNUSED(sig);\r\n  rtmSetErrorStatus(FLIGHT_HEXA_Hovering_M, \"stopping the model\");\r\n  runModel = 0;\r\n}\r\n\r\nvoid *terminateTask(void *arg)\r\n{\r\n  UNUSED(arg);\r\n  terminatingmodel = 1;\r\n\r\n  {\r\n    runModel = 0;\r\n  }\r\n\r\n  MW_PX4_Terminate();\r\n\r\n  // Terminate model\r\n  FLIGHT_HEXA_Hovering_terminate();\r\n  px4_sem_post(&stopSem);\r\n  return NULL;\r\n}\r\n\r\nint px4_simulink_app_task_main (int argc, char *argv[])\r\n{\r\n  px4_simulink_app_control_MAVLink();\r\n  rtmSetErrorStatus(FLIGHT_HEXA_Hovering_M, 0);\r\n\r\n  // Initialize model\r\n  FLIGHT_HEXA_Hovering_initialize();\r\n\r\n  // Call RTOS Initialization function\r\n  nuttxRTOSInit(0.01, 0);\r\n\r\n  // Wait for stop semaphore\r\n  px4_sem_wait(&stopSem);\r\n\r\n#if (MW_NUMBER_TIMER_DRIVEN_TASKS > 0)\r\n\r\n  {\r\n    int i;\r\n    for (i=0; i < MW_NUMBER_TIMER_DRIVEN_TASKS; i++) {\r\n      CHECK_STATUS(px4_sem_destroy(&timerTaskSem[i]), 0, \"px4_sem_destroy\");\r\n    }\r\n  }\r\n\r\n#endif\r\n\r\n  return 0;\r\n}\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"FLIGHT_HEXA_Hovering.cpp","type":"source","group":"model","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: FLIGHT_HEXA_Hovering.cpp\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#include \"FLIGHT_HEXA_Hovering.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"FLIGHT_HEXA_Hovering_private.h\"\r\n#include <math.h>\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rt_nonfinite.h\"\r\n\r\n}\r\n\r\n#include <string.h>\r\n#include \"rt_defines.h\"\r\n#include <float.h>\r\n\r\n// Named constants for Chart: '<S4>/Chart'\r\nconst uint8_T FLIGHT_HEXA_Hovering_IN_MISSION = 1U;\r\nconst uint8_T FLIGHT_HEXA_Hovering_IN_STABLIZED = 2U;\r\nconst real_T FLIGHT_HEXA_Hovering_period = 0.01;\r\n\r\n// Block signals (default storage)\r\nB_FLIGHT_HEXA_Hovering_T FLIGHT_HEXA_Hovering_B;\r\n\r\n// Block states (default storage)\r\nDW_FLIGHT_HEXA_Hovering_T FLIGHT_HEXA_Hovering_DW;\r\n\r\n// Real-time model\r\nRT_MODEL_FLIGHT_HEXA_Hovering_T FLIGHT_HEXA_Hovering_M_ =\r\n  RT_MODEL_FLIGHT_HEXA_Hovering_T();\r\nRT_MODEL_FLIGHT_HEXA_Hovering_T *const FLIGHT_HEXA_Hovering_M =\r\n  &FLIGHT_HEXA_Hovering_M_;\r\n\r\n// Forward declaration for local functions\r\nstatic real_T FLIGHT_HEXA_Hovering_sind(real_T x);\r\n\r\n// Forward declaration for local functions\r\nstatic real_T FLIGHT_HEXA_Hovering_rt_atan2d_snf(real_T u0, real_T u1);\r\nstatic real_T FLIGHT_HEXA_Hovering_rt_remd_snf(real_T u0, real_T u1);\r\nstatic real_T FLIGHT_HEXA_Hovering_sind_d(real_T x);\r\nstatic void FLIGHT_HEXA_Hovering_lla2ned(const real_T lla[3], const real_T lla0\r\n  [3], real_T xyzNED[3]);\r\nstatic real_T FLIGHT_HEXA_Hovering_norm(const real_T x[3]);\r\n\r\n// System initialize for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_SourceBlock_Init(DW_SourceBlock_FLIGHT_HEXA_Hovering_T\r\n  *localDW)\r\n{\r\n  // Start for MATLABSystem: '<S6>/SourceBlock'\r\n  localDW->obj.matlabCodegenIsDeleted = false;\r\n  localDW->objisempty = true;\r\n  localDW->obj.isInitialized = 1;\r\n  localDW->obj.orbMetadataObj = ORB_ID(actuator_armed);\r\n  uORB_read_initialize(localDW->obj.orbMetadataObj, &localDW->obj.eventStructObj);\r\n  localDW->obj.isSetupComplete = true;\r\n}\r\n\r\n// Output and update for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_SourceBlock(B_SourceBlock_FLIGHT_HEXA_Hovering_T\r\n  *localB, DW_SourceBlock_FLIGHT_HEXA_Hovering_T *localDW)\r\n{\r\n  // MATLABSystem: '<S6>/SourceBlock'\r\n  localB->SourceBlock_o1 = uORB_read_step(localDW->obj.orbMetadataObj,\r\n    &localDW->obj.eventStructObj, &localB->SourceBlock_o2, false, 1.0);\r\n}\r\n\r\n// Termination for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_SourceBlock_Term(DW_SourceBlock_FLIGHT_HEXA_Hovering_T\r\n  *localDW)\r\n{\r\n  // Terminate for MATLABSystem: '<S6>/SourceBlock'\r\n  if (!localDW->obj.matlabCodegenIsDeleted) {\r\n    localDW->obj.matlabCodegenIsDeleted = true;\r\n    if ((localDW->obj.isInitialized == 1) && localDW->obj.isSetupComplete) {\r\n      uORB_read_terminate(&localDW->obj.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S6>/SourceBlock'\r\n}\r\n\r\n// System initialize for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_SourceBlock_k_Init\r\n  (DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T *localDW)\r\n{\r\n  // Start for MATLABSystem: '<S12>/SourceBlock'\r\n  localDW->obj.matlabCodegenIsDeleted = false;\r\n  localDW->objisempty = true;\r\n  localDW->obj.isInitialized = 1;\r\n  localDW->obj.orbMetadataObj = ORB_ID(input_rc);\r\n  uORB_read_initialize(localDW->obj.orbMetadataObj, &localDW->obj.eventStructObj);\r\n  localDW->obj.isSetupComplete = true;\r\n}\r\n\r\n// Output and update for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_SourceBlock_b(B_SourceBlock_FLIGHT_HEXA_Hovering_i_T\r\n  *localB, DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T *localDW)\r\n{\r\n  // MATLABSystem: '<S12>/SourceBlock'\r\n  localB->SourceBlock_o1 = uORB_read_step(localDW->obj.orbMetadataObj,\r\n    &localDW->obj.eventStructObj, &localB->SourceBlock_o2, false, 5000.0);\r\n}\r\n\r\n// Termination for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_SourceBlock_o_Term\r\n  (DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T *localDW)\r\n{\r\n  // Terminate for MATLABSystem: '<S12>/SourceBlock'\r\n  if (!localDW->obj.matlabCodegenIsDeleted) {\r\n    localDW->obj.matlabCodegenIsDeleted = true;\r\n    if ((localDW->obj.isInitialized == 1) && localDW->obj.isSetupComplete) {\r\n      uORB_read_terminate(&localDW->obj.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S12>/SourceBlock'\r\n}\r\n\r\nreal_T rt_remd_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u1)) {\r\n    y = u0;\r\n  } else {\r\n    real_T q;\r\n    if (u1 < 0.0) {\r\n      q = ceil(u1);\r\n    } else {\r\n      q = floor(u1);\r\n    }\r\n\r\n    if ((u1 != 0.0) && (u1 != q)) {\r\n      q = fabs(u0 / u1);\r\n      if (!(fabs(q - floor(q + 0.5)) > DBL_EPSILON * q)) {\r\n        y = 0.0 * u0;\r\n      } else {\r\n        y = fmod(u0, u1);\r\n      }\r\n    } else {\r\n      y = fmod(u0, u1);\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\nstatic real_T FLIGHT_HEXA_Hovering_sind(real_T x)\r\n{\r\n  real_T absx;\r\n  real_T b_x;\r\n\r\n  // Start for MATLABSystem: '<S42>/MATLAB System'\r\n  if (rtIsInf(x) || rtIsNaN(x)) {\r\n    b_x = (rtNaN);\r\n  } else {\r\n    b_x = rt_remd_snf(x, 360.0);\r\n    absx = fabs(b_x);\r\n    if (absx > 180.0) {\r\n      if (b_x > 0.0) {\r\n        b_x -= 360.0;\r\n      } else {\r\n        b_x += 360.0;\r\n      }\r\n\r\n      absx = fabs(b_x);\r\n    }\r\n\r\n    if (absx <= 45.0) {\r\n      b_x *= 0.017453292519943295;\r\n      b_x = sin(b_x);\r\n    } else if (absx <= 135.0) {\r\n      if (b_x > 0.0) {\r\n        b_x = (b_x - 90.0) * 0.017453292519943295;\r\n        b_x = cos(b_x);\r\n      } else {\r\n        b_x = (b_x + 90.0) * 0.017453292519943295;\r\n        b_x = -cos(b_x);\r\n      }\r\n    } else {\r\n      if (b_x > 0.0) {\r\n        b_x = (b_x - 180.0) * 0.017453292519943295;\r\n      } else {\r\n        b_x = (b_x + 180.0) * 0.017453292519943295;\r\n      }\r\n\r\n      b_x = -sin(b_x);\r\n    }\r\n  }\r\n\r\n  // End of Start for MATLABSystem: '<S42>/MATLAB System'\r\n  return b_x;\r\n}\r\n\r\nreal_T rt_atan2d_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u0) && rtIsInf(u1)) {\r\n    int32_T tmp;\r\n    int32_T tmp_0;\r\n    if (u0 > 0.0) {\r\n      tmp = 1;\r\n    } else {\r\n      tmp = -1;\r\n    }\r\n\r\n    if (u1 > 0.0) {\r\n      tmp_0 = 1;\r\n    } else {\r\n      tmp_0 = -1;\r\n    }\r\n\r\n    y = atan2(static_cast<real_T>(tmp), static_cast<real_T>(tmp_0));\r\n  } else if (u1 == 0.0) {\r\n    if (u0 > 0.0) {\r\n      y = RT_PI / 2.0;\r\n    } else if (u0 < 0.0) {\r\n      y = -(RT_PI / 2.0);\r\n    } else {\r\n      y = 0.0;\r\n    }\r\n  } else {\r\n    y = atan2(u0, u1);\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n// System initialize for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_MATLABSystem_Init\r\n  (DW_MATLABSystem_FLIGHT_HEXA_Hovering_T *localDW)\r\n{\r\n  // Start for MATLABSystem: '<S42>/MATLAB System'\r\n  localDW->obj.matlabCodegenIsDeleted = false;\r\n  localDW->objisempty = true;\r\n  localDW->obj.isSetupComplete = true;\r\n}\r\n\r\n// Output and update for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_MATLABSystem(const real_T rtu_0[3], const real_T\r\n  rtu_1[3], boolean_T rtu_2, uint8_T rtu_3,\r\n  B_MATLABSystem_FLIGHT_HEXA_Hovering_T *localB)\r\n{\r\n  real_T absx;\r\n  real_T dLon;\r\n  real_T flat;\r\n  real_T flat_tmp;\r\n  real_T r;\r\n  int32_T b_k;\r\n  boolean_T b[3];\r\n  boolean_T exitg1;\r\n  boolean_T latp2;\r\n\r\n  // MATLABSystem: '<S42>/MATLAB System'\r\n  if (rtu_2 && (rtu_3 != 5)) {\r\n    localB->dLat = rtu_0[0] - rtu_1[0];\r\n    dLon = rtu_0[1] - rtu_1[1];\r\n    flat = fabs(localB->dLat);\r\n    if (flat > 180.0) {\r\n      if (rtIsNaN(localB->dLat + 180.0) || rtIsInf(localB->dLat + 180.0)) {\r\n        r = (rtNaN);\r\n      } else if (localB->dLat + 180.0 == 0.0) {\r\n        r = 0.0;\r\n      } else {\r\n        r = fmod(localB->dLat + 180.0, 360.0);\r\n        if (r == 0.0) {\r\n          r = 0.0;\r\n        } else if (localB->dLat + 180.0 < 0.0) {\r\n          r += 360.0;\r\n        }\r\n      }\r\n\r\n      localB->dLat = localB->dLat * 0.0 + (r - 180.0);\r\n      flat = fabs(localB->dLat);\r\n    }\r\n\r\n    if (flat > 90.0) {\r\n      flat = fabs(localB->dLat);\r\n      latp2 = (flat > 90.0);\r\n      dLon += 180.0;\r\n      r = localB->dLat * static_cast<real_T>(latp2);\r\n      if (rtIsNaN(r)) {\r\n        r = (rtNaN);\r\n      } else if (r < 0.0) {\r\n        r = -1.0;\r\n      } else {\r\n        r = (r > 0.0);\r\n      }\r\n\r\n      localB->dLat = (90.0 - (flat * static_cast<real_T>(latp2) - 90.0)) * r *\r\n        static_cast<real_T>(latp2) + localB->dLat * static_cast<real_T>(!latp2);\r\n    }\r\n\r\n    if ((dLon > 180.0) || (dLon < -180.0)) {\r\n      flat = rt_remd_snf(dLon, 360.0);\r\n      r = flat / 180.0;\r\n      if (r < 0.0) {\r\n        r = ceil(r);\r\n      } else {\r\n        r = floor(r);\r\n      }\r\n\r\n      dLon = (flat - 360.0 * r) + dLon * 0.0;\r\n    }\r\n\r\n    flat = FLIGHT_HEXA_Hovering_sind(rtu_1[0]);\r\n    flat_tmp = 1.0 - 0.0066943799901413165 * flat * flat;\r\n    flat = 6.378137E+6 / sqrt(flat_tmp);\r\n    if (rtIsInf(rtu_1[0]) || rtIsNaN(rtu_1[0])) {\r\n      r = (rtNaN);\r\n    } else {\r\n      r = rt_remd_snf(rtu_1[0], 360.0);\r\n      absx = fabs(r);\r\n      if (absx > 180.0) {\r\n        if (r > 0.0) {\r\n          r -= 360.0;\r\n        } else {\r\n          r += 360.0;\r\n        }\r\n\r\n        absx = fabs(r);\r\n      }\r\n\r\n      if (absx <= 45.0) {\r\n        r = cos(0.017453292519943295 * r);\r\n      } else if (absx <= 135.0) {\r\n        if (r > 0.0) {\r\n          r = -sin((r - 90.0) * 0.017453292519943295);\r\n        } else {\r\n          r = sin((r + 90.0) * 0.017453292519943295);\r\n        }\r\n      } else {\r\n        if (r > 0.0) {\r\n          r = (r - 180.0) * 0.017453292519943295;\r\n        } else {\r\n          r = (r + 180.0) * 0.017453292519943295;\r\n        }\r\n\r\n        r = -cos(r);\r\n      }\r\n    }\r\n\r\n    localB->dLat /= rt_atan2d_snf(1.0, 0.99330562000985867 / flat_tmp * flat) *\r\n      57.295779513082323;\r\n    dLon /= rt_atan2d_snf(1.0, flat * r) * 57.295779513082323;\r\n    flat = -rtu_0[2] + rtu_1[2];\r\n    b[0] = rtIsNaN(localB->dLat);\r\n    b[1] = rtIsNaN(dLon);\r\n    b[2] = rtIsNaN(flat);\r\n    latp2 = false;\r\n    b_k = 0;\r\n    exitg1 = false;\r\n    while ((!exitg1) && (b_k < 3)) {\r\n      if (b[b_k]) {\r\n        latp2 = true;\r\n        exitg1 = true;\r\n      } else {\r\n        b_k++;\r\n      }\r\n    }\r\n\r\n    r = 0.0 / static_cast<real_T>(!latp2);\r\n\r\n    // MATLABSystem: '<S42>/MATLAB System'\r\n    localB->MATLABSystem[0] = static_cast<real32_T>(r + localB->dLat);\r\n    localB->MATLABSystem[1] = static_cast<real32_T>(r + dLon);\r\n    localB->MATLABSystem[2] = static_cast<real32_T>(r + flat);\r\n  } else {\r\n    // MATLABSystem: '<S42>/MATLAB System'\r\n    localB->MATLABSystem[0] = 0.0F;\r\n    localB->MATLABSystem[1] = 0.0F;\r\n    localB->MATLABSystem[2] = 0.0F;\r\n  }\r\n\r\n  // End of MATLABSystem: '<S42>/MATLAB System'\r\n}\r\n\r\n// Termination for atomic system:\r\nvoid FLIGHT_HEXA_Hovering_MATLABSystem_Term\r\n  (DW_MATLABSystem_FLIGHT_HEXA_Hovering_T *localDW)\r\n{\r\n  // Terminate for MATLABSystem: '<S42>/MATLAB System'\r\n  if (!localDW->obj.matlabCodegenIsDeleted) {\r\n    localDW->obj.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S42>/MATLAB System'\r\n}\r\n\r\nstatic real_T FLIGHT_HEXA_Hovering_rt_atan2d_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u0) && rtIsInf(u1)) {\r\n    if (u0 > 0.0) {\r\n      FLIGHT_HEXA_Hovering_B.i = 1;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.i = -1;\r\n    }\r\n\r\n    if (u1 > 0.0) {\r\n      FLIGHT_HEXA_Hovering_B.i1_b = 1;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.i1_b = -1;\r\n    }\r\n\r\n    y = atan2(static_cast<real_T>(FLIGHT_HEXA_Hovering_B.i), static_cast<real_T>\r\n              (FLIGHT_HEXA_Hovering_B.i1_b));\r\n  } else if (u1 == 0.0) {\r\n    if (u0 > 0.0) {\r\n      y = RT_PI / 2.0;\r\n    } else if (u0 < 0.0) {\r\n      y = -(RT_PI / 2.0);\r\n    } else {\r\n      y = 0.0;\r\n    }\r\n  } else {\r\n    y = atan2(u0, u1);\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\nstatic real_T FLIGHT_HEXA_Hovering_rt_remd_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u1)) {\r\n    y = u0;\r\n  } else {\r\n    if (u1 < 0.0) {\r\n      FLIGHT_HEXA_Hovering_B.q = ceil(u1);\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.q = floor(u1);\r\n    }\r\n\r\n    if ((u1 != 0.0) && (u1 != FLIGHT_HEXA_Hovering_B.q)) {\r\n      FLIGHT_HEXA_Hovering_B.q = fabs(u0 / u1);\r\n      if (!(fabs(FLIGHT_HEXA_Hovering_B.q - floor(FLIGHT_HEXA_Hovering_B.q + 0.5))\r\n            > DBL_EPSILON * FLIGHT_HEXA_Hovering_B.q)) {\r\n        y = 0.0 * u0;\r\n      } else {\r\n        y = fmod(u0, u1);\r\n      }\r\n    } else {\r\n      y = fmod(u0, u1);\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\nstatic real_T FLIGHT_HEXA_Hovering_sind_d(real_T x)\r\n{\r\n  real_T b_x;\r\n\r\n  // Start for MATLABSystem: '<S19>/LLA2LocalCoordinates' incorporates:\r\n  //   MATLABSystem: '<S45>/MATLAB System'\r\n\r\n  if (rtIsInf(x) || rtIsNaN(x)) {\r\n    b_x = (rtNaN);\r\n  } else {\r\n    b_x = FLIGHT_HEXA_Hovering_rt_remd_snf(x, 360.0);\r\n    FLIGHT_HEXA_Hovering_B.absx_c = fabs(b_x);\r\n    if (FLIGHT_HEXA_Hovering_B.absx_c > 180.0) {\r\n      if (b_x > 0.0) {\r\n        b_x -= 360.0;\r\n      } else {\r\n        b_x += 360.0;\r\n      }\r\n\r\n      FLIGHT_HEXA_Hovering_B.absx_c = fabs(b_x);\r\n    }\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.absx_c <= 45.0) {\r\n      b_x *= 0.017453292519943295;\r\n      b_x = sin(b_x);\r\n    } else if (FLIGHT_HEXA_Hovering_B.absx_c <= 135.0) {\r\n      if (b_x > 0.0) {\r\n        b_x = (b_x - 90.0) * 0.017453292519943295;\r\n        b_x = cos(b_x);\r\n      } else {\r\n        b_x = (b_x + 90.0) * 0.017453292519943295;\r\n        b_x = -cos(b_x);\r\n      }\r\n    } else {\r\n      if (b_x > 0.0) {\r\n        b_x = (b_x - 180.0) * 0.017453292519943295;\r\n      } else {\r\n        b_x = (b_x + 180.0) * 0.017453292519943295;\r\n      }\r\n\r\n      b_x = -sin(b_x);\r\n    }\r\n  }\r\n\r\n  // End of Start for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n  return b_x;\r\n}\r\n\r\nstatic void FLIGHT_HEXA_Hovering_lla2ned(const real_T lla[3], const real_T lla0\r\n  [3], real_T xyzNED[3])\r\n{\r\n  boolean_T exitg1;\r\n\r\n  // Start for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n  FLIGHT_HEXA_Hovering_B.dLat = lla[0] - lla0[0];\r\n  FLIGHT_HEXA_Hovering_B.dLon = lla[1] - lla0[1];\r\n  FLIGHT_HEXA_Hovering_B.flat = fabs(FLIGHT_HEXA_Hovering_B.dLat);\r\n  if (FLIGHT_HEXA_Hovering_B.flat > 180.0) {\r\n    // Start for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n    if (rtIsNaN(FLIGHT_HEXA_Hovering_B.dLat + 180.0) || rtIsInf\r\n        (FLIGHT_HEXA_Hovering_B.dLat + 180.0)) {\r\n      FLIGHT_HEXA_Hovering_B.r_m = (rtNaN);\r\n    } else if (FLIGHT_HEXA_Hovering_B.dLat + 180.0 == 0.0) {\r\n      FLIGHT_HEXA_Hovering_B.r_m = 0.0;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.r_m = fmod(FLIGHT_HEXA_Hovering_B.dLat + 180.0,\r\n        360.0);\r\n      if (FLIGHT_HEXA_Hovering_B.r_m == 0.0) {\r\n        FLIGHT_HEXA_Hovering_B.r_m = 0.0;\r\n      } else if (FLIGHT_HEXA_Hovering_B.dLat + 180.0 < 0.0) {\r\n        FLIGHT_HEXA_Hovering_B.r_m += 360.0;\r\n      }\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.dLat = FLIGHT_HEXA_Hovering_B.dLat * 0.0 +\r\n      (FLIGHT_HEXA_Hovering_B.r_m - 180.0);\r\n    FLIGHT_HEXA_Hovering_B.flat = fabs(FLIGHT_HEXA_Hovering_B.dLat);\r\n  }\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.flat > 90.0) {\r\n    // Start for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n    FLIGHT_HEXA_Hovering_B.flat = fabs(FLIGHT_HEXA_Hovering_B.dLat);\r\n    FLIGHT_HEXA_Hovering_B.latp2 = (FLIGHT_HEXA_Hovering_B.flat > 90.0);\r\n\r\n    // Start for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n    FLIGHT_HEXA_Hovering_B.dLon += 180.0;\r\n    FLIGHT_HEXA_Hovering_B.r_m = FLIGHT_HEXA_Hovering_B.dLat *\r\n      static_cast<real_T>(FLIGHT_HEXA_Hovering_B.latp2);\r\n    if (rtIsNaN(FLIGHT_HEXA_Hovering_B.r_m)) {\r\n      FLIGHT_HEXA_Hovering_B.r_m = (rtNaN);\r\n    } else if (FLIGHT_HEXA_Hovering_B.r_m < 0.0) {\r\n      FLIGHT_HEXA_Hovering_B.r_m = -1.0;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.r_m = (FLIGHT_HEXA_Hovering_B.r_m > 0.0);\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.dLat = (90.0 - (FLIGHT_HEXA_Hovering_B.flat *\r\n      static_cast<real_T>(FLIGHT_HEXA_Hovering_B.latp2) - 90.0)) *\r\n      FLIGHT_HEXA_Hovering_B.r_m * static_cast<real_T>\r\n      (FLIGHT_HEXA_Hovering_B.latp2) + FLIGHT_HEXA_Hovering_B.dLat *\r\n      static_cast<real_T>(!FLIGHT_HEXA_Hovering_B.latp2);\r\n  }\r\n\r\n  // Start for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n  if ((FLIGHT_HEXA_Hovering_B.dLon > 180.0) || (FLIGHT_HEXA_Hovering_B.dLon <\r\n       -180.0)) {\r\n    FLIGHT_HEXA_Hovering_B.flat = FLIGHT_HEXA_Hovering_rt_remd_snf\r\n      (FLIGHT_HEXA_Hovering_B.dLon, 360.0);\r\n    FLIGHT_HEXA_Hovering_B.r_m = FLIGHT_HEXA_Hovering_B.flat / 180.0;\r\n    if (FLIGHT_HEXA_Hovering_B.r_m < 0.0) {\r\n      FLIGHT_HEXA_Hovering_B.r_m = ceil(FLIGHT_HEXA_Hovering_B.r_m);\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.r_m = floor(FLIGHT_HEXA_Hovering_B.r_m);\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.dLon = (FLIGHT_HEXA_Hovering_B.flat - 360.0 *\r\n      FLIGHT_HEXA_Hovering_B.r_m) + FLIGHT_HEXA_Hovering_B.dLon * 0.0;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_B.flat = FLIGHT_HEXA_Hovering_sind_d(lla0[0]);\r\n  FLIGHT_HEXA_Hovering_B.flat_tmp = 1.0 - 0.0066943799901413165 *\r\n    FLIGHT_HEXA_Hovering_B.flat * FLIGHT_HEXA_Hovering_B.flat;\r\n  FLIGHT_HEXA_Hovering_B.flat = 6.378137E+6 / sqrt\r\n    (FLIGHT_HEXA_Hovering_B.flat_tmp);\r\n  if (rtIsInf(lla0[0]) || rtIsNaN(lla0[0])) {\r\n    FLIGHT_HEXA_Hovering_B.r_m = (rtNaN);\r\n  } else {\r\n    FLIGHT_HEXA_Hovering_B.r_m = FLIGHT_HEXA_Hovering_rt_remd_snf(lla0[0], 360.0);\r\n    FLIGHT_HEXA_Hovering_B.absx = fabs(FLIGHT_HEXA_Hovering_B.r_m);\r\n    if (FLIGHT_HEXA_Hovering_B.absx > 180.0) {\r\n      if (FLIGHT_HEXA_Hovering_B.r_m > 0.0) {\r\n        FLIGHT_HEXA_Hovering_B.r_m -= 360.0;\r\n      } else {\r\n        FLIGHT_HEXA_Hovering_B.r_m += 360.0;\r\n      }\r\n\r\n      FLIGHT_HEXA_Hovering_B.absx = fabs(FLIGHT_HEXA_Hovering_B.r_m);\r\n    }\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.absx <= 45.0) {\r\n      FLIGHT_HEXA_Hovering_B.r_m = cos(0.017453292519943295 *\r\n        FLIGHT_HEXA_Hovering_B.r_m);\r\n    } else if (FLIGHT_HEXA_Hovering_B.absx <= 135.0) {\r\n      if (FLIGHT_HEXA_Hovering_B.r_m > 0.0) {\r\n        FLIGHT_HEXA_Hovering_B.r_m = -sin((FLIGHT_HEXA_Hovering_B.r_m - 90.0) *\r\n          0.017453292519943295);\r\n      } else {\r\n        FLIGHT_HEXA_Hovering_B.r_m = sin((FLIGHT_HEXA_Hovering_B.r_m + 90.0) *\r\n          0.017453292519943295);\r\n      }\r\n    } else {\r\n      if (FLIGHT_HEXA_Hovering_B.r_m > 0.0) {\r\n        FLIGHT_HEXA_Hovering_B.r_m = (FLIGHT_HEXA_Hovering_B.r_m - 180.0) *\r\n          0.017453292519943295;\r\n      } else {\r\n        FLIGHT_HEXA_Hovering_B.r_m = (FLIGHT_HEXA_Hovering_B.r_m + 180.0) *\r\n          0.017453292519943295;\r\n      }\r\n\r\n      FLIGHT_HEXA_Hovering_B.r_m = -cos(FLIGHT_HEXA_Hovering_B.r_m);\r\n    }\r\n  }\r\n\r\n  xyzNED[0] = FLIGHT_HEXA_Hovering_B.dLat / (FLIGHT_HEXA_Hovering_rt_atan2d_snf\r\n    (1.0, 0.99330562000985867 / FLIGHT_HEXA_Hovering_B.flat_tmp *\r\n     FLIGHT_HEXA_Hovering_B.flat) * 57.295779513082323);\r\n  xyzNED[1] = FLIGHT_HEXA_Hovering_B.dLon / (FLIGHT_HEXA_Hovering_rt_atan2d_snf\r\n    (1.0, FLIGHT_HEXA_Hovering_B.flat * FLIGHT_HEXA_Hovering_B.r_m) *\r\n    57.295779513082323);\r\n  xyzNED[2] = -lla[2] + lla0[2];\r\n  FLIGHT_HEXA_Hovering_B.b[0] = rtIsNaN(xyzNED[0]);\r\n  FLIGHT_HEXA_Hovering_B.b[1] = rtIsNaN(xyzNED[1]);\r\n  FLIGHT_HEXA_Hovering_B.b[2] = rtIsNaN(xyzNED[2]);\r\n  FLIGHT_HEXA_Hovering_B.latp2 = false;\r\n  FLIGHT_HEXA_Hovering_B.b_k = 0;\r\n  exitg1 = false;\r\n  while ((!exitg1) && (FLIGHT_HEXA_Hovering_B.b_k < 3)) {\r\n    if (FLIGHT_HEXA_Hovering_B.b[FLIGHT_HEXA_Hovering_B.b_k]) {\r\n      FLIGHT_HEXA_Hovering_B.latp2 = true;\r\n      exitg1 = true;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.b_k++;\r\n    }\r\n  }\r\n\r\n  // Start for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n  FLIGHT_HEXA_Hovering_B.dLat = 0.0 / static_cast<real_T>\r\n    (!FLIGHT_HEXA_Hovering_B.latp2);\r\n  xyzNED[0] += FLIGHT_HEXA_Hovering_B.dLat;\r\n  xyzNED[1] += FLIGHT_HEXA_Hovering_B.dLat;\r\n  xyzNED[2] += FLIGHT_HEXA_Hovering_B.dLat;\r\n}\r\n\r\nstatic real_T FLIGHT_HEXA_Hovering_norm(const real_T x[3])\r\n{\r\n  real_T y;\r\n  FLIGHT_HEXA_Hovering_B.scale = 3.3121686421112381E-170;\r\n\r\n  // Start for MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n  FLIGHT_HEXA_Hovering_B.absxk = fabs(x[0]);\r\n  if (FLIGHT_HEXA_Hovering_B.absxk > 3.3121686421112381E-170) {\r\n    y = 1.0;\r\n    FLIGHT_HEXA_Hovering_B.scale = FLIGHT_HEXA_Hovering_B.absxk;\r\n  } else {\r\n    FLIGHT_HEXA_Hovering_B.t = FLIGHT_HEXA_Hovering_B.absxk /\r\n      3.3121686421112381E-170;\r\n    y = FLIGHT_HEXA_Hovering_B.t * FLIGHT_HEXA_Hovering_B.t;\r\n  }\r\n\r\n  // Start for MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n  FLIGHT_HEXA_Hovering_B.absxk = fabs(x[1]);\r\n  if (FLIGHT_HEXA_Hovering_B.absxk > FLIGHT_HEXA_Hovering_B.scale) {\r\n    FLIGHT_HEXA_Hovering_B.t = FLIGHT_HEXA_Hovering_B.scale /\r\n      FLIGHT_HEXA_Hovering_B.absxk;\r\n    y = y * FLIGHT_HEXA_Hovering_B.t * FLIGHT_HEXA_Hovering_B.t + 1.0;\r\n    FLIGHT_HEXA_Hovering_B.scale = FLIGHT_HEXA_Hovering_B.absxk;\r\n  } else {\r\n    FLIGHT_HEXA_Hovering_B.t = FLIGHT_HEXA_Hovering_B.absxk /\r\n      FLIGHT_HEXA_Hovering_B.scale;\r\n    y += FLIGHT_HEXA_Hovering_B.t * FLIGHT_HEXA_Hovering_B.t;\r\n  }\r\n\r\n  // Start for MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n  FLIGHT_HEXA_Hovering_B.absxk = fabs(x[2]);\r\n  if (FLIGHT_HEXA_Hovering_B.absxk > FLIGHT_HEXA_Hovering_B.scale) {\r\n    FLIGHT_HEXA_Hovering_B.t = FLIGHT_HEXA_Hovering_B.scale /\r\n      FLIGHT_HEXA_Hovering_B.absxk;\r\n    y = y * FLIGHT_HEXA_Hovering_B.t * FLIGHT_HEXA_Hovering_B.t + 1.0;\r\n    FLIGHT_HEXA_Hovering_B.scale = FLIGHT_HEXA_Hovering_B.absxk;\r\n  } else {\r\n    FLIGHT_HEXA_Hovering_B.t = FLIGHT_HEXA_Hovering_B.absxk /\r\n      FLIGHT_HEXA_Hovering_B.scale;\r\n    y += FLIGHT_HEXA_Hovering_B.t * FLIGHT_HEXA_Hovering_B.t;\r\n  }\r\n\r\n  return FLIGHT_HEXA_Hovering_B.scale * sqrt(y);\r\n}\r\n\r\n// Model step function\r\nvoid FLIGHT_HEXA_Hovering_step(void)\r\n{\r\n  boolean_T exitg1;\r\n  boolean_T guard1;\r\n  boolean_T guard2;\r\n  FLIGHT_HEXA_Hovering_SourceBlock_b(&FLIGHT_HEXA_Hovering_B.SourceBlock_g,\r\n    &FLIGHT_HEXA_Hovering_DW.SourceBlock_g);\r\n\r\n  // Outputs for Enabled SubSystem: '<S69>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S70>/Enable'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.SourceBlock_g.SourceBlock_o1) {\r\n    // SignalConversion generated from: '<S70>/In1' incorporates:\r\n    //   MATLABSystem: '<S69>/SourceBlock'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_h =\r\n      FLIGHT_HEXA_Hovering_B.SourceBlock_g.SourceBlock_o2;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S69>/Enabled Subsystem'\r\n\r\n  // RelationalOperator: '<S60>/Compare' incorporates:\r\n  //   Constant: '<S60>/Constant'\r\n  //   DataTypeConversion: '<S54>/Data Type Conversion'\r\n\r\n  FLIGHT_HEXA_Hovering_B.Compare_k = (FLIGHT_HEXA_Hovering_B.In1_h.values[6] >=\r\n    FLIGHT_HEXA_Hovering_P.CompareToConstant_const);\r\n\r\n  // MATLABSystem: '<S8>/SourceBlock'\r\n  FLIGHT_HEXA_Hovering_B.OR_g = uORB_read_step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_gv.orbMetadataObj,\r\n     &FLIGHT_HEXA_Hovering_DW.obj_gv.eventStructObj, &FLIGHT_HEXA_Hovering_B.r3,\r\n     false, 1.0);\r\n\r\n  // Outputs for Enabled SubSystem: '<S8>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S14>/Enable'\r\n\r\n  // Start for MATLABSystem: '<S8>/SourceBlock'\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    // SignalConversion generated from: '<S14>/In1'\r\n    FLIGHT_HEXA_Hovering_B.In1_m = FLIGHT_HEXA_Hovering_B.r3;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S8>/Enabled Subsystem'\r\n\r\n  // DataTypeConversion: '<S1>/Data Type Conversion' incorporates:\r\n  //   Switch: '<S77>/Switch'\r\n\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = FLIGHT_HEXA_Hovering_B.In1_m.q[0];\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 = FLIGHT_HEXA_Hovering_B.In1_m.q[1];\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 = FLIGHT_HEXA_Hovering_B.In1_m.q[2];\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 = FLIGHT_HEXA_Hovering_B.In1_m.q[3];\r\n\r\n  // Switch: '<S77>/Switch' incorporates:\r\n  //   Constant: '<S77>/Constant'\r\n  //   DataTypeConversion: '<S1>/Data Type Conversion'\r\n  //   Product: '<S603>/Product'\r\n  //   Product: '<S603>/Product1'\r\n  //   Product: '<S603>/Product2'\r\n  //   Product: '<S603>/Product3'\r\n  //   Sum: '<S603>/Sum'\r\n\r\n  if (!(((static_cast<real_T>(FLIGHT_HEXA_Hovering_B.In1_m.q[0]) *\r\n          FLIGHT_HEXA_Hovering_B.In1_m.q[0] + static_cast<real_T>\r\n          (FLIGHT_HEXA_Hovering_B.In1_m.q[1]) * FLIGHT_HEXA_Hovering_B.In1_m.q[1])\r\n         + static_cast<real_T>(FLIGHT_HEXA_Hovering_B.In1_m.q[2]) *\r\n         FLIGHT_HEXA_Hovering_B.In1_m.q[2]) + static_cast<real_T>\r\n        (FLIGHT_HEXA_Hovering_B.In1_m.q[3]) * FLIGHT_HEXA_Hovering_B.In1_m.q[3] >\r\n        FLIGHT_HEXA_Hovering_P.Switch_Threshold_o)) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_pp[0];\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_pp[1];\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_pp[2];\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_pp[3];\r\n  }\r\n\r\n  // End of Switch: '<S77>/Switch'\r\n\r\n  // Sqrt: '<S610>/sqrt' incorporates:\r\n  //   Product: '<S611>/Product'\r\n  //   Product: '<S611>/Product1'\r\n  //   Product: '<S611>/Product2'\r\n  //   Product: '<S611>/Product3'\r\n  //   Sum: '<S611>/Sum'\r\n\r\n  FLIGHT_HEXA_Hovering_B.Switch2 = sqrt\r\n    (((FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 *\r\n       FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 +\r\n       FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 *\r\n       FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1) +\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2) +\r\n     FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 *\r\n     FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3);\r\n\r\n  // Product: '<S605>/Product'\r\n  FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 /\r\n    FLIGHT_HEXA_Hovering_B.Switch2;\r\n\r\n  // Product: '<S605>/Product1'\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 /= FLIGHT_HEXA_Hovering_B.Switch2;\r\n\r\n  // Product: '<S605>/Product2'\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 / FLIGHT_HEXA_Hovering_B.Switch2;\r\n\r\n  // Product: '<S605>/Product3'\r\n  FLIGHT_HEXA_Hovering_B.Switch2 = FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 /\r\n    FLIGHT_HEXA_Hovering_B.Switch2;\r\n\r\n  // Fcn: '<S78>/fcn2' incorporates:\r\n  //   Fcn: '<S78>/fcn5'\r\n\r\n  FLIGHT_HEXA_Hovering_B.Gain2 = FLIGHT_HEXA_Hovering_B.Switch3 *\r\n    FLIGHT_HEXA_Hovering_B.Switch3;\r\n  FLIGHT_HEXA_Hovering_B.Sum = FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 *\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1;\r\n  FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 *\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0;\r\n  FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_B.Switch2 *\r\n    FLIGHT_HEXA_Hovering_B.Switch2;\r\n\r\n  // Trigonometry: '<S604>/Trigonometric Function1' incorporates:\r\n  //   Fcn: '<S78>/fcn1'\r\n  //   Fcn: '<S78>/fcn2'\r\n\r\n  FLIGHT_HEXA_Hovering_B.VectorConcatenate[0] =\r\n    FLIGHT_HEXA_Hovering_rt_atan2d_snf\r\n    ((FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 +\r\n      FLIGHT_HEXA_Hovering_B.Switch3 * FLIGHT_HEXA_Hovering_B.Switch2) * 2.0,\r\n     ((FLIGHT_HEXA_Hovering_B.Gain2 + FLIGHT_HEXA_Hovering_B.Sum) -\r\n      FLIGHT_HEXA_Hovering_B.Gain_i) - FLIGHT_HEXA_Hovering_B.Sum5);\r\n\r\n  // Fcn: '<S78>/fcn3'\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 =\r\n    (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 * FLIGHT_HEXA_Hovering_B.Switch2\r\n     - FLIGHT_HEXA_Hovering_B.Switch3 *\r\n     FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0) * -2.0;\r\n\r\n  // Trigonometry: '<S604>/Trigonometric Function3' incorporates:\r\n  //   Fcn: '<S78>/fcn4'\r\n  //   Fcn: '<S78>/fcn5'\r\n\r\n  FLIGHT_HEXA_Hovering_B.VectorConcatenate[2] =\r\n    FLIGHT_HEXA_Hovering_rt_atan2d_snf\r\n    ((FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 *\r\n      FLIGHT_HEXA_Hovering_B.Switch2 + FLIGHT_HEXA_Hovering_B.Switch3 *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1) * 2.0,\r\n     ((FLIGHT_HEXA_Hovering_B.Gain2 - FLIGHT_HEXA_Hovering_B.Sum) -\r\n      FLIGHT_HEXA_Hovering_B.Gain_i) + FLIGHT_HEXA_Hovering_B.Sum5);\r\n\r\n  // MATLABSystem: '<S5>/SourceBlock'\r\n  FLIGHT_HEXA_Hovering_B.OR_g = uORB_read_step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_p.orbMetadataObj,\r\n     &FLIGHT_HEXA_Hovering_DW.obj_p.eventStructObj, &FLIGHT_HEXA_Hovering_B.r5,\r\n     false, 1.0);\r\n\r\n  // Outputs for Enabled SubSystem: '<S5>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S10>/Enable'\r\n\r\n  // Start for MATLABSystem: '<S5>/SourceBlock'\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    // SignalConversion generated from: '<S10>/In1'\r\n    FLIGHT_HEXA_Hovering_B.In1_l = FLIGHT_HEXA_Hovering_B.r5;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S5>/Enabled Subsystem'\r\n  FLIGHT_HEXA_Hovering_SourceBlock(&FLIGHT_HEXA_Hovering_B.SourceBlock_l,\r\n    &FLIGHT_HEXA_Hovering_DW.SourceBlock_l);\r\n\r\n  // Outputs for Enabled SubSystem: '<S6>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S11>/Enable'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.SourceBlock_l.SourceBlock_o1) {\r\n    // SignalConversion generated from: '<S11>/In1' incorporates:\r\n    //   MATLABSystem: '<S6>/SourceBlock'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_b =\r\n      FLIGHT_HEXA_Hovering_B.SourceBlock_l.SourceBlock_o2;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S6>/Enabled Subsystem'\r\n  FLIGHT_HEXA_Hovering_SourceBlock_b(&FLIGHT_HEXA_Hovering_B.SourceBlock_b,\r\n    &FLIGHT_HEXA_Hovering_DW.SourceBlock_b);\r\n\r\n  // Outputs for Enabled SubSystem: '<S12>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S13>/Enable'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.SourceBlock_b.SourceBlock_o1) {\r\n    // SignalConversion generated from: '<S13>/In1' incorporates:\r\n    //   MATLABSystem: '<S12>/SourceBlock'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_j =\r\n      FLIGHT_HEXA_Hovering_B.SourceBlock_b.SourceBlock_o2;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S12>/Enabled Subsystem'\r\n\r\n  // Gain: '<S75>/Gain2' incorporates:\r\n  //   Constant: '<S75>/Constant2'\r\n  //   Sum: '<S75>/Sum2'\r\n\r\n  FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = (static_cast<real_T>\r\n    (FLIGHT_HEXA_Hovering_B.In1_j.values[1]) -\r\n    FLIGHT_HEXA_Hovering_P.Constant2_Value_g) *\r\n    FLIGHT_HEXA_Hovering_P.Gain2_Gain_d;\r\n\r\n  // Saturate: '<S75>/Saturation2'\r\n  if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n      FLIGHT_HEXA_Hovering_P.Saturation2_UpperSat) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.Saturation2_UpperSat;\r\n  } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n             FLIGHT_HEXA_Hovering_P.Saturation2_LowerSat) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.Saturation2_LowerSat;\r\n  }\r\n\r\n  // Gain: '<S4>/Gain1' incorporates:\r\n  //   Saturate: '<S75>/Saturation2'\r\n\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n    FLIGHT_HEXA_Hovering_P.Gain1_Gain_h * FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n\r\n  // Gain: '<S75>/Gain1' incorporates:\r\n  //   Constant: '<S75>/Constant1'\r\n  //   Sum: '<S75>/Sum1'\r\n\r\n  FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = (static_cast<real_T>\r\n    (FLIGHT_HEXA_Hovering_B.In1_j.values[0]) -\r\n    FLIGHT_HEXA_Hovering_P.Constant1_Value_h) *\r\n    FLIGHT_HEXA_Hovering_P.Gain1_Gain_e;\r\n\r\n  // Saturate: '<S75>/Saturation1'\r\n  if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n      FLIGHT_HEXA_Hovering_P.Saturation1_UpperSat_p) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.Saturation1_UpperSat_p;\r\n  } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n             FLIGHT_HEXA_Hovering_P.Saturation1_LowerSat_j) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.Saturation1_LowerSat_j;\r\n  }\r\n\r\n  // Gain: '<S4>/Gain2' incorporates:\r\n  //   Saturate: '<S75>/Saturation1'\r\n\r\n  FLIGHT_HEXA_Hovering_B.Gain2 = FLIGHT_HEXA_Hovering_P.Gain2_Gain_m *\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n\r\n  // Gain: '<S75>/Gain' incorporates:\r\n  //   Constant: '<S75>/Constant'\r\n  //   Sum: '<S75>/Sum'\r\n\r\n  FLIGHT_HEXA_Hovering_B.Sum = (static_cast<real_T>\r\n    (FLIGHT_HEXA_Hovering_B.In1_j.values[2]) -\r\n    FLIGHT_HEXA_Hovering_P.Constant_Value_ol) *\r\n    FLIGHT_HEXA_Hovering_P.Gain_Gain_e;\r\n\r\n  // Saturate: '<S75>/Saturation'\r\n  if (FLIGHT_HEXA_Hovering_B.Sum > FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_ji)\r\n  {\r\n    FLIGHT_HEXA_Hovering_B.Sum = FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_ji;\r\n  } else if (FLIGHT_HEXA_Hovering_B.Sum <\r\n             FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_l4) {\r\n    FLIGHT_HEXA_Hovering_B.Sum = FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_l4;\r\n  }\r\n\r\n  // End of Saturate: '<S75>/Saturation'\r\n\r\n  // Gain: '<S75>/Gain3' incorporates:\r\n  //   Constant: '<S75>/Constant3'\r\n  //   Sum: '<S75>/Sum3'\r\n\r\n  FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = (static_cast<real_T>\r\n    (FLIGHT_HEXA_Hovering_B.In1_j.values[3]) -\r\n    FLIGHT_HEXA_Hovering_P.Constant3_Value_n) *\r\n    FLIGHT_HEXA_Hovering_P.Gain3_Gain;\r\n\r\n  // Saturate: '<S75>/Saturation3'\r\n  if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n      FLIGHT_HEXA_Hovering_P.Saturation3_UpperSat) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.Saturation3_UpperSat;\r\n  } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n             FLIGHT_HEXA_Hovering_P.Saturation3_LowerSat) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.Saturation3_LowerSat;\r\n  }\r\n\r\n  // Gain: '<S4>/Gain4' incorporates:\r\n  //   Saturate: '<S75>/Saturation3'\r\n\r\n  FLIGHT_HEXA_Hovering_B.Switch2 = FLIGHT_HEXA_Hovering_P.Gain4_Gain *\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n\r\n  // MATLABSystem: '<S9>/SourceBlock'\r\n  FLIGHT_HEXA_Hovering_B.OR_g = uORB_read_step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_mg.orbMetadataObj,\r\n     &FLIGHT_HEXA_Hovering_DW.obj_mg.eventStructObj, &FLIGHT_HEXA_Hovering_B.r2,\r\n     false, 1.0);\r\n\r\n  // Outputs for Enabled SubSystem: '<S9>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S15>/Enable'\r\n\r\n  // Start for MATLABSystem: '<S9>/SourceBlock'\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    // SignalConversion generated from: '<S15>/In1'\r\n    FLIGHT_HEXA_Hovering_B.In1_c = FLIGHT_HEXA_Hovering_B.r2;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S9>/Enabled Subsystem'\r\n\r\n  // MATLABSystem: '<S19>/Read Parameter'\r\n  if (FLIGHT_HEXA_Hovering_DW.obj_k.SampleTime !=\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_k.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_k.MW_PARAMHANDLE, MW_INT32,\r\n     &FLIGHT_HEXA_Hovering_B.ParamStep_k);\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    FLIGHT_HEXA_Hovering_B.ParamStep_k = 0;\r\n  }\r\n\r\n  // MATLABSystem: '<S40>/SourceBlock'\r\n  FLIGHT_HEXA_Hovering_B.OR_g = uORB_read_step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_e.orbMetadataObj,\r\n     &FLIGHT_HEXA_Hovering_DW.obj_e.eventStructObj, &FLIGHT_HEXA_Hovering_B.r,\r\n     false, 1.0);\r\n\r\n  // Outputs for Enabled SubSystem: '<S40>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S41>/Enable'\r\n\r\n  // Start for MATLABSystem: '<S40>/SourceBlock'\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    // SignalConversion generated from: '<S41>/In1'\r\n    FLIGHT_HEXA_Hovering_B.In1 = FLIGHT_HEXA_Hovering_B.r;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S40>/Enabled Subsystem'\r\n\r\n  // MATLABSystem: '<S38>/SourceBlock'\r\n  FLIGHT_HEXA_Hovering_B.OR_g = uORB_read_step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_kz.orbMetadataObj,\r\n     &FLIGHT_HEXA_Hovering_DW.obj_kz.eventStructObj, &FLIGHT_HEXA_Hovering_B.r1,\r\n     false, 1.0);\r\n\r\n  // Outputs for Enabled SubSystem: '<S38>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S53>/Enable'\r\n\r\n  // Start for MATLABSystem: '<S38>/SourceBlock'\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    // SignalConversion generated from: '<S53>/In1'\r\n    FLIGHT_HEXA_Hovering_B.In1_p = FLIGHT_HEXA_Hovering_B.r1;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S38>/Enabled Subsystem'\r\n\r\n  // MATLABSystem: '<S37>/SourceBlock'\r\n  FLIGHT_HEXA_Hovering_B.OR_g = uORB_read_step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_gf.orbMetadataObj,\r\n     &FLIGHT_HEXA_Hovering_DW.obj_gf.eventStructObj, &FLIGHT_HEXA_Hovering_B.r4,\r\n     false, 1.0);\r\n\r\n  // Outputs for Enabled SubSystem: '<S37>/Enabled Subsystem' incorporates:\r\n  //   EnablePort: '<S52>/Enable'\r\n\r\n  // Start for MATLABSystem: '<S37>/SourceBlock'\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    // SignalConversion generated from: '<S52>/In1'\r\n    FLIGHT_HEXA_Hovering_B.In1_f = FLIGHT_HEXA_Hovering_B.r4;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S37>/Enabled Subsystem'\r\n\r\n  // MATLABSystem: '<S19>/LLA2LocalCoordinates' incorporates:\r\n  //   MATLABSystem: '<S19>/Read Parameter'\r\n  //   SignalConversion generated from: '<S52>/In1'\r\n  //\r\n  FLIGHT_HEXA_Hovering_B.b_startWaypoint[0] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.virtualWaypoint[0] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.b_startWaypoint[1] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.virtualWaypoint[1] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.b_startWaypoint[2] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.virtualWaypoint[2] = 0.0;\r\n  FLIGHT_HEXA_Hovering_B.lla0[0] = FLIGHT_HEXA_Hovering_B.In1_f.lat;\r\n  FLIGHT_HEXA_Hovering_B.lla0[1] = FLIGHT_HEXA_Hovering_B.In1_f.lon;\r\n  FLIGHT_HEXA_Hovering_B.lla0[2] = FLIGHT_HEXA_Hovering_B.In1_f.alt;\r\n  if (FLIGHT_HEXA_Hovering_B.In1_p.previous.valid &&\r\n      (!FLIGHT_HEXA_Hovering_DW.obj_mr.previousValidReceived)) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_mr.previousValidReceived = true;\r\n  }\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.In1_p.next.valid &&\r\n      (!FLIGHT_HEXA_Hovering_DW.obj_mr.nextValidReceived)) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_mr.nextValidReceived = true;\r\n  }\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.In1_f.valid_hpos &&\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.valid &&\r\n      (FLIGHT_HEXA_Hovering_B.In1_p.current.type != 5)) {\r\n    if (FLIGHT_HEXA_Hovering_B.ParamStep_k != 0) {\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] =\r\n        FLIGHT_HEXA_Hovering_B.In1.waypoints[0].position[0];\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] =\r\n        FLIGHT_HEXA_Hovering_B.In1.waypoints[0].position[1];\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] =\r\n        FLIGHT_HEXA_Hovering_B.In1.waypoints[0].position[2];\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.dv[0] = FLIGHT_HEXA_Hovering_B.In1_p.current.lat;\r\n      FLIGHT_HEXA_Hovering_B.dv[1] = FLIGHT_HEXA_Hovering_B.In1_p.current.lon;\r\n      FLIGHT_HEXA_Hovering_B.dv[2] = FLIGHT_HEXA_Hovering_B.In1_p.current.alt;\r\n      FLIGHT_HEXA_Hovering_lla2ned(FLIGHT_HEXA_Hovering_B.dv,\r\n        FLIGHT_HEXA_Hovering_B.lla0, FLIGHT_HEXA_Hovering_B.DataTypeConversion2);\r\n    }\r\n  }\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.In1_f.valid_hpos &&\r\n      (FLIGHT_HEXA_Hovering_B.In1_p.previous.valid ||\r\n       FLIGHT_HEXA_Hovering_DW.obj_mr.previousValidReceived)) {\r\n    FLIGHT_HEXA_Hovering_B.dv[0] = FLIGHT_HEXA_Hovering_B.In1_p.previous.lat;\r\n    FLIGHT_HEXA_Hovering_B.dv[1] = FLIGHT_HEXA_Hovering_B.In1_p.previous.lon;\r\n    FLIGHT_HEXA_Hovering_B.dv[2] = FLIGHT_HEXA_Hovering_B.In1_p.previous.alt;\r\n    FLIGHT_HEXA_Hovering_lla2ned(FLIGHT_HEXA_Hovering_B.dv,\r\n      FLIGHT_HEXA_Hovering_B.lla0, FLIGHT_HEXA_Hovering_B.b_startWaypoint);\r\n  }\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.In1_f.valid_hpos &&\r\n      (FLIGHT_HEXA_Hovering_B.In1_p.next.valid ||\r\n       FLIGHT_HEXA_Hovering_DW.obj_mr.nextValidReceived)) {\r\n    FLIGHT_HEXA_Hovering_B.dv[0] = FLIGHT_HEXA_Hovering_B.In1_p.next.lat;\r\n    FLIGHT_HEXA_Hovering_B.dv[1] = FLIGHT_HEXA_Hovering_B.In1_p.next.lon;\r\n    FLIGHT_HEXA_Hovering_B.dv[2] = FLIGHT_HEXA_Hovering_B.In1_p.next.alt;\r\n    FLIGHT_HEXA_Hovering_lla2ned(FLIGHT_HEXA_Hovering_B.dv,\r\n      FLIGHT_HEXA_Hovering_B.lla0, FLIGHT_HEXA_Hovering_B.virtualWaypoint);\r\n  }\r\n\r\n  // If: '<S18>/If' incorporates:\r\n  //   Delay: '<S24>/Delay'\r\n  //   Delay: '<S27>/Delay'\r\n  //   Delay: '<S31>/Delay'\r\n  //   MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n  //\r\n  FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n    FLIGHT_HEXA_Hovering_DW.If_ActiveSubsystem;\r\n  if (FLIGHT_HEXA_Hovering_B.In1_p.current.type == 3) {\r\n    FLIGHT_HEXA_Hovering_B.rtAction = 0;\r\n  } else if (FLIGHT_HEXA_Hovering_B.In1_p.current.type == 4) {\r\n    FLIGHT_HEXA_Hovering_B.rtAction = 1;\r\n  } else if (FLIGHT_HEXA_Hovering_B.In1_p.current.type == 0) {\r\n    FLIGHT_HEXA_Hovering_B.rtAction = 2;\r\n  } else {\r\n    FLIGHT_HEXA_Hovering_B.rtAction = 3;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_DW.If_ActiveSubsystem = FLIGHT_HEXA_Hovering_B.rtAction;\r\n  switch (FLIGHT_HEXA_Hovering_B.rtAction) {\r\n   case 0:\r\n    if (FLIGHT_HEXA_Hovering_B.rtAction != FLIGHT_HEXA_Hovering_B.rtPrevAction)\r\n    {\r\n      // InitializeConditions for IfAction SubSystem: '<S18>/Take-off' incorporates:\r\n      //   ActionPort: '<S22>/Action Port'\r\n\r\n      // InitializeConditions for If: '<S18>/If' incorporates:\r\n      //   Delay: '<S30>/Delay'\r\n      //   Delay: '<S31>/Delay'\r\n\r\n      FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_c =\r\n        FLIGHT_HEXA_Hovering_P.Delay_InitialCondition;\r\n      FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_d =\r\n        FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_g;\r\n\r\n      // End of InitializeConditions for SubSystem: '<S18>/Take-off'\r\n    }\r\n\r\n    // Outputs for IfAction SubSystem: '<S18>/Take-off' incorporates:\r\n    //   ActionPort: '<S22>/Action Port'\r\n\r\n    // Sum: '<S30>/Sum' incorporates:\r\n    //   Constant: '<S30>/Rate'\r\n    //   Delay: '<S30>/Delay'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.Rate_Value +\r\n      FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_c;\r\n\r\n    // Gain: '<S30>/Gain1'\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_P.Gain1_Gain *\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2];\r\n\r\n    // Outputs for Enabled SubSystem: '<S31>/Enabled Subsystem2' incorporates:\r\n    //   EnablePort: '<S32>/Enable'\r\n\r\n    if (FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_d > 0.0) {\r\n      // SignalConversion generated from: '<S32>/yaw_In' incorporates:\r\n      //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n\r\n      FLIGHT_HEXA_Hovering_B.yaw_In_ik = FLIGHT_HEXA_Hovering_B.In1_c.heading;\r\n    }\r\n\r\n    // End of Outputs for SubSystem: '<S31>/Enabled Subsystem2'\r\n\r\n    // Reshape: '<S22>/Reshape' incorporates:\r\n    //   Delay: '<S31>/Delay'\r\n    //   Merge: '<S18>/Merge'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0];\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 =\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1];\r\n\r\n    // Gain: '<S30>/Gain' incorporates:\r\n    //   RelationalOperator: '<S30>/Relational Operator'\r\n    //   Switch: '<S30>/Switch'\r\n\r\n    if (!(FLIGHT_HEXA_Hovering_B.Gain_i <= FLIGHT_HEXA_Hovering_B.Switch3)) {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_B.Switch3;\r\n    }\r\n\r\n    // Reshape: '<S22>/Reshape' incorporates:\r\n    //   Gain: '<S30>/Gain'\r\n    //   Merge: '<S18>/Merge'\r\n    //   Switch: '<S30>/Switch'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 = FLIGHT_HEXA_Hovering_P.Gain_Gain *\r\n      FLIGHT_HEXA_Hovering_B.Gain_i;\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_3 = FLIGHT_HEXA_Hovering_B.yaw_In_ik;\r\n\r\n    // Update for Delay: '<S30>/Delay'\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_c = FLIGHT_HEXA_Hovering_B.Switch3;\r\n\r\n    // Update for Delay: '<S31>/Delay' incorporates:\r\n    //   Constant: '<S31>/Constant'\r\n\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_d =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_fo;\r\n\r\n    // End of Outputs for SubSystem: '<S18>/Take-off'\r\n    break;\r\n\r\n   case 1:\r\n    if (FLIGHT_HEXA_Hovering_B.rtAction != FLIGHT_HEXA_Hovering_B.rtPrevAction)\r\n    {\r\n      // InitializeConditions for IfAction SubSystem: '<S18>/Land' incorporates:\r\n      //   ActionPort: '<S21>/Action Port'\r\n\r\n      // InitializeConditions for If: '<S18>/If' incorporates:\r\n      //   Delay: '<S21>/Delay'\r\n      //   Delay: '<S26>/Delay'\r\n      //   Delay: '<S27>/Delay'\r\n\r\n      FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_l[0] =\r\n        FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_n;\r\n      FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_l[1] =\r\n        FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_n;\r\n      FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_n =\r\n        FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_m;\r\n      FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_b =\r\n        FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_j;\r\n\r\n      // End of InitializeConditions for SubSystem: '<S18>/Land'\r\n    }\r\n\r\n    // Outputs for IfAction SubSystem: '<S18>/Land' incorporates:\r\n    //   ActionPort: '<S21>/Action Port'\r\n\r\n    // Delay: '<S26>/Delay'\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_n;\r\n\r\n    // Switch: '<S26>/Switch' incorporates:\r\n    //   Delay: '<S26>/Delay'\r\n    //   Gain: '<S26>/Gain'\r\n\r\n    if (!(FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_n >\r\n          FLIGHT_HEXA_Hovering_P.Switch_Threshold)) {\r\n      FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.Gain_Gain_l *\r\n        FLIGHT_HEXA_Hovering_B.b_startWaypoint[2];\r\n    }\r\n\r\n    // End of Switch: '<S26>/Switch'\r\n\r\n    // Sum: '<S26>/Subtract' incorporates:\r\n    //   Constant: '<S26>/Rate of descent'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_B.Switch3 -\r\n      FLIGHT_HEXA_Hovering_P.Rateofdescent_Value;\r\n\r\n    // Gain: '<S26>/Gain2'\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.Gain2_Gain *\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2];\r\n\r\n    // Outputs for Enabled SubSystem: '<S27>/Enabled Subsystem2' incorporates:\r\n    //   EnablePort: '<S29>/Enable'\r\n\r\n    if (FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_b > 0.0) {\r\n      // SignalConversion generated from: '<S29>/yaw_In' incorporates:\r\n      //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n\r\n      FLIGHT_HEXA_Hovering_B.yaw_In_i = FLIGHT_HEXA_Hovering_B.In1_c.heading;\r\n    }\r\n\r\n    // End of Outputs for SubSystem: '<S27>/Enabled Subsystem2'\r\n\r\n    // Switch: '<S21>/Switch' incorporates:\r\n    //   Delay: '<S27>/Delay'\r\n    //   Logic: '<S21>/OR'\r\n    //   RelationalOperator: '<S21>/IsNaN'\r\n\r\n    if (rtIsNaN(FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0]) || rtIsNaN\r\n        (FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1])) {\r\n      // Reshape: '<S21>/Reshape' incorporates:\r\n      //   Delay: '<S21>/Delay'\r\n      //   Merge: '<S18>/Merge'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_l[0];\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 =\r\n        FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_l[1];\r\n    } else {\r\n      // Reshape: '<S21>/Reshape' incorporates:\r\n      //   Delay: '<S21>/Delay'\r\n      //   Merge: '<S18>/Merge'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0];\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 =\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1];\r\n    }\r\n\r\n    // End of Switch: '<S21>/Switch'\r\n\r\n    // Reshape: '<S21>/Reshape' incorporates:\r\n    //   Gain: '<S26>/Gain1'\r\n    //   Merge: '<S18>/Merge'\r\n    //   RelationalOperator: '<S26>/GreaterThan'\r\n    //   Switch: '<S26>/Switch1'\r\n\r\n    if (!(FLIGHT_HEXA_Hovering_B.Switch3 > FLIGHT_HEXA_Hovering_B.Gain_i)) {\r\n      FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_B.Gain_i;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 = FLIGHT_HEXA_Hovering_P.Gain1_Gain_a\r\n      * FLIGHT_HEXA_Hovering_B.Switch3;\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_3 = FLIGHT_HEXA_Hovering_B.yaw_In_i;\r\n\r\n    // Outputs for Enabled SubSystem: '<S26>/Enabled Subsystem' incorporates:\r\n    //   EnablePort: '<S28>/Enable'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Gain_i > 0.0) {\r\n      // SignalConversion generated from: '<S28>/In'\r\n      FLIGHT_HEXA_Hovering_B.In = FLIGHT_HEXA_Hovering_B.Gain_i;\r\n    }\r\n\r\n    // End of Outputs for SubSystem: '<S26>/Enabled Subsystem'\r\n\r\n    // Update for Delay: '<S21>/Delay' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_l[0] = FLIGHT_HEXA_Hovering_B.In1_c.x;\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_l[1] = FLIGHT_HEXA_Hovering_B.In1_c.y;\r\n\r\n    // Update for Delay: '<S26>/Delay'\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_n = FLIGHT_HEXA_Hovering_B.In;\r\n\r\n    // Update for Delay: '<S27>/Delay' incorporates:\r\n    //   Constant: '<S27>/Constant'\r\n\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_b =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_nn;\r\n\r\n    // End of Outputs for SubSystem: '<S18>/Land'\r\n    break;\r\n\r\n   case 2:\r\n    if (FLIGHT_HEXA_Hovering_B.rtAction != FLIGHT_HEXA_Hovering_B.rtPrevAction)\r\n    {\r\n      // SystemReset for IfAction SubSystem: '<S18>/Waypoint' incorporates:\r\n      //   ActionPort: '<S23>/Action Port'\r\n\r\n      // SystemReset for If: '<S18>/If' incorporates:\r\n      //   MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n      //\r\n      FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex = 1.0;\r\n      for (FLIGHT_HEXA_Hovering_B.i1 = 0; FLIGHT_HEXA_Hovering_B.i1 < 9;\r\n           FLIGHT_HEXA_Hovering_B.i1++) {\r\n        FLIGHT_HEXA_Hovering_DW.obj.WaypointsInternal[FLIGHT_HEXA_Hovering_B.i1]\r\n          *= 0.0;\r\n      }\r\n\r\n      // End of SystemReset for If: '<S18>/If'\r\n      // End of SystemReset for SubSystem: '<S18>/Waypoint'\r\n    }\r\n\r\n    // Outputs for IfAction SubSystem: '<S18>/Waypoint' incorporates:\r\n    //   ActionPort: '<S23>/Action Port'\r\n\r\n    // Concatenate: '<S23>/Matrix Concatenate'\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[0] =\r\n      FLIGHT_HEXA_Hovering_B.b_startWaypoint[0];\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[1] =\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0];\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[2] =\r\n      FLIGHT_HEXA_Hovering_B.virtualWaypoint[0];\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[3] =\r\n      FLIGHT_HEXA_Hovering_B.b_startWaypoint[1];\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[4] =\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1];\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[5] =\r\n      FLIGHT_HEXA_Hovering_B.virtualWaypoint[1];\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[6] =\r\n      FLIGHT_HEXA_Hovering_B.b_startWaypoint[2];\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[7] =\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2];\r\n    FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[8] =\r\n      FLIGHT_HEXA_Hovering_B.virtualWaypoint[2];\r\n\r\n    // MATLABSystem: '<S23>/UAV Waypoint Follower' incorporates:\r\n    //   Concatenate: '<S23>/Matrix Concatenate'\r\n    //   Constant: '<S23>/Constant'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.Constant_Value_gw;\r\n    FLIGHT_HEXA_Hovering_DW.obj.LookaheadDistFlag = 0U;\r\n    if (FLIGHT_HEXA_Hovering_P.Constant_Value_gw < 0.3) {\r\n      FLIGHT_HEXA_Hovering_B.Switch3 = 0.3;\r\n      FLIGHT_HEXA_Hovering_DW.obj.LookaheadDistFlag = 1U;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj.InitialPose[0] = 0.0;\r\n    FLIGHT_HEXA_Hovering_DW.obj.InitialPose[1] = 0.0;\r\n    FLIGHT_HEXA_Hovering_DW.obj.InitialPose[2] = 0.0;\r\n    FLIGHT_HEXA_Hovering_DW.obj.InitialPose[3] = 0.0;\r\n    FLIGHT_HEXA_Hovering_DW.obj.NumWaypoints = 3.0;\r\n    FLIGHT_HEXA_Hovering_B.OR_g = false;\r\n    FLIGHT_HEXA_Hovering_B.Compare = true;\r\n    FLIGHT_HEXA_Hovering_B.iy = 0;\r\n    exitg1 = false;\r\n    while ((!exitg1) && (FLIGHT_HEXA_Hovering_B.iy <= 8)) {\r\n      FLIGHT_HEXA_Hovering_B.i1 = FLIGHT_HEXA_Hovering_B.iy / 3 * 3 +\r\n        FLIGHT_HEXA_Hovering_B.iy % 3;\r\n      if (!(FLIGHT_HEXA_Hovering_DW.obj.WaypointsInternal[FLIGHT_HEXA_Hovering_B.i1]\r\n            ==\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[FLIGHT_HEXA_Hovering_B.i1]))\r\n      {\r\n        FLIGHT_HEXA_Hovering_B.Compare = false;\r\n        exitg1 = true;\r\n      } else {\r\n        FLIGHT_HEXA_Hovering_B.iy++;\r\n      }\r\n    }\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Compare) {\r\n      FLIGHT_HEXA_Hovering_B.OR_g = true;\r\n    }\r\n\r\n    if (!FLIGHT_HEXA_Hovering_B.OR_g) {\r\n      memcpy(&FLIGHT_HEXA_Hovering_DW.obj.WaypointsInternal[0],\r\n             &FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[0], 9U * sizeof(real_T));\r\n      FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex = 1.0;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.i1 = 0;\r\n    FLIGHT_HEXA_Hovering_B.iy = 0;\r\n    for (FLIGHT_HEXA_Hovering_B.j = 0; FLIGHT_HEXA_Hovering_B.j < 3;\r\n         FLIGHT_HEXA_Hovering_B.j++) {\r\n      FLIGHT_HEXA_Hovering_B.distinctWptsIdx[FLIGHT_HEXA_Hovering_B.j] = true;\r\n      FLIGHT_HEXA_Hovering_B.Gain_i =\r\n        FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[FLIGHT_HEXA_Hovering_B.i1 + 1];\r\n      FLIGHT_HEXA_Hovering_B.x[FLIGHT_HEXA_Hovering_B.iy] =\r\n        (FLIGHT_HEXA_Hovering_B.Gain_i !=\r\n         FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[FLIGHT_HEXA_Hovering_B.i1]);\r\n      FLIGHT_HEXA_Hovering_B.x[FLIGHT_HEXA_Hovering_B.iy + 1] =\r\n        (FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[FLIGHT_HEXA_Hovering_B.i1 +\r\n         2] != FLIGHT_HEXA_Hovering_B.Gain_i);\r\n      FLIGHT_HEXA_Hovering_B.i1 += 3;\r\n      FLIGHT_HEXA_Hovering_B.iy += 2;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.IsNaN_l[0] = false;\r\n    FLIGHT_HEXA_Hovering_B.IsNaN_l[1] = false;\r\n    FLIGHT_HEXA_Hovering_B.i1 = 0;\r\n    FLIGHT_HEXA_Hovering_B.iy = 4;\r\n    for (FLIGHT_HEXA_Hovering_B.j = 0; FLIGHT_HEXA_Hovering_B.j < 2;\r\n         FLIGHT_HEXA_Hovering_B.j++) {\r\n      FLIGHT_HEXA_Hovering_B.i1++;\r\n      FLIGHT_HEXA_Hovering_B.iy++;\r\n      FLIGHT_HEXA_Hovering_B.ix = FLIGHT_HEXA_Hovering_B.i1;\r\n      exitg1 = false;\r\n      while ((!exitg1) && (FLIGHT_HEXA_Hovering_B.ix <=\r\n                           FLIGHT_HEXA_Hovering_B.iy)) {\r\n        if (FLIGHT_HEXA_Hovering_B.x[FLIGHT_HEXA_Hovering_B.ix - 1]) {\r\n          FLIGHT_HEXA_Hovering_B.IsNaN_l[FLIGHT_HEXA_Hovering_B.j] = true;\r\n          exitg1 = true;\r\n        } else {\r\n          FLIGHT_HEXA_Hovering_B.ix += 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.distinctWptsIdx[0] = FLIGHT_HEXA_Hovering_B.IsNaN_l[0];\r\n    FLIGHT_HEXA_Hovering_B.distinctWptsIdx[1] = FLIGHT_HEXA_Hovering_B.IsNaN_l[1];\r\n\r\n    // End of Outputs for SubSystem: '<S18>/Waypoint'\r\n    FLIGHT_HEXA_Hovering_B.iy = 0;\r\n    for (FLIGHT_HEXA_Hovering_B.i1 = 0; FLIGHT_HEXA_Hovering_B.i1 < 3;\r\n         FLIGHT_HEXA_Hovering_B.i1++) {\r\n      // Outputs for IfAction SubSystem: '<S18>/Waypoint' incorporates:\r\n      //   ActionPort: '<S23>/Action Port'\r\n\r\n      if (FLIGHT_HEXA_Hovering_B.distinctWptsIdx[FLIGHT_HEXA_Hovering_B.i1]) {\r\n        FLIGHT_HEXA_Hovering_B.iy++;\r\n      }\r\n\r\n      // End of Outputs for SubSystem: '<S18>/Waypoint'\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.j = FLIGHT_HEXA_Hovering_B.iy;\r\n    FLIGHT_HEXA_Hovering_B.iy = 0;\r\n    for (FLIGHT_HEXA_Hovering_B.i1 = 0; FLIGHT_HEXA_Hovering_B.i1 < 3;\r\n         FLIGHT_HEXA_Hovering_B.i1++) {\r\n      // Outputs for IfAction SubSystem: '<S18>/Waypoint' incorporates:\r\n      //   ActionPort: '<S23>/Action Port'\r\n\r\n      if (FLIGHT_HEXA_Hovering_B.distinctWptsIdx[FLIGHT_HEXA_Hovering_B.i1]) {\r\n        // Start for MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n        FLIGHT_HEXA_Hovering_B.tmp_data[FLIGHT_HEXA_Hovering_B.iy] =\r\n          static_cast<int8_T>(FLIGHT_HEXA_Hovering_B.i1);\r\n        FLIGHT_HEXA_Hovering_B.iy++;\r\n      }\r\n\r\n      // End of Outputs for SubSystem: '<S18>/Waypoint'\r\n    }\r\n\r\n    // Outputs for IfAction SubSystem: '<S18>/Waypoint' incorporates:\r\n    //   ActionPort: '<S23>/Action Port'\r\n\r\n    // MATLABSystem: '<S23>/UAV Waypoint Follower' incorporates:\r\n    //   Concatenate: '<S23>/Matrix Concatenate'\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n    //   Reshape: '<S23>/Reshape1'\r\n\r\n    for (FLIGHT_HEXA_Hovering_B.i1 = 0; FLIGHT_HEXA_Hovering_B.i1 < 3;\r\n         FLIGHT_HEXA_Hovering_B.i1++) {\r\n      for (FLIGHT_HEXA_Hovering_B.iy = 0; FLIGHT_HEXA_Hovering_B.iy <\r\n           FLIGHT_HEXA_Hovering_B.j; FLIGHT_HEXA_Hovering_B.iy++) {\r\n        FLIGHT_HEXA_Hovering_B.b_waypointsIn_data[FLIGHT_HEXA_Hovering_B.iy +\r\n          FLIGHT_HEXA_Hovering_B.j * FLIGHT_HEXA_Hovering_B.i1] =\r\n          FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[3 *\r\n          FLIGHT_HEXA_Hovering_B.i1 +\r\n          FLIGHT_HEXA_Hovering_B.tmp_data[FLIGHT_HEXA_Hovering_B.iy]];\r\n      }\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj.LookaheadDistance =\r\n      FLIGHT_HEXA_Hovering_B.Switch3;\r\n    if (FLIGHT_HEXA_Hovering_B.j == 0) {\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] =\r\n        FLIGHT_HEXA_Hovering_B.In1_c.x;\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] =\r\n        FLIGHT_HEXA_Hovering_B.In1_c.y;\r\n      FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] =\r\n        FLIGHT_HEXA_Hovering_B.In1_c.z;\r\n      FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_B.In1_c.heading;\r\n    } else {\r\n      guard1 = false;\r\n      if (FLIGHT_HEXA_Hovering_B.j == 1) {\r\n        if (FLIGHT_HEXA_Hovering_DW.obj.StartFlag) {\r\n          FLIGHT_HEXA_Hovering_DW.obj.InitialPose[0] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.x;\r\n          FLIGHT_HEXA_Hovering_DW.obj.InitialPose[1] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.y;\r\n          FLIGHT_HEXA_Hovering_DW.obj.InitialPose[2] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.z;\r\n          FLIGHT_HEXA_Hovering_DW.obj.InitialPose[3] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.heading;\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.b_startWaypoint[0] =\r\n          FLIGHT_HEXA_Hovering_B.b_waypointsIn_data[0] -\r\n          FLIGHT_HEXA_Hovering_B.In1_c.x;\r\n        FLIGHT_HEXA_Hovering_B.b_startWaypoint[1] =\r\n          FLIGHT_HEXA_Hovering_B.b_waypointsIn_data[1] -\r\n          FLIGHT_HEXA_Hovering_B.In1_c.y;\r\n        FLIGHT_HEXA_Hovering_B.b_startWaypoint[2] =\r\n          FLIGHT_HEXA_Hovering_B.b_waypointsIn_data[2] -\r\n          FLIGHT_HEXA_Hovering_B.In1_c.z;\r\n        if (FLIGHT_HEXA_Hovering_norm(FLIGHT_HEXA_Hovering_B.b_startWaypoint) <\r\n            1.4901161193847656E-8) {\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.x;\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.y;\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.z;\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_B.In1_c.heading;\r\n          FLIGHT_HEXA_Hovering_DW.obj.StartFlag = false;\r\n        } else {\r\n          FLIGHT_HEXA_Hovering_DW.obj.StartFlag = false;\r\n          FLIGHT_HEXA_Hovering_DW.obj.NumWaypoints = 2.0;\r\n          FLIGHT_HEXA_Hovering_B.ix = FLIGHT_HEXA_Hovering_B.j + 1;\r\n          for (FLIGHT_HEXA_Hovering_B.i1 = 0; FLIGHT_HEXA_Hovering_B.i1 < 3;\r\n               FLIGHT_HEXA_Hovering_B.i1++) {\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(FLIGHT_HEXA_Hovering_B.j\r\n              + 1) * FLIGHT_HEXA_Hovering_B.i1] =\r\n              FLIGHT_HEXA_Hovering_DW.obj.InitialPose[FLIGHT_HEXA_Hovering_B.i1];\r\n            for (FLIGHT_HEXA_Hovering_B.iy = 0; FLIGHT_HEXA_Hovering_B.iy <\r\n                 FLIGHT_HEXA_Hovering_B.j; FLIGHT_HEXA_Hovering_B.iy++) {\r\n              FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p\r\n                [(FLIGHT_HEXA_Hovering_B.iy + (FLIGHT_HEXA_Hovering_B.j + 1) *\r\n                  FLIGHT_HEXA_Hovering_B.i1) + 1] =\r\n                FLIGHT_HEXA_Hovering_B.b_waypointsIn_data[FLIGHT_HEXA_Hovering_B.j\r\n                * FLIGHT_HEXA_Hovering_B.i1 + FLIGHT_HEXA_Hovering_B.iy];\r\n            }\r\n          }\r\n\r\n          guard1 = true;\r\n        }\r\n      } else {\r\n        FLIGHT_HEXA_Hovering_B.ix = FLIGHT_HEXA_Hovering_B.j;\r\n        FLIGHT_HEXA_Hovering_B.iy = FLIGHT_HEXA_Hovering_B.j * 3;\r\n        if (FLIGHT_HEXA_Hovering_B.iy - 1 >= 0) {\r\n          memcpy(&FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[0],\r\n                 &FLIGHT_HEXA_Hovering_B.b_waypointsIn_data[0],\r\n                 static_cast<uint32_T>(FLIGHT_HEXA_Hovering_B.iy) * sizeof\r\n                 (real_T));\r\n        }\r\n\r\n        guard1 = true;\r\n      }\r\n\r\n      if (guard1) {\r\n        FLIGHT_HEXA_Hovering_B.OR_g = false;\r\n        if (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex ==\r\n            FLIGHT_HEXA_Hovering_DW.obj.NumWaypoints) {\r\n          FLIGHT_HEXA_Hovering_B.OR_g = true;\r\n        }\r\n\r\n        if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n          FLIGHT_HEXA_Hovering_DW.obj.LastWaypointFlag = true;\r\n          FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex--;\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.Switch3 =\r\n          FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[static_cast<int32_T>\r\n          (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex) - 1];\r\n        FLIGHT_HEXA_Hovering_B.b_startWaypoint[0] =\r\n          FLIGHT_HEXA_Hovering_B.Switch3;\r\n        FLIGHT_HEXA_Hovering_B.Gain_i =\r\n          FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[static_cast<int32_T>\r\n          (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) - 1];\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] =\r\n          FLIGHT_HEXA_Hovering_B.Gain_i;\r\n        FLIGHT_HEXA_Hovering_B.virtualWaypoint[0] =\r\n          FLIGHT_HEXA_Hovering_B.In1_c.x - FLIGHT_HEXA_Hovering_B.Gain_i;\r\n        FLIGHT_HEXA_Hovering_B.b_startWaypoint[1] =\r\n          FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n          (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex) +\r\n          FLIGHT_HEXA_Hovering_B.ix) - 1];\r\n        FLIGHT_HEXA_Hovering_B.Sum5 =\r\n          FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n          (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) +\r\n          FLIGHT_HEXA_Hovering_B.ix) - 1];\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] =\r\n          FLIGHT_HEXA_Hovering_B.Sum5;\r\n        FLIGHT_HEXA_Hovering_B.virtualWaypoint[1] =\r\n          FLIGHT_HEXA_Hovering_B.In1_c.y - FLIGHT_HEXA_Hovering_B.Sum5;\r\n        FLIGHT_HEXA_Hovering_B.b_startWaypoint[2] =\r\n          FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[((FLIGHT_HEXA_Hovering_B.ix\r\n          << 1) + static_cast<int32_T>(FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex))\r\n          - 1];\r\n        FLIGHT_HEXA_Hovering_B.Sum5 =\r\n          FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n          (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) +\r\n          (FLIGHT_HEXA_Hovering_B.ix << 1)) - 1];\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] =\r\n          FLIGHT_HEXA_Hovering_B.Sum5;\r\n        FLIGHT_HEXA_Hovering_B.virtualWaypoint[2] =\r\n          FLIGHT_HEXA_Hovering_B.In1_c.z - FLIGHT_HEXA_Hovering_B.Sum5;\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = FLIGHT_HEXA_Hovering_norm\r\n          (FLIGHT_HEXA_Hovering_B.virtualWaypoint);\r\n        guard2 = false;\r\n        if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <= 2.0) {\r\n          guard2 = true;\r\n        } else {\r\n          FLIGHT_HEXA_Hovering_B.lla0[0] = FLIGHT_HEXA_Hovering_B.Gain_i -\r\n            FLIGHT_HEXA_Hovering_B.Switch3;\r\n          FLIGHT_HEXA_Hovering_B.lla0[1] =\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) +\r\n            FLIGHT_HEXA_Hovering_B.ix) - 1] -\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex) +\r\n            FLIGHT_HEXA_Hovering_B.ix) - 1];\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 =\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) +\r\n            (FLIGHT_HEXA_Hovering_B.ix << 1)) - 1];\r\n          FLIGHT_HEXA_Hovering_B.lla0[2] =\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 -\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p\r\n            [((FLIGHT_HEXA_Hovering_B.ix << 1) + static_cast<int32_T>\r\n              (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex)) - 1];\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_norm\r\n            (FLIGHT_HEXA_Hovering_B.lla0);\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = ((FLIGHT_HEXA_Hovering_B.In1_c.x -\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) - 1]) /\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *\r\n            (FLIGHT_HEXA_Hovering_B.lla0[0] / FLIGHT_HEXA_Hovering_B.Switch3) +\r\n            FLIGHT_HEXA_Hovering_B.lla0[1] / FLIGHT_HEXA_Hovering_B.Switch3 *\r\n            (FLIGHT_HEXA_Hovering_B.virtualWaypoint[1] /\r\n             FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0)) +\r\n            (FLIGHT_HEXA_Hovering_B.In1_c.z -\r\n             FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2) /\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *\r\n            (FLIGHT_HEXA_Hovering_B.lla0[2] / FLIGHT_HEXA_Hovering_B.Switch3);\r\n          if (rtIsNaN(FLIGHT_HEXA_Hovering_B.Switch3) ||\r\n              (FLIGHT_HEXA_Hovering_B.Switch3 < 0.0)) {\r\n          } else {\r\n            guard2 = true;\r\n          }\r\n        }\r\n\r\n        if (guard2) {\r\n          FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex++;\r\n          FLIGHT_HEXA_Hovering_B.OR_g = false;\r\n          if (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex ==\r\n              FLIGHT_HEXA_Hovering_DW.obj.NumWaypoints) {\r\n            FLIGHT_HEXA_Hovering_B.OR_g = true;\r\n          }\r\n\r\n          if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n            FLIGHT_HEXA_Hovering_DW.obj.LastWaypointFlag = true;\r\n            FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex--;\r\n          }\r\n\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[0] =\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex) - 1];\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] =\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) - 1];\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[1] =\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex) +\r\n            FLIGHT_HEXA_Hovering_B.ix) - 1];\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] =\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) +\r\n            FLIGHT_HEXA_Hovering_B.ix) - 1];\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[2] =\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p\r\n            [((FLIGHT_HEXA_Hovering_B.ix << 1) + static_cast<int32_T>\r\n              (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex)) - 1];\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] =\r\n            FLIGHT_HEXA_Hovering_B.MatrixConcatenate_p[(static_cast<int32_T>\r\n            (FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex + 1.0) +\r\n            (FLIGHT_HEXA_Hovering_B.ix << 1)) - 1];\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_B.In1_c.x -\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[0];\r\n        FLIGHT_HEXA_Hovering_B.virtualWaypoint[0] = FLIGHT_HEXA_Hovering_B.Sum5;\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 =\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] -\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[0];\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = FLIGHT_HEXA_Hovering_B.In1_c.y\r\n          - FLIGHT_HEXA_Hovering_B.b_startWaypoint[1];\r\n        FLIGHT_HEXA_Hovering_B.virtualWaypoint[1] =\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] -\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[1];\r\n        FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_B.In1_c.z -\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[2];\r\n        FLIGHT_HEXA_Hovering_B.virtualWaypoint[2] =\r\n          FLIGHT_HEXA_Hovering_B.Switch3;\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 =\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] -\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[2];\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 =\r\n          (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 *\r\n           FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 +\r\n           FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 *\r\n           FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2) +\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 *\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2;\r\n        FLIGHT_HEXA_Hovering_B.Switch3 =\r\n          ((FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 +\r\n            FLIGHT_HEXA_Hovering_B.Sum5 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2) +\r\n           FLIGHT_HEXA_Hovering_B.Switch3 *\r\n           FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2) /\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1;\r\n        if (FLIGHT_HEXA_Hovering_B.Switch3 < 0.0) {\r\n          FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_norm\r\n            (FLIGHT_HEXA_Hovering_B.virtualWaypoint);\r\n        } else if (FLIGHT_HEXA_Hovering_B.Switch3 > 1.0) {\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[0] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.x -\r\n            FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0];\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[1] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.y -\r\n            FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1];\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[2] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.z -\r\n            FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2];\r\n          FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_norm\r\n            (FLIGHT_HEXA_Hovering_B.virtualWaypoint);\r\n        } else {\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[0] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.x - (FLIGHT_HEXA_Hovering_B.Switch3 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 +\r\n            FLIGHT_HEXA_Hovering_B.b_startWaypoint[0]);\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[1] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.y - (FLIGHT_HEXA_Hovering_B.Switch3 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 +\r\n            FLIGHT_HEXA_Hovering_B.b_startWaypoint[1]);\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[2] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.z - (FLIGHT_HEXA_Hovering_B.Switch3 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 +\r\n            FLIGHT_HEXA_Hovering_B.b_startWaypoint[2]);\r\n          FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_norm\r\n            (FLIGHT_HEXA_Hovering_B.virtualWaypoint);\r\n        }\r\n\r\n        if (FLIGHT_HEXA_Hovering_DW.obj.LastWaypointFlag) {\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = ((FLIGHT_HEXA_Hovering_B.Sum5 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 +\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1) +\r\n            (FLIGHT_HEXA_Hovering_B.In1_c.z -\r\n             FLIGHT_HEXA_Hovering_B.b_startWaypoint[2]) *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2) /\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1;\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[0] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.x - (FLIGHT_HEXA_Hovering_B.Switch3 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 +\r\n            FLIGHT_HEXA_Hovering_B.b_startWaypoint[0]);\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[1] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.y - (FLIGHT_HEXA_Hovering_B.Switch3 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 +\r\n            FLIGHT_HEXA_Hovering_B.b_startWaypoint[1]);\r\n          FLIGHT_HEXA_Hovering_B.virtualWaypoint[2] =\r\n            FLIGHT_HEXA_Hovering_B.In1_c.z - (FLIGHT_HEXA_Hovering_B.Switch3 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 +\r\n            FLIGHT_HEXA_Hovering_B.b_startWaypoint[2]);\r\n          FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_norm\r\n            (FLIGHT_HEXA_Hovering_B.virtualWaypoint);\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.Sum5 = fabs(FLIGHT_HEXA_Hovering_B.Gain_i);\r\n        if (rtIsInf(FLIGHT_HEXA_Hovering_B.Sum5) || rtIsNaN\r\n            (FLIGHT_HEXA_Hovering_B.Sum5)) {\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = (rtNaN);\r\n          FLIGHT_HEXA_Hovering_B.Sum5 = (rtNaN);\r\n        } else if (FLIGHT_HEXA_Hovering_B.Sum5 < 4.4501477170144028E-308) {\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = 4.94065645841247E-324;\r\n          FLIGHT_HEXA_Hovering_B.Sum5 = 4.94065645841247E-324;\r\n        } else {\r\n          frexp(FLIGHT_HEXA_Hovering_B.Sum5, &FLIGHT_HEXA_Hovering_B.ParamStep_c);\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = ldexp(1.0,\r\n            FLIGHT_HEXA_Hovering_B.ParamStep_c - 53);\r\n          frexp(FLIGHT_HEXA_Hovering_B.Sum5, &FLIGHT_HEXA_Hovering_B.b_exponent);\r\n          FLIGHT_HEXA_Hovering_B.Sum5 = ldexp(1.0,\r\n            FLIGHT_HEXA_Hovering_B.b_exponent - 53);\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = sqrt\r\n          (FLIGHT_HEXA_Hovering_B.Switch3);\r\n        FLIGHT_HEXA_Hovering_B.Switch3 = 5.0 * FLIGHT_HEXA_Hovering_B.Sum5;\r\n        if ((FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >=\r\n             FLIGHT_HEXA_Hovering_B.Switch3) || rtIsNaN\r\n            (FLIGHT_HEXA_Hovering_B.Switch3)) {\r\n          FLIGHT_HEXA_Hovering_B.Switch3 =\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n        }\r\n\r\n        if (FLIGHT_HEXA_Hovering_DW.obj.LookaheadDistance <=\r\n            FLIGHT_HEXA_Hovering_B.Gain_i + FLIGHT_HEXA_Hovering_B.Switch3) {\r\n          FLIGHT_HEXA_Hovering_DW.obj.LookaheadDistance =\r\n            FLIGHT_HEXA_Hovering_DW.obj.LookaheadFactor *\r\n            FLIGHT_HEXA_Hovering_B.Gain_i;\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.lla0[0] = FLIGHT_HEXA_Hovering_B.b_startWaypoint\r\n          [0] - FLIGHT_HEXA_Hovering_B.In1_c.x;\r\n        FLIGHT_HEXA_Hovering_B.lla0[1] = FLIGHT_HEXA_Hovering_B.b_startWaypoint\r\n          [1] - FLIGHT_HEXA_Hovering_B.In1_c.y;\r\n        FLIGHT_HEXA_Hovering_B.lla0[2] = FLIGHT_HEXA_Hovering_B.b_startWaypoint\r\n          [2] - FLIGHT_HEXA_Hovering_B.In1_c.z;\r\n        FLIGHT_HEXA_Hovering_B.Gain_i =\r\n          ((FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 *\r\n            FLIGHT_HEXA_Hovering_B.lla0[0] +\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 *\r\n            FLIGHT_HEXA_Hovering_B.lla0[1]) +\r\n           FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 * FLIGHT_HEXA_Hovering_B.lla0\r\n           [2]) * 2.0;\r\n        FLIGHT_HEXA_Hovering_B.Sum5 = sqrt(FLIGHT_HEXA_Hovering_B.Gain_i *\r\n          FLIGHT_HEXA_Hovering_B.Gain_i - (((FLIGHT_HEXA_Hovering_B.lla0[0] *\r\n          FLIGHT_HEXA_Hovering_B.lla0[0] + FLIGHT_HEXA_Hovering_B.lla0[1] *\r\n          FLIGHT_HEXA_Hovering_B.lla0[1]) + FLIGHT_HEXA_Hovering_B.lla0[2] *\r\n          FLIGHT_HEXA_Hovering_B.lla0[2]) -\r\n          FLIGHT_HEXA_Hovering_DW.obj.LookaheadDistance *\r\n          FLIGHT_HEXA_Hovering_DW.obj.LookaheadDistance) * (4.0 *\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1));\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = (-FLIGHT_HEXA_Hovering_B.Gain_i\r\n          + FLIGHT_HEXA_Hovering_B.Sum5) / 2.0 /\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1;\r\n        FLIGHT_HEXA_Hovering_B.Switch3 = (-FLIGHT_HEXA_Hovering_B.Gain_i -\r\n          FLIGHT_HEXA_Hovering_B.Sum5) / 2.0 /\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1;\r\n        if ((FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >=\r\n             FLIGHT_HEXA_Hovering_B.Switch3) || rtIsNaN\r\n            (FLIGHT_HEXA_Hovering_B.Switch3)) {\r\n          FLIGHT_HEXA_Hovering_B.Switch3 =\r\n            FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] = (1.0 -\r\n          FLIGHT_HEXA_Hovering_B.Switch3) *\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[0] +\r\n          FLIGHT_HEXA_Hovering_B.Switch3 *\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0];\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] = (1.0 -\r\n          FLIGHT_HEXA_Hovering_B.Switch3) *\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[1] +\r\n          FLIGHT_HEXA_Hovering_B.Switch3 *\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1];\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] = (1.0 -\r\n          FLIGHT_HEXA_Hovering_B.Switch3) *\r\n          FLIGHT_HEXA_Hovering_B.b_startWaypoint[2] +\r\n          FLIGHT_HEXA_Hovering_B.Switch3 *\r\n          FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2];\r\n        FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_rt_atan2d_snf\r\n          (FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] -\r\n           FLIGHT_HEXA_Hovering_B.In1_c.y,\r\n           FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] -\r\n           FLIGHT_HEXA_Hovering_B.In1_c.x);\r\n        FLIGHT_HEXA_Hovering_DW.obj.LastWaypointFlag = false;\r\n      }\r\n    }\r\n\r\n    // Switch: '<S33>/Switch1' incorporates:\r\n    //   Constant: '<S34>/Constant'\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n    //   Logic: '<S33>/OR'\r\n    //   Logic: '<S33>/OR1'\r\n    //   MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n    //   Merge: '<S18>/Merge'\r\n    //   RelationalOperator: '<S33>/IsNaN'\r\n    //   RelationalOperator: '<S33>/IsNaN1'\r\n    //   RelationalOperator: '<S34>/Compare'\r\n    //   Switch: '<S33>/Switch'\r\n    //\r\n    if (rtIsNaN(FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0]) || rtIsNaN\r\n        (FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1]) || rtIsNaN\r\n        (FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2]) ||\r\n        (FLIGHT_HEXA_Hovering_B.In1_p.current.type ==\r\n         FLIGHT_HEXA_Hovering_P.CompareToConstant_const_dt)) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = FLIGHT_HEXA_Hovering_B.In1_c.x;\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 = FLIGHT_HEXA_Hovering_B.In1_c.y;\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 = FLIGHT_HEXA_Hovering_B.In1_c.z;\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_3 =\r\n        FLIGHT_HEXA_Hovering_B.In1_c.heading;\r\n    } else {\r\n      if (rtIsNaN(FLIGHT_HEXA_Hovering_B.Switch3)) {\r\n        // Switch: '<S33>/Switch' incorporates:\r\n        //   Constant: '<S33>/Constant'\r\n        //   Merge: '<S18>/Merge'\r\n        //   Reshape: '<S33>/Reshape2'\r\n\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_3 =\r\n          FLIGHT_HEXA_Hovering_P.Constant_Value_jd;\r\n      } else {\r\n        // Reshape: '<S33>/Reshape2' incorporates:\r\n        //   MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n        //   Merge: '<S18>/Merge'\r\n\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_3 = FLIGHT_HEXA_Hovering_B.Switch3;\r\n      }\r\n\r\n      // Math: '<S33>/Transpose1' incorporates:\r\n      //   Merge: '<S18>/Merge'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0];\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 =\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1];\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 =\r\n        FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2];\r\n    }\r\n\r\n    // End of Switch: '<S33>/Switch1'\r\n    // End of Outputs for SubSystem: '<S18>/Waypoint'\r\n    break;\r\n\r\n   default:\r\n    if (FLIGHT_HEXA_Hovering_B.rtAction != FLIGHT_HEXA_Hovering_B.rtPrevAction)\r\n    {\r\n      // InitializeConditions for IfAction SubSystem: '<S18>/IDLE' incorporates:\r\n      //   ActionPort: '<S20>/Action Port'\r\n\r\n      // InitializeConditions for If: '<S18>/If' incorporates:\r\n      //   Delay: '<S24>/Delay'\r\n\r\n      FLIGHT_HEXA_Hovering_DW.Delay_DSTATE =\r\n        FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_g0;\r\n\r\n      // End of InitializeConditions for SubSystem: '<S18>/IDLE'\r\n    }\r\n\r\n    // Outputs for IfAction SubSystem: '<S18>/IDLE' incorporates:\r\n    //   ActionPort: '<S20>/Action Port'\r\n\r\n    // Outputs for Enabled SubSystem: '<S24>/Enabled Subsystem2' incorporates:\r\n    //   EnablePort: '<S25>/Enable'\r\n\r\n    if (FLIGHT_HEXA_Hovering_DW.Delay_DSTATE > 0.0) {\r\n      // SignalConversion generated from: '<S25>/yaw_In' incorporates:\r\n      //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n\r\n      FLIGHT_HEXA_Hovering_B.yaw_In = FLIGHT_HEXA_Hovering_B.In1_c.heading;\r\n    }\r\n\r\n    // End of Outputs for SubSystem: '<S24>/Enabled Subsystem2'\r\n\r\n    // Reshape: '<S20>/Reshape1' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n    //   Delay: '<S24>/Delay'\r\n    //   Merge: '<S18>/Merge'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = FLIGHT_HEXA_Hovering_B.In1_c.x;\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 = FLIGHT_HEXA_Hovering_B.In1_c.y;\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 = FLIGHT_HEXA_Hovering_B.In1_c.z;\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_3 = FLIGHT_HEXA_Hovering_B.yaw_In;\r\n\r\n    // Update for Delay: '<S24>/Delay' incorporates:\r\n    //   Constant: '<S24>/Constant'\r\n\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_i;\r\n\r\n    // End of Outputs for SubSystem: '<S18>/IDLE'\r\n    break;\r\n  }\r\n\r\n  // End of If: '<S18>/If'\r\n\r\n  // Outputs for Enabled SubSystem: '<S4>/Position & Altitude controller' incorporates:\r\n  //   EnablePort: '<S76>/Enable'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.In1_b.armed) {\r\n    // Trigonometry: '<S341>/SinCos'\r\n    FLIGHT_HEXA_Hovering_B.Sum5 = sin(FLIGHT_HEXA_Hovering_B.VectorConcatenate[0]);\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = cos\r\n      (FLIGHT_HEXA_Hovering_B.VectorConcatenate[0]);\r\n\r\n    // Math: '<S341>/Transpose' incorporates:\r\n    //   Gain: '<S341>/Gain'\r\n    //   Reshape: '<S341>/Reshape1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n      FLIGHT_HEXA_Hovering_P.Gain_Gain_a * FLIGHT_HEXA_Hovering_B.Sum5;\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 = FLIGHT_HEXA_Hovering_B.Sum5;\r\n\r\n    // Sum: '<S76>/Sum5'\r\n    FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_3 -\r\n      FLIGHT_HEXA_Hovering_B.VectorConcatenate[0];\r\n\r\n    // Switch: '<S342>/Switch' incorporates:\r\n    //   Abs: '<S342>/Abs'\r\n\r\n    if (fabs(FLIGHT_HEXA_Hovering_B.Sum5) >\r\n        FLIGHT_HEXA_Hovering_P.Switch_Threshold_p) {\r\n      // Switch: '<S342>/Switch1' incorporates:\r\n      //   Constant: '<S342>/Constant'\r\n      //   Sum: '<S342>/Add'\r\n      //   Sum: '<S342>/Subtract'\r\n\r\n      if (FLIGHT_HEXA_Hovering_B.Sum5 > FLIGHT_HEXA_Hovering_P.Switch1_Threshold)\r\n      {\r\n        FLIGHT_HEXA_Hovering_B.Sum5 -= FLIGHT_HEXA_Hovering_P.Constant_Value_p;\r\n      } else {\r\n        FLIGHT_HEXA_Hovering_B.Sum5 += FLIGHT_HEXA_Hovering_P.Constant_Value_p;\r\n      }\r\n\r\n      // End of Switch: '<S342>/Switch1'\r\n    }\r\n\r\n    // End of Switch: '<S342>/Switch'\r\n\r\n    // Saturate: '<S439>/Saturation' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n    //   Gain: '<S437>/Proportional Gain'\r\n    //   Sum: '<S76>/Sum1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 - FLIGHT_HEXA_Hovering_B.In1_c.x) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController1_P_f;\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_UpperSaturationLimit_e) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_UpperSaturationLimit_e;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.PIDController1_LowerSaturationLimit_h) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_LowerSaturationLimit_h;\r\n    }\r\n\r\n    // Sum: '<S76>/Sum' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n    //   Saturate: '<S439>/Saturation'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 -\r\n      FLIGHT_HEXA_Hovering_B.In1_c.vx;\r\n\r\n    // Saturate: '<S439>/Saturation' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n    //   Gain: '<S437>/Proportional Gain'\r\n    //   Sum: '<S76>/Sum1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 - FLIGHT_HEXA_Hovering_B.In1_c.y) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController1_P_f;\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_UpperSaturationLimit_e) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_UpperSaturationLimit_e;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.PIDController1_LowerSaturationLimit_h) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_LowerSaturationLimit_h;\r\n    }\r\n\r\n    // Sum: '<S76>/Sum' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n    //   Saturate: '<S439>/Saturation'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1 =\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 - FLIGHT_HEXA_Hovering_B.In1_c.vy;\r\n\r\n    // Saturate: '<S389>/Saturation' incorporates:\r\n    //   Gain: '<S387>/Proportional Gain'\r\n    //   Math: '<S341>/Transpose'\r\n    //   Product: '<S76>/MatrixMultiply'\r\n    //   Reshape: '<S341>/Reshape'\r\n    //   Reshape: '<S341>/Reshape1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = (FLIGHT_HEXA_Hovering_B.Gain_i *\r\n      FLIGHT_HEXA_Hovering_B.Switch3 +\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController_P_b;\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController_UpperSaturationLimit_e) {\r\n      // Saturate: '<S389>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation[0] =\r\n        FLIGHT_HEXA_Hovering_P.PIDController_UpperSaturationLimit_e;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.PIDController_LowerSaturationLimit_o) {\r\n      // Saturate: '<S389>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation[0] =\r\n        FLIGHT_HEXA_Hovering_P.PIDController_LowerSaturationLimit_o;\r\n    } else {\r\n      // Saturate: '<S389>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation[0] =\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 *\r\n       FLIGHT_HEXA_Hovering_B.Switch3 + FLIGHT_HEXA_Hovering_B.Gain_i *\r\n       FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_1) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController_P_b;\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController_UpperSaturationLimit_e) {\r\n      // Saturate: '<S389>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation[1] =\r\n        FLIGHT_HEXA_Hovering_P.PIDController_UpperSaturationLimit_e;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.PIDController_LowerSaturationLimit_o) {\r\n      // Saturate: '<S389>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation[1] =\r\n        FLIGHT_HEXA_Hovering_P.PIDController_LowerSaturationLimit_o;\r\n    } else {\r\n      // Saturate: '<S389>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation[1] =\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n    }\r\n\r\n    // End of Saturate: '<S389>/Saturation'\r\n\r\n    // Gain: '<S76>/Gain1'\r\n    FLIGHT_HEXA_Hovering_B.Gain1 = FLIGHT_HEXA_Hovering_P.Gain1_Gain_ad *\r\n      FLIGHT_HEXA_Hovering_B.Saturation[0];\r\n\r\n    // Gain: '<S487>/Proportional Gain'\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.PIDController5_P * FLIGHT_HEXA_Hovering_B.Sum5;\r\n\r\n    // Saturate: '<S489>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController5_UpperSaturationLimit) {\r\n      // Saturate: '<S489>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_e =\r\n        FLIGHT_HEXA_Hovering_P.PIDController5_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.PIDController5_LowerSaturationLimit) {\r\n      // Saturate: '<S489>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_e =\r\n        FLIGHT_HEXA_Hovering_P.PIDController5_LowerSaturationLimit;\r\n    } else {\r\n      // Saturate: '<S489>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_e =\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n    }\r\n\r\n    // End of Saturate: '<S489>/Saturation'\r\n\r\n    // Gain: '<S340>/Gain1' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.Gain1_Gain_j *\r\n      FLIGHT_HEXA_Hovering_B.In1_c.z;\r\n\r\n    // Switch: '<S348>/Switch' incorporates:\r\n    //   Constant: '<S340>/Constant'\r\n    //   RelationalOperator: '<S348>/UpperRelop'\r\n    //   Switch: '<S348>/Switch2'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 <\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_ag) {\r\n      FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.Constant_Value_ag;\r\n    }\r\n\r\n    // Sum: '<S76>/Sum2' incorporates:\r\n    //   Gain: '<S4>/Gain'\r\n    //   Switch: '<S348>/Switch'\r\n    //   Switch: '<S348>/Switch2'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_P.Gain_Gain_k1 *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 - FLIGHT_HEXA_Hovering_B.Switch3;\r\n\r\n    // Gain: '<S539>/Proportional Gain'\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_P.PID_Altitude_P *\r\n      FLIGHT_HEXA_Hovering_B.Sum5;\r\n\r\n    // Gain: '<S537>/Filter Coefficient' incorporates:\r\n    //   DiscreteIntegrator: '<S529>/Filter'\r\n    //   Gain: '<S527>/Derivative Gain'\r\n    //   Sum: '<S529>/SumD'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2 =\r\n      (FLIGHT_HEXA_Hovering_P.PID_Altitude_D * FLIGHT_HEXA_Hovering_B.Sum5 -\r\n       FLIGHT_HEXA_Hovering_DW.Filter_DSTATE) *\r\n      FLIGHT_HEXA_Hovering_P.PID_Altitude_N;\r\n\r\n    // Sum: '<S544>/Sum Fdbk'\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = (FLIGHT_HEXA_Hovering_B.Gain_i +\r\n      FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE) +\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2;\r\n\r\n    // DeadZone: '<S526>/DeadZone'\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 >\r\n        FLIGHT_HEXA_Hovering_P.PID_Altitude_UpperSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.Switch3 -=\r\n        FLIGHT_HEXA_Hovering_P.PID_Altitude_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.Switch3 >=\r\n               FLIGHT_HEXA_Hovering_P.PID_Altitude_LowerSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.Switch3 = 0.0;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.Switch3 -=\r\n        FLIGHT_HEXA_Hovering_P.PID_Altitude_LowerSaturationLimit;\r\n    }\r\n\r\n    // End of DeadZone: '<S526>/DeadZone'\r\n\r\n    // Gain: '<S531>/Integral Gain'\r\n    FLIGHT_HEXA_Hovering_B.Sum5 *= FLIGHT_HEXA_Hovering_P.PID_Altitude_I;\r\n\r\n    // Switch: '<S524>/Switch1' incorporates:\r\n    //   Constant: '<S524>/Clamping_zero'\r\n    //   Constant: '<S524>/Constant'\r\n    //   Constant: '<S524>/Constant2'\r\n    //   RelationalOperator: '<S524>/fix for DT propagation issue'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_o) {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_n1;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant2_Value_gq;\r\n    }\r\n\r\n    // Switch: '<S524>/Switch2' incorporates:\r\n    //   Constant: '<S524>/Clamping_zero'\r\n    //   Constant: '<S524>/Constant3'\r\n    //   Constant: '<S524>/Constant4'\r\n    //   RelationalOperator: '<S524>/fix for DT propagation issue1'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Sum5 >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_o) {\r\n      FLIGHT_HEXA_Hovering_B.rtAction = FLIGHT_HEXA_Hovering_P.Constant3_Value_i;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant4_Value_hf;\r\n    }\r\n\r\n    // Switch: '<S524>/Switch' incorporates:\r\n    //   Constant: '<S524>/Clamping_zero'\r\n    //   Constant: '<S524>/Constant1'\r\n    //   Logic: '<S524>/AND3'\r\n    //   RelationalOperator: '<S524>/Equal1'\r\n    //   RelationalOperator: '<S524>/Relational Operator'\r\n    //   Switch: '<S524>/Switch1'\r\n    //   Switch: '<S524>/Switch2'\r\n\r\n    if ((FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_o !=\r\n         FLIGHT_HEXA_Hovering_B.Switch3) && (FLIGHT_HEXA_Hovering_B.rtPrevAction\r\n         == FLIGHT_HEXA_Hovering_B.rtAction)) {\r\n      FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_P.Constant1_Value_c;\r\n    }\r\n\r\n    // DiscreteIntegrator: '<S534>/Integrator' incorporates:\r\n    //   Switch: '<S524>/Switch'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch3 =\r\n      FLIGHT_HEXA_Hovering_P.Integrator_gainval_p4 * FLIGHT_HEXA_Hovering_B.Sum5\r\n      + FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE;\r\n\r\n    // Sum: '<S543>/Sum'\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = (FLIGHT_HEXA_Hovering_B.Gain_i +\r\n      FLIGHT_HEXA_Hovering_B.Switch3) +\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2;\r\n\r\n    // Saturate: '<S541>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PID_Altitude_UpperSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.PID_Altitude_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.PID_Altitude_LowerSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.PID_Altitude_LowerSaturationLimit;\r\n    }\r\n\r\n    // Sum: '<S76>/Sum3' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion1'\r\n    //   Saturate: '<S541>/Saturation'\r\n    //   UnaryMinus: '<S76>/Unary Minus'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 - (-\r\n      static_cast<real_T>(FLIGHT_HEXA_Hovering_B.In1_c.vz));\r\n\r\n    // Gain: '<S591>/Proportional Gain'\r\n    FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_P.PID_vz_P *\r\n      FLIGHT_HEXA_Hovering_B.Gain_i;\r\n\r\n    // Gain: '<S589>/Filter Coefficient' incorporates:\r\n    //   DiscreteIntegrator: '<S581>/Filter'\r\n    //   Gain: '<S579>/Derivative Gain'\r\n    //   Sum: '<S581>/SumD'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2 = (FLIGHT_HEXA_Hovering_P.PID_vz_D *\r\n      FLIGHT_HEXA_Hovering_B.Gain_i - FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_n) *\r\n      FLIGHT_HEXA_Hovering_P.PID_vz_N;\r\n\r\n    // Sum: '<S596>/Sum Fdbk'\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 = (FLIGHT_HEXA_Hovering_B.Sum5 +\r\n      FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_c) +\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2;\r\n\r\n    // DeadZone: '<S578>/DeadZone'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 >\r\n        FLIGHT_HEXA_Hovering_P.PID_vz_UpperSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 -=\r\n        FLIGHT_HEXA_Hovering_P.PID_vz_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 >=\r\n               FLIGHT_HEXA_Hovering_P.PID_vz_LowerSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 = 0.0;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 -=\r\n        FLIGHT_HEXA_Hovering_P.PID_vz_LowerSaturationLimit;\r\n    }\r\n\r\n    // End of DeadZone: '<S578>/DeadZone'\r\n\r\n    // Gain: '<S583>/Integral Gain'\r\n    FLIGHT_HEXA_Hovering_B.Gain_i *= FLIGHT_HEXA_Hovering_P.PID_vz_I;\r\n\r\n    // Switch: '<S576>/Switch1' incorporates:\r\n    //   Constant: '<S576>/Clamping_zero'\r\n    //   Constant: '<S576>/Constant'\r\n    //   Constant: '<S576>/Constant2'\r\n    //   RelationalOperator: '<S576>/fix for DT propagation issue'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_bl) {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_gf;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant2_Value_ga;\r\n    }\r\n\r\n    // Switch: '<S576>/Switch2' incorporates:\r\n    //   Constant: '<S576>/Clamping_zero'\r\n    //   Constant: '<S576>/Constant3'\r\n    //   Constant: '<S576>/Constant4'\r\n    //   RelationalOperator: '<S576>/fix for DT propagation issue1'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Gain_i >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_bl) {\r\n      FLIGHT_HEXA_Hovering_B.rtAction = FLIGHT_HEXA_Hovering_P.Constant3_Value_b;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant4_Value_fv;\r\n    }\r\n\r\n    // Switch: '<S576>/Switch' incorporates:\r\n    //   Constant: '<S576>/Clamping_zero'\r\n    //   Constant: '<S576>/Constant1'\r\n    //   Logic: '<S576>/AND3'\r\n    //   RelationalOperator: '<S576>/Equal1'\r\n    //   RelationalOperator: '<S576>/Relational Operator'\r\n    //   Switch: '<S576>/Switch1'\r\n    //   Switch: '<S576>/Switch2'\r\n\r\n    if ((FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_bl !=\r\n         FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1) &&\r\n        (FLIGHT_HEXA_Hovering_B.rtPrevAction == FLIGHT_HEXA_Hovering_B.rtAction))\r\n    {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_P.Constant1_Value_f;\r\n    }\r\n\r\n    // DiscreteIntegrator: '<S586>/Integrator' incorporates:\r\n    //   Switch: '<S576>/Switch'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_P.Integrator_gainval_ik\r\n      * FLIGHT_HEXA_Hovering_B.Gain_i +\r\n      FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_c;\r\n\r\n    // Sum: '<S595>/Sum'\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = (FLIGHT_HEXA_Hovering_B.Sum5 +\r\n      FLIGHT_HEXA_Hovering_B.Gain_i) + FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2;\r\n\r\n    // Saturate: '<S593>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PID_vz_UpperSaturationLimit) {\r\n      // Saturate: '<S593>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_f =\r\n        FLIGHT_HEXA_Hovering_P.PID_vz_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.PID_vz_LowerSaturationLimit) {\r\n      // Saturate: '<S593>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_f =\r\n        FLIGHT_HEXA_Hovering_P.PID_vz_LowerSaturationLimit;\r\n    } else {\r\n      // Saturate: '<S593>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_f =\r\n        FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n    }\r\n\r\n    // End of Saturate: '<S593>/Saturation'\r\n\r\n    // Update for DiscreteIntegrator: '<S529>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE +=\r\n      FLIGHT_HEXA_Hovering_P.Filter_gainval_i *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_2;\r\n\r\n    // Update for DiscreteIntegrator: '<S534>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE = FLIGHT_HEXA_Hovering_B.Switch3;\r\n\r\n    // Update for DiscreteIntegrator: '<S581>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_n +=\r\n      FLIGHT_HEXA_Hovering_P.Filter_gainval_d *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_2;\r\n\r\n    // Update for DiscreteIntegrator: '<S586>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_c = FLIGHT_HEXA_Hovering_B.Gain_i;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S4>/Position & Altitude controller'\r\n\r\n  // Chart: '<S4>/Chart'\r\n  if (FLIGHT_HEXA_Hovering_DW.is_active_c3_FLIGHT_HEXA_Hovering == 0U) {\r\n    FLIGHT_HEXA_Hovering_DW.is_active_c3_FLIGHT_HEXA_Hovering = 1U;\r\n    FLIGHT_HEXA_Hovering_DW.is_c3_FLIGHT_HEXA_Hovering =\r\n      FLIGHT_HEXA_Hovering_IN_STABLIZED;\r\n  } else if (FLIGHT_HEXA_Hovering_DW.is_c3_FLIGHT_HEXA_Hovering ==\r\n             FLIGHT_HEXA_Hovering_IN_MISSION) {\r\n    if (FLIGHT_HEXA_Hovering_B.In1_j.values[5] <= 1400) {\r\n      FLIGHT_HEXA_Hovering_DW.is_c3_FLIGHT_HEXA_Hovering =\r\n        FLIGHT_HEXA_Hovering_IN_STABLIZED;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.Switch2 = FLIGHT_HEXA_Hovering_B.Saturation_e;\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = FLIGHT_HEXA_Hovering_B.Gain1;\r\n      FLIGHT_HEXA_Hovering_B.Gain2 = FLIGHT_HEXA_Hovering_B.Saturation[1];\r\n      FLIGHT_HEXA_Hovering_B.Sum = FLIGHT_HEXA_Hovering_B.Saturation_f;\r\n    }\r\n\r\n    // case IN_STABLIZED:\r\n  } else if (FLIGHT_HEXA_Hovering_B.In1_j.values[5] > 1400) {\r\n    FLIGHT_HEXA_Hovering_DW.is_c3_FLIGHT_HEXA_Hovering =\r\n      FLIGHT_HEXA_Hovering_IN_MISSION;\r\n    FLIGHT_HEXA_Hovering_B.Switch2 = FLIGHT_HEXA_Hovering_B.Saturation_e;\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = FLIGHT_HEXA_Hovering_B.Gain1;\r\n    FLIGHT_HEXA_Hovering_B.Gain2 = FLIGHT_HEXA_Hovering_B.Saturation[1];\r\n    FLIGHT_HEXA_Hovering_B.Sum = FLIGHT_HEXA_Hovering_B.Saturation_f;\r\n  }\r\n\r\n  // End of Chart: '<S4>/Chart'\r\n\r\n  // Outputs for Enabled SubSystem: '<S4>/Attitude controller' incorporates:\r\n  //   EnablePort: '<S73>/Enable'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.In1_b.armed) {\r\n    // Sum: '<S73>/Sum4' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion2'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_B.Switch2 -\r\n      FLIGHT_HEXA_Hovering_B.In1_l.xyz[2];\r\n\r\n    // Gain: '<S116>/Integral Gain'\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_P.PIDController_I *\r\n      FLIGHT_HEXA_Hovering_B.Sum5;\r\n\r\n    // Gain: '<S122>/Filter Coefficient' incorporates:\r\n    //   DiscreteIntegrator: '<S114>/Filter'\r\n    //   Gain: '<S112>/Derivative Gain'\r\n    //   Sum: '<S114>/SumD'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch2 = (FLIGHT_HEXA_Hovering_P.PIDController_D *\r\n      FLIGHT_HEXA_Hovering_B.Sum5 - FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_e) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController_N;\r\n\r\n    // Sum: '<S128>/Sum' incorporates:\r\n    //   DiscreteIntegrator: '<S119>/Integrator'\r\n    //   Gain: '<S124>/Proportional Gain'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = (FLIGHT_HEXA_Hovering_P.PIDController_P *\r\n      FLIGHT_HEXA_Hovering_B.Sum5 + FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_k)\r\n      + FLIGHT_HEXA_Hovering_B.Switch2;\r\n\r\n    // DeadZone: '<S111>/DeadZone'\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController_UpperSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_B.Switch3 -\r\n        FLIGHT_HEXA_Hovering_P.PIDController_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.Switch3 >=\r\n               FLIGHT_HEXA_Hovering_P.PIDController_LowerSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 = 0.0;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_B.Switch3 -\r\n        FLIGHT_HEXA_Hovering_P.PIDController_LowerSaturationLimit;\r\n    }\r\n\r\n    // End of DeadZone: '<S111>/DeadZone'\r\n\r\n    // Switch: '<S109>/Switch1' incorporates:\r\n    //   Constant: '<S109>/Clamping_zero'\r\n    //   Constant: '<S109>/Constant'\r\n    //   Constant: '<S109>/Constant2'\r\n    //   RelationalOperator: '<S109>/fix for DT propagation issue'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value) {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_ge;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant2_Value_i;\r\n    }\r\n\r\n    // Switch: '<S109>/Switch2' incorporates:\r\n    //   Constant: '<S109>/Clamping_zero'\r\n    //   Constant: '<S109>/Constant3'\r\n    //   Constant: '<S109>/Constant4'\r\n    //   RelationalOperator: '<S109>/fix for DT propagation issue1'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Gain_i >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value) {\r\n      FLIGHT_HEXA_Hovering_B.rtAction = FLIGHT_HEXA_Hovering_P.Constant3_Value_h;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtAction = FLIGHT_HEXA_Hovering_P.Constant4_Value_f;\r\n    }\r\n\r\n    // Switch: '<S109>/Switch' incorporates:\r\n    //   Constant: '<S109>/Clamping_zero'\r\n    //   Constant: '<S109>/Constant1'\r\n    //   Logic: '<S109>/AND3'\r\n    //   RelationalOperator: '<S109>/Equal1'\r\n    //   RelationalOperator: '<S109>/Relational Operator'\r\n    //   Switch: '<S109>/Switch1'\r\n    //   Switch: '<S109>/Switch2'\r\n\r\n    if ((FLIGHT_HEXA_Hovering_P.Clamping_zero_Value !=\r\n         FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1) &&\r\n        (FLIGHT_HEXA_Hovering_B.rtPrevAction == FLIGHT_HEXA_Hovering_B.rtAction))\r\n    {\r\n      FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_P.Constant1_Value_k;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_B.Gain_i;\r\n    }\r\n\r\n    // End of Switch: '<S109>/Switch'\r\n\r\n    // Saturate: '<S126>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController_UpperSaturationLimit) {\r\n      // Saturate: '<S126>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_l =\r\n        FLIGHT_HEXA_Hovering_P.PIDController_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.Switch3 <\r\n               FLIGHT_HEXA_Hovering_P.PIDController_LowerSaturationLimit) {\r\n      // Saturate: '<S126>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_l =\r\n        FLIGHT_HEXA_Hovering_P.PIDController_LowerSaturationLimit;\r\n    } else {\r\n      // Saturate: '<S126>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_l = FLIGHT_HEXA_Hovering_B.Switch3;\r\n    }\r\n\r\n    // End of Saturate: '<S126>/Saturation'\r\n\r\n    // RateLimiter: '<S73>/Rate Limiter2'\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0\r\n      - FLIGHT_HEXA_Hovering_DW.PrevY;\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 >\r\n        FLIGHT_HEXA_Hovering_P.RateLimiter2_RisingLim *\r\n        FLIGHT_HEXA_Hovering_period) {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i =\r\n        FLIGHT_HEXA_Hovering_P.RateLimiter2_RisingLim *\r\n        FLIGHT_HEXA_Hovering_period + FLIGHT_HEXA_Hovering_DW.PrevY;\r\n    } else if (FLIGHT_HEXA_Hovering_B.Switch3 <\r\n               FLIGHT_HEXA_Hovering_P.RateLimiter2_FallingLim *\r\n               FLIGHT_HEXA_Hovering_period) {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i =\r\n        FLIGHT_HEXA_Hovering_P.RateLimiter2_FallingLim *\r\n        FLIGHT_HEXA_Hovering_period + FLIGHT_HEXA_Hovering_DW.PrevY;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.PrevY = FLIGHT_HEXA_Hovering_B.Gain_i;\r\n\r\n    // End of RateLimiter: '<S73>/Rate Limiter2'\r\n\r\n    // If: '<S606>/If' incorporates:\r\n    //   Constant: '<S607>/Constant'\r\n    //   Constant: '<S608>/Constant'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 > 1.0) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_c;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 < -1.0) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_md;\r\n    }\r\n\r\n    // Saturate: '<S73>/Saturation1'\r\n    if (FLIGHT_HEXA_Hovering_B.Gain_i >\r\n        FLIGHT_HEXA_Hovering_P.Saturation1_UpperSat) {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i =\r\n        FLIGHT_HEXA_Hovering_P.Saturation1_UpperSat;\r\n    } else if (FLIGHT_HEXA_Hovering_B.Gain_i <\r\n               FLIGHT_HEXA_Hovering_P.Saturation1_LowerSat) {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i =\r\n        FLIGHT_HEXA_Hovering_P.Saturation1_LowerSat;\r\n    }\r\n\r\n    // If: '<S606>/If' incorporates:\r\n    //   Trigonometry: '<S604>/trigFcn'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 > 1.0) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 = 1.0;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 < -1.0) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 = -1.0;\r\n    }\r\n\r\n    // Sum: '<S73>/Sum' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion2'\r\n    //   Gain: '<S278>/Proportional Gain'\r\n    //   Saturate: '<S73>/Saturation1'\r\n    //   Sum: '<S73>/Sum2'\r\n    //   Trigonometry: '<S604>/trigFcn'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = (FLIGHT_HEXA_Hovering_B.Gain_i - asin\r\n      (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3)) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController3_P -\r\n      FLIGHT_HEXA_Hovering_B.In1_l.xyz[1];\r\n\r\n    // Gain: '<S168>/Integral Gain'\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.PIDController1_I *\r\n      FLIGHT_HEXA_Hovering_B.Gain_i;\r\n\r\n    // Gain: '<S174>/Filter Coefficient' incorporates:\r\n    //   DiscreteIntegrator: '<S166>/Filter'\r\n    //   Gain: '<S164>/Derivative Gain'\r\n    //   Sum: '<S166>/SumD'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 =\r\n      (FLIGHT_HEXA_Hovering_P.PIDController1_D * FLIGHT_HEXA_Hovering_B.Gain_i -\r\n       FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_ek) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController1_N;\r\n\r\n    // Sum: '<S180>/Sum' incorporates:\r\n    //   DiscreteIntegrator: '<S171>/Integrator'\r\n    //   Gain: '<S176>/Proportional Gain'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n      (FLIGHT_HEXA_Hovering_P.PIDController1_P * FLIGHT_HEXA_Hovering_B.Gain_i +\r\n       FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_kd) +\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3;\r\n\r\n    // DeadZone: '<S163>/DeadZone'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_UpperSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 -\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 >=\r\n               FLIGHT_HEXA_Hovering_P.PIDController1_LowerSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 = 0.0;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 -\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_LowerSaturationLimit;\r\n    }\r\n\r\n    // End of DeadZone: '<S163>/DeadZone'\r\n\r\n    // Switch: '<S161>/Switch1' incorporates:\r\n    //   Constant: '<S161>/Clamping_zero'\r\n    //   Constant: '<S161>/Constant'\r\n    //   Constant: '<S161>/Constant2'\r\n    //   RelationalOperator: '<S161>/fix for DT propagation issue'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_b) {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_a1;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant2_Value_l;\r\n    }\r\n\r\n    // Switch: '<S161>/Switch2' incorporates:\r\n    //   Constant: '<S161>/Clamping_zero'\r\n    //   Constant: '<S161>/Constant3'\r\n    //   Constant: '<S161>/Constant4'\r\n    //   RelationalOperator: '<S161>/fix for DT propagation issue1'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_b) {\r\n      FLIGHT_HEXA_Hovering_B.rtAction = FLIGHT_HEXA_Hovering_P.Constant3_Value_j;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtAction = FLIGHT_HEXA_Hovering_P.Constant4_Value_a;\r\n    }\r\n\r\n    // Switch: '<S161>/Switch' incorporates:\r\n    //   Constant: '<S161>/Clamping_zero'\r\n    //   Constant: '<S161>/Constant1'\r\n    //   Logic: '<S161>/AND3'\r\n    //   RelationalOperator: '<S161>/Equal1'\r\n    //   RelationalOperator: '<S161>/Relational Operator'\r\n    //   Switch: '<S161>/Switch1'\r\n    //   Switch: '<S161>/Switch2'\r\n\r\n    if ((FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_b !=\r\n         FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1) &&\r\n        (FLIGHT_HEXA_Hovering_B.rtPrevAction == FLIGHT_HEXA_Hovering_B.rtAction))\r\n    {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_P.Constant1_Value_o;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_B.Switch3;\r\n    }\r\n\r\n    // End of Switch: '<S161>/Switch'\r\n\r\n    // Saturate: '<S178>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_UpperSaturationLimit) {\r\n      // Saturate: '<S178>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_o =\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_UpperSaturationLimit;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.PIDController1_LowerSaturationLimit) {\r\n      // Saturate: '<S178>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_o =\r\n        FLIGHT_HEXA_Hovering_P.PIDController1_LowerSaturationLimit;\r\n    } else {\r\n      // Saturate: '<S178>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_o =\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0;\r\n    }\r\n\r\n    // End of Saturate: '<S178>/Saturation'\r\n\r\n    // RateLimiter: '<S73>/Rate Limiter1'\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_B.Gain2 -\r\n      FLIGHT_HEXA_Hovering_DW.PrevY_f;\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 >\r\n        FLIGHT_HEXA_Hovering_P.RateLimiter1_RisingLim *\r\n        FLIGHT_HEXA_Hovering_period) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_P.RateLimiter1_RisingLim *\r\n        FLIGHT_HEXA_Hovering_period + FLIGHT_HEXA_Hovering_DW.PrevY_f;\r\n    } else if (FLIGHT_HEXA_Hovering_B.Switch3 <\r\n               FLIGHT_HEXA_Hovering_P.RateLimiter1_FallingLim *\r\n               FLIGHT_HEXA_Hovering_period) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_P.RateLimiter1_FallingLim *\r\n        FLIGHT_HEXA_Hovering_period + FLIGHT_HEXA_Hovering_DW.PrevY_f;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 = FLIGHT_HEXA_Hovering_B.Gain2;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.PrevY_f = FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1;\r\n\r\n    // End of RateLimiter: '<S73>/Rate Limiter1'\r\n\r\n    // Saturate: '<S73>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 >\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_m) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_m;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 <\r\n               FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_l) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_l;\r\n    }\r\n\r\n    // Sum: '<S73>/Sum1' incorporates:\r\n    //   DataTypeConversion: '<S1>/Data Type Conversion2'\r\n    //   Gain: '<S328>/Proportional Gain'\r\n    //   Saturate: '<S73>/Saturation'\r\n    //   Sum: '<S73>/Sum3'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n      (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 -\r\n       FLIGHT_HEXA_Hovering_B.VectorConcatenate[2]) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController4_P -\r\n      FLIGHT_HEXA_Hovering_B.In1_l.xyz[0];\r\n\r\n    // Gain: '<S220>/Integral Gain'\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.PIDController2_I *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1;\r\n\r\n    // Gain: '<S226>/Filter Coefficient' incorporates:\r\n    //   DiscreteIntegrator: '<S218>/Filter'\r\n    //   Gain: '<S216>/Derivative Gain'\r\n    //   Sum: '<S218>/SumD'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Gain2 = (FLIGHT_HEXA_Hovering_P.PIDController2_D *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 -\r\n      FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_j) *\r\n      FLIGHT_HEXA_Hovering_P.PIDController2_N;\r\n\r\n    // Sum: '<S232>/Sum' incorporates:\r\n    //   DiscreteIntegrator: '<S223>/Integrator'\r\n    //   Gain: '<S228>/Proportional Gain'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n      (FLIGHT_HEXA_Hovering_P.PIDController2_P *\r\n       FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 +\r\n       FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_i) +\r\n      FLIGHT_HEXA_Hovering_B.Gain2;\r\n\r\n    // DeadZone: '<S215>/DeadZone' incorporates:\r\n    //   Saturate: '<S230>/Saturation'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.PIDController2_UpperSaturationLimit) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 -\r\n        FLIGHT_HEXA_Hovering_P.PIDController2_UpperSaturationLimit;\r\n\r\n      // Saturate: '<S230>/Saturation'\r\n      FLIGHT_HEXA_Hovering_B.Saturation_m =\r\n        FLIGHT_HEXA_Hovering_P.PIDController2_UpperSaturationLimit;\r\n    } else {\r\n      if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 >=\r\n          FLIGHT_HEXA_Hovering_P.PIDController2_LowerSaturationLimit) {\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 = 0.0;\r\n      } else {\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 -\r\n          FLIGHT_HEXA_Hovering_P.PIDController2_LowerSaturationLimit;\r\n      }\r\n\r\n      if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 <\r\n          FLIGHT_HEXA_Hovering_P.PIDController2_LowerSaturationLimit) {\r\n        // Saturate: '<S230>/Saturation'\r\n        FLIGHT_HEXA_Hovering_B.Saturation_m =\r\n          FLIGHT_HEXA_Hovering_P.PIDController2_LowerSaturationLimit;\r\n      } else {\r\n        // Saturate: '<S230>/Saturation'\r\n        FLIGHT_HEXA_Hovering_B.Saturation_m =\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0;\r\n      }\r\n    }\r\n\r\n    // End of DeadZone: '<S215>/DeadZone'\r\n\r\n    // Update for DiscreteIntegrator: '<S119>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_k +=\r\n      FLIGHT_HEXA_Hovering_P.Integrator_gainval * FLIGHT_HEXA_Hovering_B.Sum5;\r\n\r\n    // Update for DiscreteIntegrator: '<S114>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_e +=\r\n      FLIGHT_HEXA_Hovering_P.Filter_gainval * FLIGHT_HEXA_Hovering_B.Switch2;\r\n\r\n    // Update for DiscreteIntegrator: '<S171>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_kd +=\r\n      FLIGHT_HEXA_Hovering_P.Integrator_gainval_i *\r\n      FLIGHT_HEXA_Hovering_B.Gain_i;\r\n\r\n    // Update for DiscreteIntegrator: '<S166>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_ek +=\r\n      FLIGHT_HEXA_Hovering_P.Filter_gainval_p *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3;\r\n\r\n    // Switch: '<S213>/Switch1' incorporates:\r\n    //   Constant: '<S213>/Clamping_zero'\r\n    //   Constant: '<S213>/Constant'\r\n    //   Constant: '<S213>/Constant2'\r\n    //   RelationalOperator: '<S213>/fix for DT propagation issue'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_f) {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_jj;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtPrevAction =\r\n        FLIGHT_HEXA_Hovering_P.Constant2_Value_o;\r\n    }\r\n\r\n    // Switch: '<S213>/Switch2' incorporates:\r\n    //   Constant: '<S213>/Clamping_zero'\r\n    //   Constant: '<S213>/Constant3'\r\n    //   Constant: '<S213>/Constant4'\r\n    //   RelationalOperator: '<S213>/fix for DT propagation issue1'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.Switch3 >\r\n        FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_f) {\r\n      FLIGHT_HEXA_Hovering_B.rtAction = FLIGHT_HEXA_Hovering_P.Constant3_Value_l;\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.rtAction = FLIGHT_HEXA_Hovering_P.Constant4_Value_n;\r\n    }\r\n\r\n    // Switch: '<S213>/Switch' incorporates:\r\n    //   Constant: '<S213>/Clamping_zero'\r\n    //   Constant: '<S213>/Constant1'\r\n    //   Logic: '<S213>/AND3'\r\n    //   RelationalOperator: '<S213>/Equal1'\r\n    //   RelationalOperator: '<S213>/Relational Operator'\r\n    //   Switch: '<S213>/Switch1'\r\n    //   Switch: '<S213>/Switch2'\r\n\r\n    if ((FLIGHT_HEXA_Hovering_P.Clamping_zero_Value_f !=\r\n         FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1) &&\r\n        (FLIGHT_HEXA_Hovering_B.rtPrevAction == FLIGHT_HEXA_Hovering_B.rtAction))\r\n    {\r\n      FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.Constant1_Value_p;\r\n    }\r\n\r\n    // Update for DiscreteIntegrator: '<S223>/Integrator' incorporates:\r\n    //   Switch: '<S213>/Switch'\r\n\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_i +=\r\n      FLIGHT_HEXA_Hovering_P.Integrator_gainval_p *\r\n      FLIGHT_HEXA_Hovering_B.Switch3;\r\n\r\n    // Update for DiscreteIntegrator: '<S218>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_j +=\r\n      FLIGHT_HEXA_Hovering_P.Filter_gainval_k * FLIGHT_HEXA_Hovering_B.Gain2;\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S4>/Attitude controller'\r\n\r\n  // Gain: '<S3>/Gain'\r\n  FLIGHT_HEXA_Hovering_B.Gain2 = FLIGHT_HEXA_Hovering_P.Gain_Gain_kw *\r\n    FLIGHT_HEXA_Hovering_B.Saturation_m;\r\n\r\n  // Gain: '<S3>/Gain1'\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 =\r\n    FLIGHT_HEXA_Hovering_P.Gain1_Gain_b * FLIGHT_HEXA_Hovering_B.Saturation_o;\r\n\r\n  // Gain: '<S3>/Gain2'\r\n  FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n    FLIGHT_HEXA_Hovering_P.Gain2_Gain_du * FLIGHT_HEXA_Hovering_B.Saturation_l;\r\n\r\n  // Gain: '<S3>/Gain3'\r\n  FLIGHT_HEXA_Hovering_B.Sum *= FLIGHT_HEXA_Hovering_P.Gain3_Gain_o;\r\n\r\n  // MATLABSystem: '<S55>/Read Parameter13'\r\n  if (FLIGHT_HEXA_Hovering_DW.obj_b.SampleTime !=\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter13_SampleTime) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_b.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter13_SampleTime;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_b.MW_PARAMHANDLE, MW_INT32,\r\n     &FLIGHT_HEXA_Hovering_B.ParamStep_c);\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    FLIGHT_HEXA_Hovering_B.ParamStep_c = 0;\r\n  }\r\n\r\n  // RelationalOperator: '<S61>/Compare' incorporates:\r\n  //   Constant: '<S61>/Constant'\r\n\r\n  FLIGHT_HEXA_Hovering_B.Compare = (FLIGHT_HEXA_Hovering_B.In1_h.values[7] >=\r\n    FLIGHT_HEXA_Hovering_P.CompareToConstant_const_d);\r\n\r\n  // Switch: '<S54>/Switch' incorporates:\r\n  //   Constant: '<S54>/Constant'\r\n  //   MATLAB Function: '<S3>/MATLAB Function'\r\n  //   Product: '<S62>/Product'\r\n  //   Saturate: '<S62>/Saturation'\r\n  //   Switch: '<S55>/Switch'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.Compare_k) {\r\n    FLIGHT_HEXA_Hovering_B.Sum5 = FLIGHT_HEXA_Hovering_P.Constant_Value_bd;\r\n  } else {\r\n    if (FLIGHT_HEXA_Hovering_B.Compare) {\r\n      // Switch: '<S55>/Switch' incorporates:\r\n      //   DataTypeConversion: '<S55>/Data Type Conversion3'\r\n      //   MATLABSystem: '<S55>/Read Parameter13'\r\n      //\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_B.ParamStep_c;\r\n    } else {\r\n      // Switch: '<S55>/Switch' incorporates:\r\n      //   Constant: '<S55>/Constant'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_a;\r\n    }\r\n\r\n    // Gain: '<S62>/Gain' incorporates:\r\n    //   Switch: '<S55>/Switch'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *=\r\n      FLIGHT_HEXA_Hovering_P.Gain_Gain_mg;\r\n\r\n    // Saturate: '<S62>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_j) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_j;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_av) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_av;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.Sum5 = ((-FLIGHT_HEXA_Hovering_B.Gain2 -\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0) * FLIGHT_HEXA_Hovering_B.Sum /\r\n      3.0 + FLIGHT_HEXA_Hovering_B.Sum) * FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n  }\r\n\r\n  // End of Switch: '<S54>/Switch'\r\n\r\n  // MATLABSystem: '<S55>/Read Parameter1'\r\n  if (FLIGHT_HEXA_Hovering_DW.obj_a.SampleTime !=\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter1_SampleTime) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_a.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter1_SampleTime;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_a.MW_PARAMHANDLE, MW_INT32,\r\n     &FLIGHT_HEXA_Hovering_B.ParamStep_c);\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    FLIGHT_HEXA_Hovering_B.ParamStep_c = 0;\r\n  }\r\n\r\n  // Switch: '<S54>/Switch1' incorporates:\r\n  //   Constant: '<S54>/Constant1'\r\n  //   MATLAB Function: '<S3>/MATLAB Function'\r\n  //   Product: '<S63>/Product'\r\n  //   Saturate: '<S63>/Saturation'\r\n  //   Switch: '<S55>/Switch1'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.Compare_k) {\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = FLIGHT_HEXA_Hovering_P.Constant1_Value;\r\n  } else {\r\n    if (FLIGHT_HEXA_Hovering_B.Compare) {\r\n      // Switch: '<S55>/Switch1' incorporates:\r\n      //   DataTypeConversion: '<S55>/Data Type Conversion2'\r\n      //   MATLABSystem: '<S55>/Read Parameter1'\r\n      //\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_B.ParamStep_c;\r\n    } else {\r\n      // Switch: '<S55>/Switch1' incorporates:\r\n      //   Constant: '<S55>/Constant1'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Constant1_Value_g;\r\n    }\r\n\r\n    // Gain: '<S63>/Gain' incorporates:\r\n    //   Switch: '<S55>/Switch1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *= FLIGHT_HEXA_Hovering_P.Gain_Gain_m;\r\n\r\n    // Saturate: '<S63>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.Saturation_LowerSat) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_LowerSat;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.Gain_i = ((FLIGHT_HEXA_Hovering_B.Gain2 +\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0) * FLIGHT_HEXA_Hovering_B.Sum /\r\n      3.0 + FLIGHT_HEXA_Hovering_B.Sum) * FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n  }\r\n\r\n  // End of Switch: '<S54>/Switch1'\r\n\r\n  // MATLABSystem: '<S55>/Read Parameter2'\r\n  if (FLIGHT_HEXA_Hovering_DW.obj_m.SampleTime !=\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter2_SampleTime) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_m.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter2_SampleTime;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_m.MW_PARAMHANDLE, MW_INT32,\r\n     &FLIGHT_HEXA_Hovering_B.ParamStep_c);\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    FLIGHT_HEXA_Hovering_B.ParamStep_c = 0;\r\n  }\r\n\r\n  // Switch: '<S54>/Switch2' incorporates:\r\n  //   Constant: '<S54>/Constant2'\r\n  //   MATLAB Function: '<S3>/MATLAB Function'\r\n  //   Product: '<S64>/Product'\r\n  //   Saturate: '<S64>/Saturation'\r\n  //   Switch: '<S55>/Switch2'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.Compare_k) {\r\n    FLIGHT_HEXA_Hovering_B.Switch2 = FLIGHT_HEXA_Hovering_P.Constant2_Value;\r\n  } else {\r\n    if (FLIGHT_HEXA_Hovering_B.Compare) {\r\n      // Switch: '<S55>/Switch2' incorporates:\r\n      //   DataTypeConversion: '<S55>/Data Type Conversion'\r\n      //   MATLABSystem: '<S55>/Read Parameter2'\r\n      //\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_B.ParamStep_c;\r\n    } else {\r\n      // Switch: '<S55>/Switch2' incorporates:\r\n      //   Constant: '<S55>/Constant2'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Constant2_Value_p;\r\n    }\r\n\r\n    // Gain: '<S64>/Gain' incorporates:\r\n    //   Switch: '<S55>/Switch2'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *= FLIGHT_HEXA_Hovering_P.Gain_Gain_k;\r\n\r\n    // Saturate: '<S64>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_c) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_c;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_p) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_p;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch2 = (((FLIGHT_HEXA_Hovering_B.Gain2 / 2.0 +\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3) -\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0) * FLIGHT_HEXA_Hovering_B.Sum /\r\n      3.0 + FLIGHT_HEXA_Hovering_B.Sum) * FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n  }\r\n\r\n  // End of Switch: '<S54>/Switch2'\r\n\r\n  // MATLABSystem: '<S55>/Read Parameter3'\r\n  if (FLIGHT_HEXA_Hovering_DW.obj_i.SampleTime !=\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter3_SampleTime) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_i.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter3_SampleTime;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_i.MW_PARAMHANDLE, MW_INT32,\r\n     &FLIGHT_HEXA_Hovering_B.ParamStep_c);\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    FLIGHT_HEXA_Hovering_B.ParamStep_c = 0;\r\n  }\r\n\r\n  // Switch: '<S54>/Switch3' incorporates:\r\n  //   Constant: '<S54>/Constant3'\r\n  //   MATLAB Function: '<S3>/MATLAB Function'\r\n  //   Product: '<S65>/Product'\r\n  //   Saturate: '<S65>/Saturation'\r\n  //   Switch: '<S55>/Switch3'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.Compare_k) {\r\n    FLIGHT_HEXA_Hovering_B.Switch3 = FLIGHT_HEXA_Hovering_P.Constant3_Value;\r\n  } else {\r\n    if (FLIGHT_HEXA_Hovering_B.Compare) {\r\n      // Switch: '<S55>/Switch3' incorporates:\r\n      //   DataTypeConversion: '<S55>/Data Type Conversion4'\r\n      //   MATLABSystem: '<S55>/Read Parameter3'\r\n      //\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_B.ParamStep_c;\r\n    } else {\r\n      // Switch: '<S55>/Switch3' incorporates:\r\n      //   Constant: '<S55>/Constant3'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Constant3_Value_o;\r\n    }\r\n\r\n    // Gain: '<S65>/Gain' incorporates:\r\n    //   Switch: '<S55>/Switch3'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *=\r\n      FLIGHT_HEXA_Hovering_P.Gain_Gain_lf;\r\n\r\n    // Saturate: '<S65>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_f) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_f;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_c) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_c;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.Switch3 =\r\n      (((-FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 -\r\n         FLIGHT_HEXA_Hovering_B.Gain2 / 2.0) +\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0) * FLIGHT_HEXA_Hovering_B.Sum\r\n       / 3.0 + FLIGHT_HEXA_Hovering_B.Sum) *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n  }\r\n\r\n  // End of Switch: '<S54>/Switch3'\r\n\r\n  // MATLABSystem: '<S55>/Read Parameter4'\r\n  if (FLIGHT_HEXA_Hovering_DW.obj_d.SampleTime !=\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter4_SampleTime) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_d.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter4_SampleTime;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_d.MW_PARAMHANDLE, MW_INT32,\r\n     &FLIGHT_HEXA_Hovering_B.ParamStep_c);\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    FLIGHT_HEXA_Hovering_B.ParamStep_c = 0;\r\n  }\r\n\r\n  // Switch: '<S54>/Switch4' incorporates:\r\n  //   Constant: '<S54>/Constant4'\r\n  //   MATLAB Function: '<S3>/MATLAB Function'\r\n  //   Product: '<S66>/Product'\r\n  //   Saturate: '<S66>/Saturation'\r\n  //   Switch: '<S55>/Switch4'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.Compare_k) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n      FLIGHT_HEXA_Hovering_P.Constant4_Value;\r\n  } else {\r\n    if (FLIGHT_HEXA_Hovering_B.Compare) {\r\n      // Switch: '<S55>/Switch4' incorporates:\r\n      //   DataTypeConversion: '<S55>/Data Type Conversion1'\r\n      //   MATLABSystem: '<S55>/Read Parameter4'\r\n      //\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_B.ParamStep_c;\r\n    } else {\r\n      // Switch: '<S55>/Switch4' incorporates:\r\n      //   Constant: '<S55>/Constant4'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Constant4_Value_h;\r\n    }\r\n\r\n    // Gain: '<S66>/Gain' incorporates:\r\n    //   Switch: '<S55>/Switch4'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *=\r\n      FLIGHT_HEXA_Hovering_P.Gain_Gain_mp;\r\n\r\n    // Saturate: '<S66>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_o) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_o;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_a) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_a;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 =\r\n      (((FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 -\r\n         FLIGHT_HEXA_Hovering_B.Gain2 / 2.0) +\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0) * FLIGHT_HEXA_Hovering_B.Sum\r\n       / 3.0 + FLIGHT_HEXA_Hovering_B.Sum) *\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n  }\r\n\r\n  // End of Switch: '<S54>/Switch4'\r\n\r\n  // MATLABSystem: '<S55>/Read Parameter5'\r\n  if (FLIGHT_HEXA_Hovering_DW.obj_c.SampleTime !=\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter5_SampleTime) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_c.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter5_SampleTime;\r\n  }\r\n\r\n  FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n    (FLIGHT_HEXA_Hovering_DW.obj_c.MW_PARAMHANDLE, MW_INT32,\r\n     &FLIGHT_HEXA_Hovering_B.ParamStep_c);\r\n  if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n    FLIGHT_HEXA_Hovering_B.ParamStep_c = 0;\r\n  }\r\n\r\n  // Switch: '<S54>/Switch5' incorporates:\r\n  //   Constant: '<S54>/Constant5'\r\n  //   MATLAB Function: '<S3>/MATLAB Function'\r\n  //   Product: '<S67>/Product'\r\n  //   Saturate: '<S67>/Saturation'\r\n  //   Switch: '<S55>/Switch5'\r\n\r\n  if (FLIGHT_HEXA_Hovering_B.Compare_k) {\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n      FLIGHT_HEXA_Hovering_P.Constant5_Value;\r\n  } else {\r\n    if (FLIGHT_HEXA_Hovering_B.Compare) {\r\n      // Switch: '<S55>/Switch5' incorporates:\r\n      //   DataTypeConversion: '<S55>/Data Type Conversion5'\r\n      //   MATLABSystem: '<S55>/Read Parameter5'\r\n      //\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_B.ParamStep_c;\r\n    } else {\r\n      // Switch: '<S55>/Switch5' incorporates:\r\n      //   Constant: '<S55>/Constant5'\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Constant5_Value_e;\r\n    }\r\n\r\n    // Gain: '<S67>/Gain' incorporates:\r\n    //   Switch: '<S55>/Switch5'\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 *= FLIGHT_HEXA_Hovering_P.Gain_Gain_g;\r\n\r\n    // Saturate: '<S67>/Saturation'\r\n    if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 >\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_fq) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_UpperSat_fq;\r\n    } else if (FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 <\r\n               FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_e) {\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n        FLIGHT_HEXA_Hovering_P.Saturation_LowerSat_e;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = (((FLIGHT_HEXA_Hovering_B.Gain2\r\n      / 2.0 - FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3) -\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0) * FLIGHT_HEXA_Hovering_B.Sum /\r\n      3.0 + FLIGHT_HEXA_Hovering_B.Sum) * FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0;\r\n  }\r\n\r\n  // End of Switch: '<S54>/Switch5'\r\n\r\n  // BusAssignment: '<S59>/Bus Assignment' incorporates:\r\n  //   Constant: '<S71>/Constant'\r\n\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment = FLIGHT_HEXA_Hovering_P.Constant_Value_f;\r\n\r\n  // BusAssignment: '<S59>/Bus Assignment' incorporates:\r\n  //   Constant: '<S59>/Constant'\r\n  //   DataTypeConversion: '<S59>/Data Type Conversion'\r\n\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[0] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_B.Sum5);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[1] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_B.Gain_i);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[2] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_B.Switch2);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[3] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_B.Switch3);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[4] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[5] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[6] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_P.Constant_Value_olz);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[7] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_P.Constant_Value_olz);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[8] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_P.Constant_Value_olz);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[9] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_P.Constant_Value_olz);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[10] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_P.Constant_Value_olz);\r\n  FLIGHT_HEXA_Hovering_B.BusAssignment.control[11] = static_cast<real32_T>\r\n    (FLIGHT_HEXA_Hovering_P.Constant_Value_olz);\r\n\r\n  // MATLABSystem: '<S72>/SinkBlock' incorporates:\r\n  //   BusAssignment: '<S59>/Bus Assignment'\r\n\r\n  uORB_write_step(FLIGHT_HEXA_Hovering_DW.obj_m4.orbMetadataObj,\r\n                  &FLIGHT_HEXA_Hovering_DW.obj_m4.orbAdvertiseObj,\r\n                  &FLIGHT_HEXA_Hovering_B.BusAssignment);\r\n\r\n  // Outputs for Enabled SubSystem: '<S19>/Send waypoints to OBC' incorporates:\r\n  //   EnablePort: '<S36>/Enable'\r\n\r\n  // Start for MATLABSystem: '<S19>/Read Parameter'\r\n  if (FLIGHT_HEXA_Hovering_B.ParamStep_k > 0) {\r\n    // BusAssignment: '<S36>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment'\r\n    //   Constant: '<S46>/Constant'\r\n    //   SignalConversion generated from: '<S42>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0] =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value.waypoints[0];\r\n\r\n    // SignalConversion generated from: '<S42>/Matrix Concatenate1'\r\n    FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.lat;\r\n\r\n    // SignalConversion generated from: '<S42>/Matrix Concatenate1'\r\n    FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.lon;\r\n\r\n    // DataTypeConversion: '<S42>/Data Type Conversion'\r\n    FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.alt;\r\n\r\n    // SignalConversion generated from: '<S36>/Matrix Concatenate1'\r\n    FLIGHT_HEXA_Hovering_B.VectorConcatenate[0] =\r\n      FLIGHT_HEXA_Hovering_B.In1_f.lat;\r\n\r\n    // SignalConversion generated from: '<S36>/Matrix Concatenate1'\r\n    FLIGHT_HEXA_Hovering_B.VectorConcatenate[1] =\r\n      FLIGHT_HEXA_Hovering_B.In1_f.lon;\r\n\r\n    // DataTypeConversion: '<S36>/Data Type Conversion'\r\n    FLIGHT_HEXA_Hovering_B.VectorConcatenate[2] =\r\n      FLIGHT_HEXA_Hovering_B.In1_f.alt;\r\n    FLIGHT_HEXA_Hovering_MATLABSystem(FLIGHT_HEXA_Hovering_B.DataTypeConversion2,\r\n      FLIGHT_HEXA_Hovering_B.VectorConcatenate,\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.valid,\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.type,\r\n      &FLIGHT_HEXA_Hovering_B.MATLABSystem);\r\n\r\n    // SignalConversion generated from: '<S48>/Matrix Concatenate' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S42>/Bus Assignment1'\r\n    //   MATLABSystem: '<S42>/MATLAB System'\r\n    //   SignalConversion generated from: '<S42>/MATLAB System'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].position[0] =\r\n      FLIGHT_HEXA_Hovering_B.MATLABSystem.MATLABSystem[0];\r\n\r\n    // SignalConversion generated from: '<S48>/Matrix Concatenate' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S42>/Bus Assignment1'\r\n    //   MATLABSystem: '<S42>/MATLAB System'\r\n    //   SignalConversion generated from: '<S42>/MATLAB System'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].position[1] =\r\n      FLIGHT_HEXA_Hovering_B.MATLABSystem.MATLABSystem[1];\r\n\r\n    // If: '<S48>/If' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S42>/Bus Assignment1'\r\n    //   Constant: '<S50>/Constant'\r\n    //   Constant: '<S50>/Constant1'\r\n    //   Constant: '<S51>/Constant'\r\n    //   Constant: '<S51>/Constant1'\r\n\r\n    if (FLIGHT_HEXA_Hovering_B.In1_p.current.type == 4) {\r\n      // Outputs for IfAction SubSystem: '<S48>/If Action Subsystem2' incorporates:\r\n      //   ActionPort: '<S51>/Action Port'\r\n\r\n      // MATLABSystem: '<S51>/Read Parameter' incorporates:\r\n      //   BusAssignment: '<S36>/Bus Assignment1'\r\n      //   BusAssignment: '<S42>/Bus Assignment1'\r\n      //   SignalConversion generated from: '<S51>/Read Parameter'\r\n\r\n      if (FLIGHT_HEXA_Hovering_DW.obj_g.SampleTime !=\r\n          FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime_c) {\r\n        FLIGHT_HEXA_Hovering_DW.obj_g.SampleTime =\r\n          FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime_c;\r\n      }\r\n\r\n      FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n        (FLIGHT_HEXA_Hovering_DW.obj_g.MW_PARAMHANDLE, MW_SINGLE,\r\n         &FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[2]);\r\n      if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n        FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[2] = 0.0F;\r\n      }\r\n\r\n      // End of MATLABSystem: '<S51>/Read Parameter'\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[0] =\r\n        FLIGHT_HEXA_Hovering_P.Constant1_Value_d[0];\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[1] =\r\n        FLIGHT_HEXA_Hovering_P.Constant1_Value_d[1];\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].position[2] =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_f2;\r\n\r\n      // End of Outputs for SubSystem: '<S48>/If Action Subsystem2'\r\n    } else if (FLIGHT_HEXA_Hovering_B.In1_p.current.type == 3) {\r\n      // Outputs for IfAction SubSystem: '<S48>/If Action Subsystem1' incorporates:\r\n      //   ActionPort: '<S50>/Action Port'\r\n\r\n      // MATLABSystem: '<S50>/Read Parameter'\r\n      if (FLIGHT_HEXA_Hovering_DW.obj_b4.SampleTime !=\r\n          FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime_g) {\r\n        FLIGHT_HEXA_Hovering_DW.obj_b4.SampleTime =\r\n          FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime_g;\r\n      }\r\n\r\n      FLIGHT_HEXA_Hovering_B.OR_g = MW_Param_Step\r\n        (FLIGHT_HEXA_Hovering_DW.obj_b4.MW_PARAMHANDLE, MW_SINGLE,\r\n         &FLIGHT_HEXA_Hovering_B.ParamStep);\r\n      if (FLIGHT_HEXA_Hovering_B.OR_g) {\r\n        FLIGHT_HEXA_Hovering_B.ParamStep = 0.0F;\r\n      }\r\n\r\n      // Gain: '<S50>/Gain' incorporates:\r\n      //   BusAssignment: '<S36>/Bus Assignment1'\r\n      //   BusAssignment: '<S42>/Bus Assignment1'\r\n      //   MATLABSystem: '<S50>/Read Parameter'\r\n      //\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[2] =\r\n        FLIGHT_HEXA_Hovering_P.Gain_Gain_h * FLIGHT_HEXA_Hovering_B.ParamStep;\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[0] =\r\n        FLIGHT_HEXA_Hovering_P.Constant1_Value_k4[0];\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[1] =\r\n        FLIGHT_HEXA_Hovering_P.Constant1_Value_k4[1];\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].position[2] =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value_l4;\r\n\r\n      // End of Outputs for SubSystem: '<S48>/If Action Subsystem1'\r\n    } else {\r\n      // Outputs for IfAction SubSystem: '<S48>/If Action Subsystem' incorporates:\r\n      //   ActionPort: '<S49>/Action Port'\r\n\r\n      // SignalConversion generated from: '<S49>/In1' incorporates:\r\n      //   BusAssignment: '<S36>/Bus Assignment1'\r\n      //   BusAssignment: '<S42>/Bus Assignment1'\r\n      //   MATLABSystem: '<S42>/MATLAB System'\r\n      //   SignalConversion generated from: '<S42>/MATLAB System'\r\n\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].position[2] =\r\n        FLIGHT_HEXA_Hovering_B.MATLABSystem.MATLABSystem[2];\r\n\r\n      // BusAssignment: '<S42>/Bus Assignment1' incorporates:\r\n      //   BusAssignment: '<S36>/Bus Assignment1'\r\n      //   SignalConversion generated from: '<S48>/Matrix Concatenate1'\r\n      //   SignalConversion generated from: '<S49>/In2'\r\n      //\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[0] =\r\n        FLIGHT_HEXA_Hovering_B.In1_p.current.vx;\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[1] =\r\n        FLIGHT_HEXA_Hovering_B.In1_p.current.vy;\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].velocity[2] =\r\n        FLIGHT_HEXA_Hovering_B.In1_p.current.vz;\r\n\r\n      // End of Outputs for SubSystem: '<S48>/If Action Subsystem'\r\n    }\r\n\r\n    // End of If: '<S48>/If'\r\n\r\n    // BusAssignment: '<S42>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   Constant: '<S42>/Constant5'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].timestamp =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.timestamp;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].type =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.type;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].yaw =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.yaw;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].yaw_speed =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.yawspeed;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[0].point_valid =\r\n      FLIGHT_HEXA_Hovering_P.Constant5_Value_j;\r\n\r\n    // BusAssignment: '<S36>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment'\r\n    //   Constant: '<S46>/Constant'\r\n    //   SignalConversion generated from: '<S43>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1] =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value.waypoints[1];\r\n\r\n    // SignalConversion generated from: '<S43>/Matrix Concatenate' incorporates:\r\n    //   SignalConversion generated from: '<S42>/Matrix Concatenate1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.DataTypeConversion2[0] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.lat;\r\n\r\n    // SignalConversion generated from: '<S43>/Matrix Concatenate' incorporates:\r\n    //   SignalConversion generated from: '<S42>/Matrix Concatenate1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.DataTypeConversion2[1] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.lon;\r\n\r\n    // DataTypeConversion: '<S43>/Data Type Conversion' incorporates:\r\n    //   DataTypeConversion: '<S42>/Data Type Conversion'\r\n\r\n    FLIGHT_HEXA_Hovering_B.DataTypeConversion2[2] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.alt;\r\n    FLIGHT_HEXA_Hovering_MATLABSystem(FLIGHT_HEXA_Hovering_B.DataTypeConversion2,\r\n      FLIGHT_HEXA_Hovering_B.VectorConcatenate,\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.valid,\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.type,\r\n      &FLIGHT_HEXA_Hovering_B.MATLABSystem_b);\r\n\r\n    // SignalConversion generated from: '<S43>/Matrix Concatenate1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S43>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].velocity[0] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.vx;\r\n\r\n    // SignalConversion generated from: '<S43>/Matrix Concatenate1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S43>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].velocity[1] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.vy;\r\n\r\n    // SignalConversion generated from: '<S43>/Matrix Concatenate1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S43>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].velocity[2] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.vz;\r\n\r\n    // BusAssignment: '<S43>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S42>/Bus Assignment1'\r\n    //   Constant: '<S43>/Constant5'\r\n    //   MATLABSystem: '<S43>/MATLAB System'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].timestamp =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.timestamp;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].position[0] =\r\n      FLIGHT_HEXA_Hovering_B.MATLABSystem_b.MATLABSystem[0];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].position[1] =\r\n      FLIGHT_HEXA_Hovering_B.MATLABSystem_b.MATLABSystem[1];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].position[2] =\r\n      FLIGHT_HEXA_Hovering_B.MATLABSystem_b.MATLABSystem[2];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].yaw =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.yaw;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].yaw_speed =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.yawspeed;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].point_valid =\r\n      FLIGHT_HEXA_Hovering_P.Constant5_Value_k;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[1].type =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.current.type;\r\n\r\n    // BusAssignment: '<S36>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment'\r\n    //   Constant: '<S46>/Constant'\r\n    //   SignalConversion generated from: '<S45>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2] =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value.waypoints[2];\r\n\r\n    // MATLABSystem: '<S45>/MATLAB System' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   DataTypeConversion: '<S36>/Data Type Conversion'\r\n    //   DataTypeConversion: '<S45>/Data Type Conversion'\r\n    //   SignalConversion generated from: '<S36>/Matrix Concatenate1'\r\n    //   SignalConversion generated from: '<S45>/Matrix Concatenate'\r\n    //\r\n    if (FLIGHT_HEXA_Hovering_B.In1_p.next.valid) {\r\n      FLIGHT_HEXA_Hovering_B.Sum = FLIGHT_HEXA_Hovering_B.In1_p.next.lat -\r\n        FLIGHT_HEXA_Hovering_B.In1_f.lat;\r\n      FLIGHT_HEXA_Hovering_B.Gain2 = FLIGHT_HEXA_Hovering_B.In1_p.next.lon -\r\n        FLIGHT_HEXA_Hovering_B.In1_f.lon;\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 = fabs\r\n        (FLIGHT_HEXA_Hovering_B.Sum);\r\n      if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 > 180.0) {\r\n        if (rtIsNaN(FLIGHT_HEXA_Hovering_B.Sum + 180.0) || rtIsInf\r\n            (FLIGHT_HEXA_Hovering_B.Sum + 180.0)) {\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = (rtNaN);\r\n        } else if (FLIGHT_HEXA_Hovering_B.Sum + 180.0 == 0.0) {\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = 0.0;\r\n        } else {\r\n          FLIGHT_HEXA_Hovering_B.Switch3 = fmod(FLIGHT_HEXA_Hovering_B.Sum +\r\n            180.0, 360.0);\r\n          if (FLIGHT_HEXA_Hovering_B.Switch3 == 0.0) {\r\n            FLIGHT_HEXA_Hovering_B.Switch3 = 0.0;\r\n          } else if (FLIGHT_HEXA_Hovering_B.Sum + 180.0 < 0.0) {\r\n            FLIGHT_HEXA_Hovering_B.Switch3 += 360.0;\r\n          }\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.Sum = FLIGHT_HEXA_Hovering_B.Sum * 0.0 +\r\n          (FLIGHT_HEXA_Hovering_B.Switch3 - 180.0);\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 = fabs\r\n          (FLIGHT_HEXA_Hovering_B.Sum);\r\n      }\r\n\r\n      if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 > 90.0) {\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 = fabs\r\n          (FLIGHT_HEXA_Hovering_B.Sum);\r\n        FLIGHT_HEXA_Hovering_B.OR_g =\r\n          (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 > 90.0);\r\n        FLIGHT_HEXA_Hovering_B.Gain2 += 180.0;\r\n        FLIGHT_HEXA_Hovering_B.Switch2 = FLIGHT_HEXA_Hovering_B.Sum *\r\n          static_cast<real_T>(FLIGHT_HEXA_Hovering_B.OR_g);\r\n        if (rtIsNaN(FLIGHT_HEXA_Hovering_B.Switch2)) {\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = (rtNaN);\r\n        } else if (FLIGHT_HEXA_Hovering_B.Switch2 < 0.0) {\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = -1.0;\r\n        } else {\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 =\r\n            (FLIGHT_HEXA_Hovering_B.Switch2 > 0.0);\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.Sum = (90.0 -\r\n          (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 * static_cast<real_T>\r\n           (FLIGHT_HEXA_Hovering_B.OR_g) - 90.0)) *\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 * static_cast<real_T>\r\n          (FLIGHT_HEXA_Hovering_B.OR_g) + FLIGHT_HEXA_Hovering_B.Sum *\r\n          static_cast<real_T>(!FLIGHT_HEXA_Hovering_B.OR_g);\r\n      }\r\n\r\n      if ((FLIGHT_HEXA_Hovering_B.Gain2 > 180.0) ||\r\n          (FLIGHT_HEXA_Hovering_B.Gain2 < -180.0)) {\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 =\r\n          FLIGHT_HEXA_Hovering_rt_remd_snf(FLIGHT_HEXA_Hovering_B.Gain2, 360.0);\r\n        FLIGHT_HEXA_Hovering_B.Switch2 =\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 / 180.0;\r\n        if (FLIGHT_HEXA_Hovering_B.Switch2 < 0.0) {\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = ceil\r\n            (FLIGHT_HEXA_Hovering_B.Switch2);\r\n        } else {\r\n          FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = floor\r\n            (FLIGHT_HEXA_Hovering_B.Switch2);\r\n        }\r\n\r\n        FLIGHT_HEXA_Hovering_B.Gain2 =\r\n          (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 - 360.0 *\r\n           FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0) +\r\n          FLIGHT_HEXA_Hovering_B.Gain2 * 0.0;\r\n      }\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 = FLIGHT_HEXA_Hovering_sind_d\r\n        (FLIGHT_HEXA_Hovering_B.In1_f.lat);\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 = 6.378137E+6 / sqrt(1.0 -\r\n        0.0066943799901413165 * FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 *\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1);\r\n      if (rtIsInf(FLIGHT_HEXA_Hovering_B.In1_f.lat) || rtIsNaN\r\n          (FLIGHT_HEXA_Hovering_B.In1_f.lat)) {\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = (rtNaN);\r\n      } else {\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n          FLIGHT_HEXA_Hovering_rt_remd_snf(FLIGHT_HEXA_Hovering_B.In1_f.lat,\r\n          360.0);\r\n        FLIGHT_HEXA_Hovering_B.Switch2 = fabs\r\n          (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0);\r\n        if (FLIGHT_HEXA_Hovering_B.Switch2 > 180.0) {\r\n          if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 > 0.0) {\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 -= 360.0;\r\n          } else {\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 += 360.0;\r\n          }\r\n\r\n          FLIGHT_HEXA_Hovering_B.Switch2 = fabs\r\n            (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0);\r\n        }\r\n\r\n        if (FLIGHT_HEXA_Hovering_B.Switch2 <= 45.0) {\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = cos(0.017453292519943295 *\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0);\r\n        } else if (FLIGHT_HEXA_Hovering_B.Switch2 <= 135.0) {\r\n          if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 > 0.0) {\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = -sin\r\n              ((FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 - 90.0) *\r\n               0.017453292519943295);\r\n          } else {\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = sin\r\n              ((FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 + 90.0) *\r\n               0.017453292519943295);\r\n          }\r\n        } else {\r\n          if (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 > 0.0) {\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n              (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 - 180.0) *\r\n              0.017453292519943295;\r\n          } else {\r\n            FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 =\r\n              (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 + 180.0) *\r\n              0.017453292519943295;\r\n          }\r\n\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = -cos\r\n            (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0);\r\n        }\r\n      }\r\n\r\n      FLIGHT_HEXA_Hovering_B.Switch2 = FLIGHT_HEXA_Hovering_B.Sum /\r\n        (FLIGHT_HEXA_Hovering_rt_atan2d_snf(1.0, 0.99330562000985867 / (1.0 -\r\n           0.0066943799901413165 * FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1 *\r\n           FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_1) *\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3) * 57.295779513082323);\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0 = FLIGHT_HEXA_Hovering_B.Gain2 /\r\n        (FLIGHT_HEXA_Hovering_rt_atan2d_snf(1.0,\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 *\r\n          FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0) * 57.295779513082323);\r\n      FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3 = -static_cast<real_T>\r\n        (FLIGHT_HEXA_Hovering_B.In1_p.next.alt) +\r\n        FLIGHT_HEXA_Hovering_B.In1_f.alt;\r\n      FLIGHT_HEXA_Hovering_B.distinctWptsIdx[0] = rtIsNaN\r\n        (FLIGHT_HEXA_Hovering_B.Switch2);\r\n      FLIGHT_HEXA_Hovering_B.distinctWptsIdx[1] = rtIsNaN\r\n        (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0);\r\n      FLIGHT_HEXA_Hovering_B.distinctWptsIdx[2] = rtIsNaN\r\n        (FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3);\r\n      FLIGHT_HEXA_Hovering_B.Compare_k = false;\r\n      FLIGHT_HEXA_Hovering_B.iy = 0;\r\n      exitg1 = false;\r\n      while ((!exitg1) && (FLIGHT_HEXA_Hovering_B.iy < 3)) {\r\n        if (FLIGHT_HEXA_Hovering_B.distinctWptsIdx[FLIGHT_HEXA_Hovering_B.iy]) {\r\n          FLIGHT_HEXA_Hovering_B.Compare_k = true;\r\n          exitg1 = true;\r\n        } else {\r\n          FLIGHT_HEXA_Hovering_B.iy++;\r\n        }\r\n      }\r\n\r\n      FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 = 0.0 / static_cast<real_T>\r\n        (!FLIGHT_HEXA_Hovering_B.Compare_k);\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].position[0] =\r\n        static_cast<real32_T>(FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 +\r\n        FLIGHT_HEXA_Hovering_B.Switch2);\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].position[1] =\r\n        static_cast<real32_T>(FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 +\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_0);\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].position[2] =\r\n        static_cast<real32_T>(FLIGHT_HEXA_Hovering_B.rtb_Merge_idx_0 +\r\n        FLIGHT_HEXA_Hovering_B.rtb_Switch_aw_idx_3);\r\n    } else {\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].position[0] = 0.0F;\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].position[1] = 0.0F;\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].position[2] = 0.0F;\r\n    }\r\n\r\n    // End of MATLABSystem: '<S45>/MATLAB System'\r\n\r\n    // SignalConversion generated from: '<S45>/Matrix Concatenate1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S45>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].velocity[0] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.next.vx;\r\n\r\n    // SignalConversion generated from: '<S45>/Matrix Concatenate1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S45>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].velocity[1] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.next.vy;\r\n\r\n    // SignalConversion generated from: '<S45>/Matrix Concatenate1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   BusAssignment: '<S45>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].velocity[2] =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.next.vz;\r\n\r\n    // BusAssignment: '<S45>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n    //   Constant: '<S45>/Constant5'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].timestamp =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.next.timestamp;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].yaw =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.next.yaw;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].yaw_speed =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.next.yawspeed;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].point_valid =\r\n      FLIGHT_HEXA_Hovering_P.Constant5_Value_h;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[2].type =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.next.type;\r\n\r\n    // SignalConversion generated from: '<S44>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment'\r\n    //   BusAssignment: '<S44>/Bus Assignment1'\r\n    //   Constant: '<S46>/Constant'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value.waypoints[0];\r\n\r\n    // BusAssignment: '<S44>/Bus Assignment1' incorporates:\r\n    //   Constant: '<S44>/Constant'\r\n    //   Constant: '<S44>/Constant1'\r\n    //   Constant: '<S44>/Constant2'\r\n    //   Constant: '<S44>/Constant3'\r\n    //   Constant: '<S44>/Constant4'\r\n    //   Constant: '<S44>/Constant5'\r\n    //   Constant: '<S44>/Constant6'\r\n    //   Constant: '<S44>/Constant7'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.timestamp =\r\n      FLIGHT_HEXA_Hovering_P.Constant7_Value;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.yaw =\r\n      FLIGHT_HEXA_Hovering_P.Constant3_Value_a;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.yaw_speed =\r\n      FLIGHT_HEXA_Hovering_P.Constant4_Value_g;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.position[0] =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_fh[0];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.velocity[0] =\r\n      FLIGHT_HEXA_Hovering_P.Constant1_Value_hv[0];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.acceleration[0] =\r\n      FLIGHT_HEXA_Hovering_P.Constant2_Value_f[0];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.position[1] =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_fh[1];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.velocity[1] =\r\n      FLIGHT_HEXA_Hovering_P.Constant1_Value_hv[1];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.acceleration[1] =\r\n      FLIGHT_HEXA_Hovering_P.Constant2_Value_f[1];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.position[2] =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_fh[2];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.velocity[2] =\r\n      FLIGHT_HEXA_Hovering_P.Constant1_Value_hv[2];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.acceleration[2] =\r\n      FLIGHT_HEXA_Hovering_P.Constant2_Value_f[2];\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.point_valid =\r\n      FLIGHT_HEXA_Hovering_P.Constant5_Value_l;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1_f.type =\r\n      FLIGHT_HEXA_Hovering_P.Constant6_Value;\r\n\r\n    // BusAssignment: '<S36>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment'\r\n    //   Constant: '<S36>/Constant'\r\n    //   Constant: '<S46>/Constant'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.timestamp =\r\n      FLIGHT_HEXA_Hovering_B.In1_p.timestamp;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.type =\r\n      FLIGHT_HEXA_Hovering_P.Constant_Value_fm;\r\n    for (FLIGHT_HEXA_Hovering_B.i1 = 0; FLIGHT_HEXA_Hovering_B.i1 < 7;\r\n         FLIGHT_HEXA_Hovering_B.i1++) {\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1._padding0[FLIGHT_HEXA_Hovering_B.i1]\r\n        =\r\n        FLIGHT_HEXA_Hovering_P.Constant_Value._padding0[FLIGHT_HEXA_Hovering_B.i1];\r\n    }\r\n\r\n    // BusAssignment: '<S36>/Bus Assignment1' incorporates:\r\n    //   BusAssignment: '<S44>/Bus Assignment1'\r\n    //   Concatenate: '<S36>/Matrix Concatenate'\r\n\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[3] =\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1_f;\r\n    FLIGHT_HEXA_Hovering_B.BusAssignment1.waypoints[4] =\r\n      FLIGHT_HEXA_Hovering_B.BusAssignment1_f;\r\n\r\n    // MATLABSystem: '<S47>/SinkBlock' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n\r\n    uORB_write_step(FLIGHT_HEXA_Hovering_DW.obj_mc.orbMetadataObj,\r\n                    &FLIGHT_HEXA_Hovering_DW.obj_mc.orbAdvertiseObj,\r\n                    &FLIGHT_HEXA_Hovering_B.BusAssignment1);\r\n  }\r\n\r\n  // End of Outputs for SubSystem: '<S19>/Send waypoints to OBC'\r\n  FLIGHT_HEXA_Hovering_SourceBlock(&FLIGHT_HEXA_Hovering_B.SourceBlock_h,\r\n    &FLIGHT_HEXA_Hovering_DW.SourceBlock_h);\r\n\r\n  // MATLABSystem: '<S35>/PX4 Timestamp'\r\n  hrt_absolute_time();\r\n}\r\n\r\n// Model initialize function\r\nvoid FLIGHT_HEXA_Hovering_initialize(void)\r\n{\r\n  // Registration code\r\n\r\n  // initialize non-finites\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  // non-finite (run-time) assignments\r\n  FLIGHT_HEXA_Hovering_P.Constant1_Value_d[0] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant1_Value_d[1] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant_Value_f2 = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant1_Value_k4[0] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant1_Value_k4[1] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant_Value_l4 = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant_Value_fh[0] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant_Value_fh[1] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant_Value_fh[2] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant1_Value_hv[0] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant1_Value_hv[1] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant1_Value_hv[2] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant2_Value_f[0] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant2_Value_f[1] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant2_Value_f[2] = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant3_Value_a = rtNaNF;\r\n  FLIGHT_HEXA_Hovering_P.Constant4_Value_g = rtNaNF;\r\n\r\n  {\r\n    static const char_T ParameterNameStr[14] = \"COM_OBS_AVOID\";\r\n    static const char_T ParameterNameStr_0[14] = \"FDD_M1_STATUS\";\r\n    static const char_T ParameterNameStr_1[14] = \"FDD_M2_STATUS\";\r\n    static const char_T ParameterNameStr_2[14] = \"FDD_M3_STATUS\";\r\n    static const char_T ParameterNameStr_3[14] = \"FDD_M4_STATUS\";\r\n    static const char_T ParameterNameStr_4[14] = \"FDD_M5_STATUS\";\r\n    static const char_T ParameterNameStr_5[14] = \"FDD_M6_STATUS\";\r\n    static const char_T ParameterNameStr_6[15] = \"MPC_LAND_SPEED\";\r\n    static const char_T ParameterNameStr_7[14] = \"MPC_TKO_SPEED\";\r\n    real_T tmp;\r\n\r\n    // Start for If: '<S18>/If'\r\n    FLIGHT_HEXA_Hovering_DW.If_ActiveSubsystem = -1;\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S69>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S70>/In1' incorporates:\r\n    //   Outport: '<S70>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_h = FLIGHT_HEXA_Hovering_P.Out1_Y0_j;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S69>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S8>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S14>/In1' incorporates:\r\n    //   Outport: '<S14>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_m = FLIGHT_HEXA_Hovering_P.Out1_Y0_k;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S8>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S5>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S10>/In1' incorporates:\r\n    //   Outport: '<S10>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_l = FLIGHT_HEXA_Hovering_P.Out1_Y0_e;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S5>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S6>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S11>/In1' incorporates:\r\n    //   Outport: '<S11>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_b = FLIGHT_HEXA_Hovering_P.Out1_Y0_d;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S6>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S12>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S13>/In1' incorporates:\r\n    //   Outport: '<S13>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_j = FLIGHT_HEXA_Hovering_P.Out1_Y0_m;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S12>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S9>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S15>/In1' incorporates:\r\n    //   Outport: '<S15>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_c = FLIGHT_HEXA_Hovering_P.Out1_Y0_p;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S9>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S40>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S41>/In1' incorporates:\r\n    //   Outport: '<S41>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1 = FLIGHT_HEXA_Hovering_P.Out1_Y0;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S40>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S38>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S53>/In1' incorporates:\r\n    //   Outport: '<S53>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_p = FLIGHT_HEXA_Hovering_P.Out1_Y0_h;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S38>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S37>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S52>/In1' incorporates:\r\n    //   Outport: '<S52>/Out1'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In1_f = FLIGHT_HEXA_Hovering_P.Out1_Y0_o;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S37>/Enabled Subsystem'\r\n\r\n    // SystemInitialize for IfAction SubSystem: '<S18>/Take-off'\r\n    // InitializeConditions for Delay: '<S30>/Delay'\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_c =\r\n      FLIGHT_HEXA_Hovering_P.Delay_InitialCondition;\r\n\r\n    // InitializeConditions for Delay: '<S31>/Delay'\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_d =\r\n      FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_g;\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S31>/Enabled Subsystem2'\r\n    // SystemInitialize for SignalConversion generated from: '<S32>/yaw_In' incorporates:\r\n    //   Outport: '<S32>/yaw_Out'\r\n\r\n    FLIGHT_HEXA_Hovering_B.yaw_In_ik = FLIGHT_HEXA_Hovering_P.yaw_Out_Y0;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S31>/Enabled Subsystem2'\r\n    // End of SystemInitialize for SubSystem: '<S18>/Take-off'\r\n\r\n    // SystemInitialize for IfAction SubSystem: '<S18>/Land'\r\n    // InitializeConditions for Delay: '<S21>/Delay'\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_l[0] =\r\n      FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_n;\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_l[1] =\r\n      FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_n;\r\n\r\n    // InitializeConditions for Delay: '<S26>/Delay'\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_n =\r\n      FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_m;\r\n\r\n    // InitializeConditions for Delay: '<S27>/Delay'\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE_b =\r\n      FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_j;\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S27>/Enabled Subsystem2'\r\n    // SystemInitialize for SignalConversion generated from: '<S29>/yaw_In' incorporates:\r\n    //   Outport: '<S29>/yaw_Out'\r\n\r\n    FLIGHT_HEXA_Hovering_B.yaw_In_i = FLIGHT_HEXA_Hovering_P.yaw_Out_Y0_f;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S27>/Enabled Subsystem2'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S26>/Enabled Subsystem'\r\n    // SystemInitialize for SignalConversion generated from: '<S28>/In' incorporates:\r\n    //   Outport: '<S28>/Out'\r\n\r\n    FLIGHT_HEXA_Hovering_B.In = FLIGHT_HEXA_Hovering_P.Out_Y0;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S26>/Enabled Subsystem'\r\n    // End of SystemInitialize for SubSystem: '<S18>/Land'\r\n\r\n    // SystemInitialize for IfAction SubSystem: '<S18>/Waypoint'\r\n    // Start for MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n    FLIGHT_HEXA_Hovering_DW.obj.LastWaypointFlag = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj.StartFlag = true;\r\n    FLIGHT_HEXA_Hovering_DW.obj.LookaheadFactor = 1.01;\r\n    FLIGHT_HEXA_Hovering_DW.obj.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj.NumWaypoints = 0.0;\r\n\r\n    // InitializeConditions for MATLABSystem: '<S23>/UAV Waypoint Follower'\r\n    FLIGHT_HEXA_Hovering_DW.obj.WaypointIndex = 1.0;\r\n    memset(&FLIGHT_HEXA_Hovering_DW.obj.WaypointsInternal[0], 0, 9U * sizeof\r\n           (real_T));\r\n\r\n    // End of SystemInitialize for SubSystem: '<S18>/Waypoint'\r\n\r\n    // SystemInitialize for IfAction SubSystem: '<S18>/IDLE'\r\n    // InitializeConditions for Delay: '<S24>/Delay'\r\n    FLIGHT_HEXA_Hovering_DW.Delay_DSTATE =\r\n      FLIGHT_HEXA_Hovering_P.Delay_InitialCondition_g0;\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S24>/Enabled Subsystem2'\r\n    // SystemInitialize for SignalConversion generated from: '<S25>/yaw_In' incorporates:\r\n    //   Outport: '<S25>/yaw_Out'\r\n\r\n    FLIGHT_HEXA_Hovering_B.yaw_In = FLIGHT_HEXA_Hovering_P.yaw_Out_Y0_p;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S24>/Enabled Subsystem2'\r\n    // End of SystemInitialize for SubSystem: '<S18>/IDLE'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S4>/Position & Altitude controller' \r\n    // InitializeConditions for DiscreteIntegrator: '<S529>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE =\r\n      FLIGHT_HEXA_Hovering_P.PID_Altitude_InitialConditionForFilter;\r\n\r\n    // InitializeConditions for DiscreteIntegrator: '<S534>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE =\r\n      FLIGHT_HEXA_Hovering_P.PID_Altitude_InitialConditionForIntegrator;\r\n\r\n    // InitializeConditions for DiscreteIntegrator: '<S581>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_n =\r\n      FLIGHT_HEXA_Hovering_P.PID_vz_InitialConditionForFilter;\r\n\r\n    // InitializeConditions for DiscreteIntegrator: '<S586>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_c =\r\n      FLIGHT_HEXA_Hovering_P.PID_vz_InitialConditionForIntegrator;\r\n\r\n    // SystemInitialize for Gain: '<S76>/Gain1' incorporates:\r\n    //   Outport: '<S76>/des_pitch'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Gain1 = FLIGHT_HEXA_Hovering_P.des_pitch_Y0;\r\n\r\n    // SystemInitialize for Outport: '<S76>/des_roll' incorporates:\r\n    //   Saturate: '<S389>/Saturation'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Saturation[1] = FLIGHT_HEXA_Hovering_P.des_roll_Y0;\r\n\r\n    // SystemInitialize for Saturate: '<S489>/Saturation' incorporates:\r\n    //   Outport: '<S76>/des_yawrate'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Saturation_e = FLIGHT_HEXA_Hovering_P.des_yawrate_Y0;\r\n\r\n    // SystemInitialize for Saturate: '<S593>/Saturation' incorporates:\r\n    //   Outport: '<S76>/tau_Thrust'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Saturation_f = FLIGHT_HEXA_Hovering_P.tau_Thrust_Y0;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S4>/Position & Altitude controller' \r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S4>/Attitude controller'\r\n    // InitializeConditions for DiscreteIntegrator: '<S119>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_k =\r\n      FLIGHT_HEXA_Hovering_P.PIDController_InitialConditionForIntegrator;\r\n\r\n    // InitializeConditions for DiscreteIntegrator: '<S114>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_e =\r\n      FLIGHT_HEXA_Hovering_P.PIDController_InitialConditionForFilter;\r\n\r\n    // InitializeConditions for RateLimiter: '<S73>/Rate Limiter2'\r\n    FLIGHT_HEXA_Hovering_DW.PrevY = FLIGHT_HEXA_Hovering_P.RateLimiter2_IC;\r\n\r\n    // InitializeConditions for DiscreteIntegrator: '<S171>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_kd =\r\n      FLIGHT_HEXA_Hovering_P.PIDController1_InitialConditionForIntegrator;\r\n\r\n    // InitializeConditions for DiscreteIntegrator: '<S166>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_ek =\r\n      FLIGHT_HEXA_Hovering_P.PIDController1_InitialConditionForFilter;\r\n\r\n    // InitializeConditions for RateLimiter: '<S73>/Rate Limiter1'\r\n    FLIGHT_HEXA_Hovering_DW.PrevY_f = FLIGHT_HEXA_Hovering_P.RateLimiter1_IC;\r\n\r\n    // InitializeConditions for DiscreteIntegrator: '<S223>/Integrator'\r\n    FLIGHT_HEXA_Hovering_DW.Integrator_DSTATE_i =\r\n      FLIGHT_HEXA_Hovering_P.PIDController2_InitialConditionForIntegrator;\r\n\r\n    // InitializeConditions for DiscreteIntegrator: '<S218>/Filter'\r\n    FLIGHT_HEXA_Hovering_DW.Filter_DSTATE_j =\r\n      FLIGHT_HEXA_Hovering_P.PIDController2_InitialConditionForFilter;\r\n\r\n    // SystemInitialize for Saturate: '<S126>/Saturation' incorporates:\r\n    //   Outport: '<S73>/tau_Yaw'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Saturation_l = FLIGHT_HEXA_Hovering_P.tau_Yaw_Y0;\r\n\r\n    // SystemInitialize for Saturate: '<S178>/Saturation' incorporates:\r\n    //   Outport: '<S73>/tau_Pitch'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Saturation_o = FLIGHT_HEXA_Hovering_P.tau_Pitch_Y0;\r\n\r\n    // SystemInitialize for Saturate: '<S230>/Saturation' incorporates:\r\n    //   Outport: '<S73>/tau_Roll'\r\n\r\n    FLIGHT_HEXA_Hovering_B.Saturation_m = FLIGHT_HEXA_Hovering_P.tau_Roll_Y0;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S4>/Attitude controller'\r\n\r\n    // SystemInitialize for Enabled SubSystem: '<S19>/Send waypoints to OBC'\r\n    // SystemInitialize for IfAction SubSystem: '<S48>/If Action Subsystem2'\r\n    // Start for MATLABSystem: '<S51>/Read Parameter'\r\n    FLIGHT_HEXA_Hovering_DW.obj_g.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_g.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime_c;\r\n    FLIGHT_HEXA_Hovering_DW.obj_g.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_g.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_g.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_g.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr_6[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_g.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S51>/Read Parameter'\r\n    // End of SystemInitialize for SubSystem: '<S48>/If Action Subsystem2'\r\n\r\n    // SystemInitialize for IfAction SubSystem: '<S48>/If Action Subsystem1'\r\n    // Start for MATLABSystem: '<S50>/Read Parameter'\r\n    FLIGHT_HEXA_Hovering_DW.obj_b4.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_b4.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime_g;\r\n    FLIGHT_HEXA_Hovering_DW.obj_b4.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_b4.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_b4.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_b4.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr_7[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_b4.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S50>/Read Parameter'\r\n    // End of SystemInitialize for SubSystem: '<S48>/If Action Subsystem1'\r\n    FLIGHT_HEXA_Hovering_MATLABSystem_Init(&FLIGHT_HEXA_Hovering_DW.MATLABSystem);\r\n    FLIGHT_HEXA_Hovering_MATLABSystem_Init\r\n      (&FLIGHT_HEXA_Hovering_DW.MATLABSystem_b);\r\n\r\n    // Start for MATLABSystem: '<S45>/MATLAB System'\r\n    FLIGHT_HEXA_Hovering_DW.obj_mu.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mu.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S47>/SinkBlock' incorporates:\r\n    //   BusAssignment: '<S36>/Bus Assignment1'\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_mc.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mc.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mc.orbMetadataObj = ORB_ID\r\n      (vehicle_trajectory_waypoint_desired);\r\n    uORB_write_initialize(FLIGHT_HEXA_Hovering_DW.obj_mc.orbMetadataObj,\r\n                          &FLIGHT_HEXA_Hovering_DW.obj_mc.orbAdvertiseObj,\r\n                          &FLIGHT_HEXA_Hovering_B.BusAssignment1, 1);\r\n    FLIGHT_HEXA_Hovering_DW.obj_mc.isSetupComplete = true;\r\n\r\n    // End of SystemInitialize for SubSystem: '<S19>/Send waypoints to OBC'\r\n    FLIGHT_HEXA_Hovering_SourceBlock_k_Init\r\n      (&FLIGHT_HEXA_Hovering_DW.SourceBlock_g);\r\n\r\n    // Start for MATLABSystem: '<S8>/SourceBlock'\r\n    FLIGHT_HEXA_Hovering_DW.obj_gv.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_gv.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_gv.orbMetadataObj = ORB_ID(vehicle_attitude);\r\n    uORB_read_initialize(FLIGHT_HEXA_Hovering_DW.obj_gv.orbMetadataObj,\r\n                         &FLIGHT_HEXA_Hovering_DW.obj_gv.eventStructObj);\r\n    FLIGHT_HEXA_Hovering_DW.obj_gv.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S5>/SourceBlock'\r\n    FLIGHT_HEXA_Hovering_DW.obj_p.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_p.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_p.orbMetadataObj = ORB_ID\r\n      (vehicle_angular_velocity);\r\n    uORB_read_initialize(FLIGHT_HEXA_Hovering_DW.obj_p.orbMetadataObj,\r\n                         &FLIGHT_HEXA_Hovering_DW.obj_p.eventStructObj);\r\n    FLIGHT_HEXA_Hovering_DW.obj_p.isSetupComplete = true;\r\n    FLIGHT_HEXA_Hovering_SourceBlock_Init(&FLIGHT_HEXA_Hovering_DW.SourceBlock_l);\r\n    FLIGHT_HEXA_Hovering_SourceBlock_k_Init\r\n      (&FLIGHT_HEXA_Hovering_DW.SourceBlock_b);\r\n\r\n    // Start for MATLABSystem: '<S9>/SourceBlock'\r\n    FLIGHT_HEXA_Hovering_DW.obj_mg.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mg.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mg.orbMetadataObj = ORB_ID\r\n      (vehicle_local_position);\r\n    uORB_read_initialize(FLIGHT_HEXA_Hovering_DW.obj_mg.orbMetadataObj,\r\n                         &FLIGHT_HEXA_Hovering_DW.obj_mg.eventStructObj);\r\n    FLIGHT_HEXA_Hovering_DW.obj_mg.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S19>/Read Parameter'\r\n    FLIGHT_HEXA_Hovering_DW.obj_k.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_k.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter_SampleTime;\r\n    FLIGHT_HEXA_Hovering_DW.obj_k.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_k.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_k.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_k.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_k.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S19>/Read Parameter'\r\n\r\n    // Start for MATLABSystem: '<S40>/SourceBlock'\r\n    FLIGHT_HEXA_Hovering_DW.obj_e.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_e.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_e.orbMetadataObj = ORB_ID\r\n      (vehicle_trajectory_waypoint);\r\n    uORB_read_initialize(FLIGHT_HEXA_Hovering_DW.obj_e.orbMetadataObj,\r\n                         &FLIGHT_HEXA_Hovering_DW.obj_e.eventStructObj);\r\n    FLIGHT_HEXA_Hovering_DW.obj_e.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S38>/SourceBlock'\r\n    FLIGHT_HEXA_Hovering_DW.obj_kz.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_kz.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_kz.orbMetadataObj = ORB_ID\r\n      (position_setpoint_triplet);\r\n    uORB_read_initialize(FLIGHT_HEXA_Hovering_DW.obj_kz.orbMetadataObj,\r\n                         &FLIGHT_HEXA_Hovering_DW.obj_kz.eventStructObj);\r\n    FLIGHT_HEXA_Hovering_DW.obj_kz.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S37>/SourceBlock'\r\n    FLIGHT_HEXA_Hovering_DW.obj_gf.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_gf.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_gf.orbMetadataObj = ORB_ID(home_position);\r\n    uORB_read_initialize(FLIGHT_HEXA_Hovering_DW.obj_gf.orbMetadataObj,\r\n                         &FLIGHT_HEXA_Hovering_DW.obj_gf.eventStructObj);\r\n    FLIGHT_HEXA_Hovering_DW.obj_gf.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n    FLIGHT_HEXA_Hovering_DW.obj_mr.previousValidReceived = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mr.nextValidReceived = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mr.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mr.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_mr.isSetupComplete = true;\r\n\r\n    // Start for MATLABSystem: '<S55>/Read Parameter13'\r\n    FLIGHT_HEXA_Hovering_DW.obj_b.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_b.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter13_SampleTime;\r\n    FLIGHT_HEXA_Hovering_DW.obj_b.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_b.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_b.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_b.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr_0[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_b.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S55>/Read Parameter13'\r\n\r\n    // Start for MATLABSystem: '<S55>/Read Parameter1'\r\n    FLIGHT_HEXA_Hovering_DW.obj_a.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_a.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter1_SampleTime;\r\n    FLIGHT_HEXA_Hovering_DW.obj_a.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_a.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_a.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_a.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr_1[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_a.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S55>/Read Parameter1'\r\n\r\n    // Start for MATLABSystem: '<S55>/Read Parameter2'\r\n    FLIGHT_HEXA_Hovering_DW.obj_m.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_m.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter2_SampleTime;\r\n    FLIGHT_HEXA_Hovering_DW.obj_m.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_m.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_m.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_m.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr_2[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_m.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S55>/Read Parameter2'\r\n\r\n    // Start for MATLABSystem: '<S55>/Read Parameter3'\r\n    FLIGHT_HEXA_Hovering_DW.obj_i.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_i.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter3_SampleTime;\r\n    FLIGHT_HEXA_Hovering_DW.obj_i.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_i.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_i.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_i.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr_3[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_i.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S55>/Read Parameter3'\r\n\r\n    // Start for MATLABSystem: '<S55>/Read Parameter4'\r\n    FLIGHT_HEXA_Hovering_DW.obj_d.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_d.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter4_SampleTime;\r\n    FLIGHT_HEXA_Hovering_DW.obj_d.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_d.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_d.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_d.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr_4[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_d.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S55>/Read Parameter4'\r\n\r\n    // Start for MATLABSystem: '<S55>/Read Parameter5'\r\n    FLIGHT_HEXA_Hovering_DW.obj_c.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_c.SampleTime =\r\n      FLIGHT_HEXA_Hovering_P.ReadParameter5_SampleTime;\r\n    FLIGHT_HEXA_Hovering_DW.obj_c.isInitialized = 1;\r\n    if (FLIGHT_HEXA_Hovering_DW.obj_c.SampleTime == -1.0) {\r\n      tmp = 0.2;\r\n    } else {\r\n      tmp = FLIGHT_HEXA_Hovering_DW.obj_c.SampleTime;\r\n    }\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_c.MW_PARAMHANDLE = MW_Init_Param\r\n      (&ParameterNameStr_5[0], true, tmp * 1000.0);\r\n    FLIGHT_HEXA_Hovering_DW.obj_c.isSetupComplete = true;\r\n\r\n    // End of Start for MATLABSystem: '<S55>/Read Parameter5'\r\n\r\n    // Start for MATLABSystem: '<S72>/SinkBlock' incorporates:\r\n    //   BusAssignment: '<S59>/Bus Assignment'\r\n\r\n    FLIGHT_HEXA_Hovering_DW.obj_m4.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_m4.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_m4.orbMetadataObj = ORB_ID(actuator_motors);\r\n    uORB_write_initialize(FLIGHT_HEXA_Hovering_DW.obj_m4.orbMetadataObj,\r\n                          &FLIGHT_HEXA_Hovering_DW.obj_m4.orbAdvertiseObj,\r\n                          &FLIGHT_HEXA_Hovering_B.BusAssignment, 1);\r\n    FLIGHT_HEXA_Hovering_DW.obj_m4.isSetupComplete = true;\r\n    FLIGHT_HEXA_Hovering_SourceBlock_Init(&FLIGHT_HEXA_Hovering_DW.SourceBlock_h);\r\n\r\n    // Start for MATLABSystem: '<S35>/PX4 Timestamp'\r\n    FLIGHT_HEXA_Hovering_DW.obj_n.matlabCodegenIsDeleted = false;\r\n    FLIGHT_HEXA_Hovering_DW.obj_n.isInitialized = 1;\r\n    FLIGHT_HEXA_Hovering_DW.obj_n.isSetupComplete = true;\r\n  }\r\n}\r\n\r\n// Model terminate function\r\nvoid FLIGHT_HEXA_Hovering_terminate(void)\r\n{\r\n  FLIGHT_HEXA_Hovering_SourceBlock_o_Term(&FLIGHT_HEXA_Hovering_DW.SourceBlock_g);\r\n\r\n  // Terminate for MATLABSystem: '<S8>/SourceBlock'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_gv.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_gv.matlabCodegenIsDeleted = true;\r\n    if ((FLIGHT_HEXA_Hovering_DW.obj_gv.isInitialized == 1) &&\r\n        FLIGHT_HEXA_Hovering_DW.obj_gv.isSetupComplete) {\r\n      uORB_read_terminate(&FLIGHT_HEXA_Hovering_DW.obj_gv.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S8>/SourceBlock'\r\n\r\n  // Terminate for MATLABSystem: '<S5>/SourceBlock'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_p.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_p.matlabCodegenIsDeleted = true;\r\n    if ((FLIGHT_HEXA_Hovering_DW.obj_p.isInitialized == 1) &&\r\n        FLIGHT_HEXA_Hovering_DW.obj_p.isSetupComplete) {\r\n      uORB_read_terminate(&FLIGHT_HEXA_Hovering_DW.obj_p.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S5>/SourceBlock'\r\n  FLIGHT_HEXA_Hovering_SourceBlock_Term(&FLIGHT_HEXA_Hovering_DW.SourceBlock_l);\r\n  FLIGHT_HEXA_Hovering_SourceBlock_o_Term(&FLIGHT_HEXA_Hovering_DW.SourceBlock_b);\r\n\r\n  // Terminate for MATLABSystem: '<S9>/SourceBlock'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_mg.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_mg.matlabCodegenIsDeleted = true;\r\n    if ((FLIGHT_HEXA_Hovering_DW.obj_mg.isInitialized == 1) &&\r\n        FLIGHT_HEXA_Hovering_DW.obj_mg.isSetupComplete) {\r\n      uORB_read_terminate(&FLIGHT_HEXA_Hovering_DW.obj_mg.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S9>/SourceBlock'\r\n\r\n  // Terminate for MATLABSystem: '<S19>/Read Parameter'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_k.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_k.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S19>/Read Parameter'\r\n\r\n  // Terminate for MATLABSystem: '<S40>/SourceBlock'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_e.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_e.matlabCodegenIsDeleted = true;\r\n    if ((FLIGHT_HEXA_Hovering_DW.obj_e.isInitialized == 1) &&\r\n        FLIGHT_HEXA_Hovering_DW.obj_e.isSetupComplete) {\r\n      uORB_read_terminate(&FLIGHT_HEXA_Hovering_DW.obj_e.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S40>/SourceBlock'\r\n\r\n  // Terminate for MATLABSystem: '<S38>/SourceBlock'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_kz.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_kz.matlabCodegenIsDeleted = true;\r\n    if ((FLIGHT_HEXA_Hovering_DW.obj_kz.isInitialized == 1) &&\r\n        FLIGHT_HEXA_Hovering_DW.obj_kz.isSetupComplete) {\r\n      uORB_read_terminate(&FLIGHT_HEXA_Hovering_DW.obj_kz.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S38>/SourceBlock'\r\n\r\n  // Terminate for MATLABSystem: '<S37>/SourceBlock'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_gf.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_gf.matlabCodegenIsDeleted = true;\r\n    if ((FLIGHT_HEXA_Hovering_DW.obj_gf.isInitialized == 1) &&\r\n        FLIGHT_HEXA_Hovering_DW.obj_gf.isSetupComplete) {\r\n      uORB_read_terminate(&FLIGHT_HEXA_Hovering_DW.obj_gf.eventStructObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S37>/SourceBlock'\r\n\r\n  // Terminate for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_mr.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_mr.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S19>/LLA2LocalCoordinates'\r\n\r\n  // Terminate for MATLABSystem: '<S55>/Read Parameter13'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_b.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_b.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S55>/Read Parameter13'\r\n\r\n  // Terminate for MATLABSystem: '<S55>/Read Parameter1'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_a.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_a.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S55>/Read Parameter1'\r\n\r\n  // Terminate for MATLABSystem: '<S55>/Read Parameter2'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_m.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_m.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S55>/Read Parameter2'\r\n\r\n  // Terminate for MATLABSystem: '<S55>/Read Parameter3'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_i.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_i.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S55>/Read Parameter3'\r\n\r\n  // Terminate for MATLABSystem: '<S55>/Read Parameter4'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_d.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_d.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S55>/Read Parameter4'\r\n\r\n  // Terminate for MATLABSystem: '<S55>/Read Parameter5'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_c.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_c.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S55>/Read Parameter5'\r\n\r\n  // Terminate for MATLABSystem: '<S72>/SinkBlock'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_m4.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_m4.matlabCodegenIsDeleted = true;\r\n    if ((FLIGHT_HEXA_Hovering_DW.obj_m4.isInitialized == 1) &&\r\n        FLIGHT_HEXA_Hovering_DW.obj_m4.isSetupComplete) {\r\n      uORB_write_terminate(&FLIGHT_HEXA_Hovering_DW.obj_m4.orbAdvertiseObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S72>/SinkBlock'\r\n\r\n  // Terminate for Enabled SubSystem: '<S19>/Send waypoints to OBC'\r\n  FLIGHT_HEXA_Hovering_MATLABSystem_Term(&FLIGHT_HEXA_Hovering_DW.MATLABSystem);\r\n\r\n  // Terminate for IfAction SubSystem: '<S48>/If Action Subsystem2'\r\n  // Terminate for MATLABSystem: '<S51>/Read Parameter'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_g.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_g.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S51>/Read Parameter'\r\n  // End of Terminate for SubSystem: '<S48>/If Action Subsystem2'\r\n\r\n  // Terminate for IfAction SubSystem: '<S48>/If Action Subsystem1'\r\n  // Terminate for MATLABSystem: '<S50>/Read Parameter'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_b4.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_b4.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S50>/Read Parameter'\r\n  // End of Terminate for SubSystem: '<S48>/If Action Subsystem1'\r\n  FLIGHT_HEXA_Hovering_MATLABSystem_Term(&FLIGHT_HEXA_Hovering_DW.MATLABSystem_b);\r\n\r\n  // Terminate for MATLABSystem: '<S45>/MATLAB System'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_mu.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_mu.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S45>/MATLAB System'\r\n\r\n  // Terminate for MATLABSystem: '<S47>/SinkBlock'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_mc.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_mc.matlabCodegenIsDeleted = true;\r\n    if ((FLIGHT_HEXA_Hovering_DW.obj_mc.isInitialized == 1) &&\r\n        FLIGHT_HEXA_Hovering_DW.obj_mc.isSetupComplete) {\r\n      uORB_write_terminate(&FLIGHT_HEXA_Hovering_DW.obj_mc.orbAdvertiseObj);\r\n    }\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S47>/SinkBlock'\r\n  // End of Terminate for SubSystem: '<S19>/Send waypoints to OBC'\r\n  FLIGHT_HEXA_Hovering_SourceBlock_Term(&FLIGHT_HEXA_Hovering_DW.SourceBlock_h);\r\n\r\n  // Terminate for MATLABSystem: '<S35>/PX4 Timestamp'\r\n  if (!FLIGHT_HEXA_Hovering_DW.obj_n.matlabCodegenIsDeleted) {\r\n    FLIGHT_HEXA_Hovering_DW.obj_n.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  // End of Terminate for MATLABSystem: '<S35>/PX4 Timestamp'\r\n}\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"FLIGHT_HEXA_Hovering.h","type":"header","group":"model","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: FLIGHT_HEXA_Hovering.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef FLIGHT_HEXA_Hovering_h_\r\n#define FLIGHT_HEXA_Hovering_h_\r\n#include <poll.h>\r\n#include <uORB/uORB.h>\r\n#include <drivers/drv_hrt.h>\r\n#include \"rtwtypes.h\"\r\n#include \"MW_uORB_Read.h\"\r\n#include \"MW_Parameter.h\"\r\n#include \"MW_ParameterRead.h\"\r\n#include \"MW_uORB_Write.h\"\r\n#include \"FLIGHT_HEXA_Hovering_types.h\"\r\n#include <uORB/topics/actuator_armed.h>\r\n#include <uORB/topics/input_rc.h>\r\n#include <uORB/topics/vehicle_trajectory_waypoint.h>\r\n#include <uORB/topics/position_setpoint_triplet.h>\r\n#include <uORB/topics/vehicle_local_position.h>\r\n#include <uORB/topics/actuator_motors.h>\r\n#include <uORB/topics/vehicle_attitude.h>\r\n#include <uORB/topics/trajectory_waypoint.h>\r\n#include <uORB/topics/home_position.h>\r\n#include <uORB/topics/vehicle_angular_velocity.h>\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rt_nonfinite.h\"\r\n\r\n}\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rtGetNaN.h\"\r\n\r\n}\r\n\r\n#include <stddef.h>\r\n\r\n// Macros for accessing real-time model data structure\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n// Block signals for system '<S6>/SourceBlock'\r\nstruct B_SourceBlock_FLIGHT_HEXA_Hovering_T {\r\n  px4_Bus_actuator_armed SourceBlock_o2;// '<S6>/SourceBlock'\r\n  boolean_T SourceBlock_o1;            // '<S6>/SourceBlock'\r\n};\r\n\r\n// Block states (default storage) for system '<S6>/SourceBlock'\r\nstruct DW_SourceBlock_FLIGHT_HEXA_Hovering_T {\r\n  px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T obj;// '<S6>/SourceBlock' \r\n  boolean_T objisempty;                // '<S6>/SourceBlock'\r\n};\r\n\r\n// Block signals for system '<S12>/SourceBlock'\r\nstruct B_SourceBlock_FLIGHT_HEXA_Hovering_i_T {\r\n  px4_Bus_input_rc SourceBlock_o2;     // '<S12>/SourceBlock'\r\n  boolean_T SourceBlock_o1;            // '<S12>/SourceBlock'\r\n};\r\n\r\n// Block states (default storage) for system '<S12>/SourceBlock'\r\nstruct DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T {\r\n  px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T obj;// '<S12>/SourceBlock' \r\n  boolean_T objisempty;                // '<S12>/SourceBlock'\r\n};\r\n\r\n// Block signals for system '<S42>/MATLAB System'\r\nstruct B_MATLABSystem_FLIGHT_HEXA_Hovering_T {\r\n  real32_T MATLABSystem[3];            // '<S42>/MATLAB System'\r\n  real_T dLat;\r\n};\r\n\r\n// Block states (default storage) for system '<S42>/MATLAB System'\r\nstruct DW_MATLABSystem_FLIGHT_HEXA_Hovering_T {\r\n  px4_internal_block_LLA2LocalCoordinatesNED_FLIGHT_HEXA_Hoveri_T obj;// '<S42>/MATLAB System' \r\n  boolean_T objisempty;                // '<S42>/MATLAB System'\r\n};\r\n\r\n// Block signals (default storage)\r\nstruct B_FLIGHT_HEXA_Hovering_T {\r\n  px4_Bus_vehicle_trajectory_waypoint BusAssignment1;// '<S36>/Bus Assignment1'\r\n  px4_Bus_vehicle_trajectory_waypoint In1;// '<S41>/In1'\r\n  px4_Bus_vehicle_trajectory_waypoint r;\r\n  px4_Bus_position_setpoint_triplet In1_p;// '<S53>/In1'\r\n  px4_Bus_position_setpoint_triplet r1;\r\n  px4_Bus_vehicle_local_position In1_c;// '<S15>/In1'\r\n  px4_Bus_vehicle_local_position r2;\r\n  px4_Bus_input_rc In1_h;              // '<S70>/In1'\r\n  px4_Bus_input_rc In1_j;              // '<S13>/In1'\r\n  px4_Bus_actuator_motors BusAssignment;// '<S59>/Bus Assignment'\r\n  real_T b_waypointsIn_data[9];\r\n  real_T MatrixConcatenate_p[9];       // '<S23>/Matrix Concatenate'\r\n  px4_Bus_vehicle_attitude In1_m;      // '<S14>/In1'\r\n  px4_Bus_vehicle_attitude r3;\r\n  px4_Bus_trajectory_waypoint BusAssignment1_f;// '<S44>/Bus Assignment1'\r\n  px4_Bus_home_position In1_f;         // '<S52>/In1'\r\n  px4_Bus_home_position r4;\r\n  px4_Bus_vehicle_angular_velocity In1_l;// '<S10>/In1'\r\n  px4_Bus_vehicle_angular_velocity r5;\r\n  real_T lla0[3];\r\n  real_T virtualWaypoint[3];\r\n  real_T b_startWaypoint[3];\r\n  real_T VectorConcatenate[3];         // '<S604>/Vector Concatenate'\r\n  real_T DataTypeConversion2[3];       // '<S1>/Data Type Conversion2'\r\n  real_T dv[3];\r\n  px4_Bus_actuator_armed In1_b;        // '<S11>/In1'\r\n  real_T Saturation[2];                // '<S389>/Saturation'\r\n  real_T Gain1;                        // '<S76>/Gain1'\r\n  real_T Saturation_e;                 // '<S489>/Saturation'\r\n  real_T Saturation_f;                 // '<S593>/Saturation'\r\n  real_T Saturation_l;                 // '<S126>/Saturation'\r\n  real_T Saturation_o;                 // '<S178>/Saturation'\r\n  real_T Saturation_m;                 // '<S230>/Saturation'\r\n  real_T yaw_In;                       // '<S25>/yaw_In'\r\n  real_T yaw_In_i;                     // '<S29>/yaw_In'\r\n  real_T In;                           // '<S28>/In'\r\n  real_T yaw_In_ik;                    // '<S32>/yaw_In'\r\n  real_T Switch3;                      // '<S54>/Switch3'\r\n  real_T Switch2;                      // '<S54>/Switch2'\r\n  real_T Sum;                          // '<S603>/Sum'\r\n  real_T Gain2;                        // '<S4>/Gain2'\r\n  real_T Gain_i;                       // '<S30>/Gain'\r\n  real_T Sum5;                         // '<S76>/Sum5'\r\n  real_T rtb_Merge_idx_3;\r\n  real_T rtb_Switch_aw_idx_0;\r\n  real_T rtb_Switch_aw_idx_1;\r\n  real_T rtb_Switch_aw_idx_2;\r\n  real_T rtb_Switch_aw_idx_3;\r\n  real_T rtb_Merge_idx_2;\r\n  real_T rtb_Merge_idx_0;\r\n  real_T rtb_Merge_idx_1;\r\n  real_T dLat;\r\n  real_T dLon;\r\n  real_T flat;\r\n  real_T absx;\r\n  real_T r_m;\r\n  real_T flat_tmp;\r\n  real_T absx_c;\r\n  real_T q;\r\n  real_T scale;\r\n  real_T absxk;\r\n  real_T t;\r\n  boolean_T x[6];\r\n  real32_T ParamStep;\r\n  int32_T ParamStep_k;\r\n  int32_T ParamStep_c;\r\n  int32_T iy;\r\n  int32_T i1;\r\n  int32_T j;\r\n  int32_T ix;\r\n  int32_T b_exponent;\r\n  int32_T b_k;\r\n  int32_T i;\r\n  int32_T i1_b;\r\n  int8_T tmp_data[3];\r\n  boolean_T distinctWptsIdx[3];\r\n  boolean_T b[3];\r\n  boolean_T IsNaN_l[2];                // '<S21>/IsNaN'\r\n  int8_T rtPrevAction;\r\n  int8_T rtAction;\r\n  boolean_T Compare_k;                 // '<S60>/Compare'\r\n  boolean_T OR_g;                      // '<S21>/OR'\r\n  boolean_T Compare;                   // '<S61>/Compare'\r\n  boolean_T latp2;\r\n  B_SourceBlock_FLIGHT_HEXA_Hovering_i_T SourceBlock_g;// '<S12>/SourceBlock'\r\n  B_SourceBlock_FLIGHT_HEXA_Hovering_T SourceBlock_h;// '<S6>/SourceBlock'\r\n  B_MATLABSystem_FLIGHT_HEXA_Hovering_T MATLABSystem_b;// '<S42>/MATLAB System'\r\n  B_MATLABSystem_FLIGHT_HEXA_Hovering_T MATLABSystem;// '<S42>/MATLAB System'\r\n  B_SourceBlock_FLIGHT_HEXA_Hovering_i_T SourceBlock_b;// '<S12>/SourceBlock'\r\n  B_SourceBlock_FLIGHT_HEXA_Hovering_T SourceBlock_l;// '<S6>/SourceBlock'\r\n};\r\n\r\n// Block states (default storage) for system '<Root>'\r\nstruct DW_FLIGHT_HEXA_Hovering_T {\r\n  uav_sluav_internal_system_WaypointFollower_FLIGHT_HEXA_Hoveri_T obj;// '<S23>/UAV Waypoint Follower' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_c;// '<S55>/Read Parameter5' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_d;// '<S55>/Read Parameter4' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_i;// '<S55>/Read Parameter3' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_m;// '<S55>/Read Parameter2' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_b;// '<S55>/Read Parameter13' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_a;// '<S55>/Read Parameter1' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_b4;// '<S50>/Read Parameter' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_g;// '<S51>/Read Parameter' \r\n  px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T obj_k;// '<S19>/Read Parameter' \r\n  px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T obj_kz;// '<S38>/SourceBlock' \r\n  px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T obj_gf;// '<S37>/SourceBlock' \r\n  px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T obj_e;// '<S40>/SourceBlock' \r\n  px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T obj_mg;// '<S9>/SourceBlock' \r\n  px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T obj_gv;// '<S8>/SourceBlock' \r\n  px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T obj_p;// '<S5>/SourceBlock' \r\n  px4_internal_block_getPX4AbsoluteTime_FLIGHT_HEXA_Hovering_T obj_n;// '<S35>/PX4 Timestamp' \r\n  px4_internal_block_LLA2LocalCoordinates_FLIGHT_HEXA_Hovering_T obj_mr;// '<S19>/LLA2LocalCoordinates' \r\n  px4_internal_block_Publisher_FLIGHT_HEXA_Hovering_T obj_m4;// '<S72>/SinkBlock' \r\n  px4_internal_block_Publisher_FLIGHT_HEXA_Hovering_T obj_mc;// '<S47>/SinkBlock' \r\n  real_T Filter_DSTATE;                // '<S529>/Filter'\r\n  real_T Integrator_DSTATE;            // '<S534>/Integrator'\r\n  real_T Filter_DSTATE_n;              // '<S581>/Filter'\r\n  real_T Integrator_DSTATE_c;          // '<S586>/Integrator'\r\n  real_T Integrator_DSTATE_k;          // '<S119>/Integrator'\r\n  real_T Filter_DSTATE_e;              // '<S114>/Filter'\r\n  real_T Integrator_DSTATE_kd;         // '<S171>/Integrator'\r\n  real_T Filter_DSTATE_ek;             // '<S166>/Filter'\r\n  real_T Integrator_DSTATE_i;          // '<S223>/Integrator'\r\n  real_T Filter_DSTATE_j;              // '<S218>/Filter'\r\n  real_T Delay_DSTATE;                 // '<S24>/Delay'\r\n  real_T Delay_DSTATE_l[2];            // '<S21>/Delay'\r\n  real_T Delay_DSTATE_n;               // '<S26>/Delay'\r\n  real_T Delay_DSTATE_b;               // '<S27>/Delay'\r\n  real_T Delay_DSTATE_c;               // '<S30>/Delay'\r\n  real_T Delay_DSTATE_d;               // '<S31>/Delay'\r\n  real_T PrevY;                        // '<S73>/Rate Limiter2'\r\n  real_T PrevY_f;                      // '<S73>/Rate Limiter1'\r\n  px4_internal_block_LLA2LocalCoordinatesNED_FLIGHT_HEXA_Hoveri_T obj_mu;// '<S45>/MATLAB System' \r\n  int8_T If_ActiveSubsystem;           // '<S18>/If'\r\n  uint8_T is_active_c3_FLIGHT_HEXA_Hovering;// '<S4>/Chart'\r\n  uint8_T is_c3_FLIGHT_HEXA_Hovering;  // '<S4>/Chart'\r\n  DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T SourceBlock_g;// '<S12>/SourceBlock'\r\n  DW_SourceBlock_FLIGHT_HEXA_Hovering_T SourceBlock_h;// '<S6>/SourceBlock'\r\n  DW_MATLABSystem_FLIGHT_HEXA_Hovering_T MATLABSystem_b;// '<S42>/MATLAB System' \r\n  DW_MATLABSystem_FLIGHT_HEXA_Hovering_T MATLABSystem;// '<S42>/MATLAB System'\r\n  DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T SourceBlock_b;// '<S12>/SourceBlock'\r\n  DW_SourceBlock_FLIGHT_HEXA_Hovering_T SourceBlock_l;// '<S6>/SourceBlock'\r\n};\r\n\r\n// Parameters (default storage)\r\nstruct P_FLIGHT_HEXA_Hovering_T_ {\r\n  real_T PIDController_D;              // Mask Parameter: PIDController_D\r\n                                          //  Referenced by: '<S112>/Derivative Gain'\r\n\r\n  real_T PIDController1_D;             // Mask Parameter: PIDController1_D\r\n                                          //  Referenced by: '<S164>/Derivative Gain'\r\n\r\n  real_T PIDController2_D;             // Mask Parameter: PIDController2_D\r\n                                          //  Referenced by: '<S216>/Derivative Gain'\r\n\r\n  real_T PID_Altitude_D;               // Mask Parameter: PID_Altitude_D\r\n                                          //  Referenced by: '<S527>/Derivative Gain'\r\n\r\n  real_T PID_vz_D;                     // Mask Parameter: PID_vz_D\r\n                                          //  Referenced by: '<S579>/Derivative Gain'\r\n\r\n  real_T PIDController_I;              // Mask Parameter: PIDController_I\r\n                                          //  Referenced by: '<S116>/Integral Gain'\r\n\r\n  real_T PIDController1_I;             // Mask Parameter: PIDController1_I\r\n                                          //  Referenced by: '<S168>/Integral Gain'\r\n\r\n  real_T PIDController2_I;             // Mask Parameter: PIDController2_I\r\n                                          //  Referenced by: '<S220>/Integral Gain'\r\n\r\n  real_T PID_Altitude_I;               // Mask Parameter: PID_Altitude_I\r\n                                          //  Referenced by: '<S531>/Integral Gain'\r\n\r\n  real_T PID_vz_I;                     // Mask Parameter: PID_vz_I\r\n                                          //  Referenced by: '<S583>/Integral Gain'\r\n\r\n  real_T PIDController_InitialConditionForFilter;\r\n                      // Mask Parameter: PIDController_InitialConditionForFilter\r\n                         //  Referenced by: '<S114>/Filter'\r\n\r\n  real_T PIDController1_InitialConditionForFilter;\r\n                     // Mask Parameter: PIDController1_InitialConditionForFilter\r\n                        //  Referenced by: '<S166>/Filter'\r\n\r\n  real_T PIDController2_InitialConditionForFilter;\r\n                     // Mask Parameter: PIDController2_InitialConditionForFilter\r\n                        //  Referenced by: '<S218>/Filter'\r\n\r\n  real_T PID_Altitude_InitialConditionForFilter;\r\n                       // Mask Parameter: PID_Altitude_InitialConditionForFilter\r\n                          //  Referenced by: '<S529>/Filter'\r\n\r\n  real_T PID_vz_InitialConditionForFilter;\r\n                             // Mask Parameter: PID_vz_InitialConditionForFilter\r\n                                //  Referenced by: '<S581>/Filter'\r\n\r\n  real_T PIDController_InitialConditionForIntegrator;\r\n                  // Mask Parameter: PIDController_InitialConditionForIntegrator\r\n                     //  Referenced by: '<S119>/Integrator'\r\n\r\n  real_T PIDController1_InitialConditionForIntegrator;\r\n                 // Mask Parameter: PIDController1_InitialConditionForIntegrator\r\n                    //  Referenced by: '<S171>/Integrator'\r\n\r\n  real_T PIDController2_InitialConditionForIntegrator;\r\n                 // Mask Parameter: PIDController2_InitialConditionForIntegrator\r\n                    //  Referenced by: '<S223>/Integrator'\r\n\r\n  real_T PID_Altitude_InitialConditionForIntegrator;\r\n                   // Mask Parameter: PID_Altitude_InitialConditionForIntegrator\r\n                      //  Referenced by: '<S534>/Integrator'\r\n\r\n  real_T PID_vz_InitialConditionForIntegrator;\r\n                         // Mask Parameter: PID_vz_InitialConditionForIntegrator\r\n                            //  Referenced by: '<S586>/Integrator'\r\n\r\n  real_T PIDController_LowerSaturationLimit;\r\n                           // Mask Parameter: PIDController_LowerSaturationLimit\r\n                              //  Referenced by:\r\n                              //    '<S126>/Saturation'\r\n                              //    '<S111>/DeadZone'\r\n\r\n  real_T PIDController1_LowerSaturationLimit;\r\n                          // Mask Parameter: PIDController1_LowerSaturationLimit\r\n                             //  Referenced by:\r\n                             //    '<S178>/Saturation'\r\n                             //    '<S163>/DeadZone'\r\n\r\n  real_T PIDController2_LowerSaturationLimit;\r\n                          // Mask Parameter: PIDController2_LowerSaturationLimit\r\n                             //  Referenced by:\r\n                             //    '<S230>/Saturation'\r\n                             //    '<S215>/DeadZone'\r\n\r\n  real_T PIDController1_LowerSaturationLimit_h;\r\n                        // Mask Parameter: PIDController1_LowerSaturationLimit_h\r\n                           //  Referenced by: '<S439>/Saturation'\r\n\r\n  real_T PIDController_LowerSaturationLimit_o;\r\n                         // Mask Parameter: PIDController_LowerSaturationLimit_o\r\n                            //  Referenced by: '<S389>/Saturation'\r\n\r\n  real_T PIDController5_LowerSaturationLimit;\r\n                          // Mask Parameter: PIDController5_LowerSaturationLimit\r\n                             //  Referenced by: '<S489>/Saturation'\r\n\r\n  real_T PID_Altitude_LowerSaturationLimit;\r\n                            // Mask Parameter: PID_Altitude_LowerSaturationLimit\r\n                               //  Referenced by:\r\n                               //    '<S541>/Saturation'\r\n                               //    '<S526>/DeadZone'\r\n\r\n  real_T PID_vz_LowerSaturationLimit;\r\n                                  // Mask Parameter: PID_vz_LowerSaturationLimit\r\n                                     //  Referenced by:\r\n                                     //    '<S593>/Saturation'\r\n                                     //    '<S578>/DeadZone'\r\n\r\n  real_T PIDController_N;              // Mask Parameter: PIDController_N\r\n                                          //  Referenced by: '<S122>/Filter Coefficient'\r\n\r\n  real_T PIDController1_N;             // Mask Parameter: PIDController1_N\r\n                                          //  Referenced by: '<S174>/Filter Coefficient'\r\n\r\n  real_T PIDController2_N;             // Mask Parameter: PIDController2_N\r\n                                          //  Referenced by: '<S226>/Filter Coefficient'\r\n\r\n  real_T PID_Altitude_N;               // Mask Parameter: PID_Altitude_N\r\n                                          //  Referenced by: '<S537>/Filter Coefficient'\r\n\r\n  real_T PID_vz_N;                     // Mask Parameter: PID_vz_N\r\n                                          //  Referenced by: '<S589>/Filter Coefficient'\r\n\r\n  real_T PIDController_P;              // Mask Parameter: PIDController_P\r\n                                          //  Referenced by: '<S124>/Proportional Gain'\r\n\r\n  real_T PIDController3_P;             // Mask Parameter: PIDController3_P\r\n                                          //  Referenced by: '<S278>/Proportional Gain'\r\n\r\n  real_T PIDController1_P;             // Mask Parameter: PIDController1_P\r\n                                          //  Referenced by: '<S176>/Proportional Gain'\r\n\r\n  real_T PIDController4_P;             // Mask Parameter: PIDController4_P\r\n                                          //  Referenced by: '<S328>/Proportional Gain'\r\n\r\n  real_T PIDController2_P;             // Mask Parameter: PIDController2_P\r\n                                          //  Referenced by: '<S228>/Proportional Gain'\r\n\r\n  real_T PIDController1_P_f;           // Mask Parameter: PIDController1_P_f\r\n                                          //  Referenced by: '<S437>/Proportional Gain'\r\n\r\n  real_T PIDController_P_b;            // Mask Parameter: PIDController_P_b\r\n                                          //  Referenced by: '<S387>/Proportional Gain'\r\n\r\n  real_T PIDController5_P;             // Mask Parameter: PIDController5_P\r\n                                          //  Referenced by: '<S487>/Proportional Gain'\r\n\r\n  real_T PID_Altitude_P;               // Mask Parameter: PID_Altitude_P\r\n                                          //  Referenced by: '<S539>/Proportional Gain'\r\n\r\n  real_T PID_vz_P;                     // Mask Parameter: PID_vz_P\r\n                                          //  Referenced by: '<S591>/Proportional Gain'\r\n\r\n  real_T PIDController_UpperSaturationLimit;\r\n                           // Mask Parameter: PIDController_UpperSaturationLimit\r\n                              //  Referenced by:\r\n                              //    '<S126>/Saturation'\r\n                              //    '<S111>/DeadZone'\r\n\r\n  real_T PIDController1_UpperSaturationLimit;\r\n                          // Mask Parameter: PIDController1_UpperSaturationLimit\r\n                             //  Referenced by:\r\n                             //    '<S178>/Saturation'\r\n                             //    '<S163>/DeadZone'\r\n\r\n  real_T PIDController2_UpperSaturationLimit;\r\n                          // Mask Parameter: PIDController2_UpperSaturationLimit\r\n                             //  Referenced by:\r\n                             //    '<S230>/Saturation'\r\n                             //    '<S215>/DeadZone'\r\n\r\n  real_T PIDController1_UpperSaturationLimit_e;\r\n                        // Mask Parameter: PIDController1_UpperSaturationLimit_e\r\n                           //  Referenced by: '<S439>/Saturation'\r\n\r\n  real_T PIDController_UpperSaturationLimit_e;\r\n                         // Mask Parameter: PIDController_UpperSaturationLimit_e\r\n                            //  Referenced by: '<S389>/Saturation'\r\n\r\n  real_T PIDController5_UpperSaturationLimit;\r\n                          // Mask Parameter: PIDController5_UpperSaturationLimit\r\n                             //  Referenced by: '<S489>/Saturation'\r\n\r\n  real_T PID_Altitude_UpperSaturationLimit;\r\n                            // Mask Parameter: PID_Altitude_UpperSaturationLimit\r\n                               //  Referenced by:\r\n                               //    '<S541>/Saturation'\r\n                               //    '<S526>/DeadZone'\r\n\r\n  real_T PID_vz_UpperSaturationLimit;\r\n                                  // Mask Parameter: PID_vz_UpperSaturationLimit\r\n                                     //  Referenced by:\r\n                                     //    '<S593>/Saturation'\r\n                                     //    '<S578>/DeadZone'\r\n\r\n  real_T CompareToConstant_const;     // Mask Parameter: CompareToConstant_const\r\n                                         //  Referenced by: '<S60>/Constant'\r\n\r\n  uint16_T CompareToConstant_const_d;\r\n                                    // Mask Parameter: CompareToConstant_const_d\r\n                                       //  Referenced by: '<S61>/Constant'\r\n\r\n  uint8_T CompareToConstant_const_dt;\r\n                                   // Mask Parameter: CompareToConstant_const_dt\r\n                                      //  Referenced by: '<S34>/Constant'\r\n\r\n  px4_Bus_vehicle_trajectory_waypoint Out1_Y0;// Computed Parameter: Out1_Y0\r\n                                                 //  Referenced by: '<S41>/Out1'\r\n\r\n  px4_Bus_vehicle_trajectory_waypoint Constant_Value;// Computed Parameter: Constant_Value\r\n                                                        //  Referenced by: '<S46>/Constant'\r\n\r\n  px4_Bus_vehicle_trajectory_waypoint Constant_Value_g;// Computed Parameter: Constant_Value_g\r\n                                                          //  Referenced by: '<S40>/Constant'\r\n\r\n  px4_Bus_position_setpoint_triplet Out1_Y0_h;// Computed Parameter: Out1_Y0_h\r\n                                                 //  Referenced by: '<S53>/Out1'\r\n\r\n  px4_Bus_position_setpoint_triplet Constant_Value_d;// Computed Parameter: Constant_Value_d\r\n                                                        //  Referenced by: '<S38>/Constant'\r\n\r\n  px4_Bus_vehicle_local_position Out1_Y0_p;// Computed Parameter: Out1_Y0_p\r\n                                              //  Referenced by: '<S15>/Out1'\r\n\r\n  px4_Bus_vehicle_local_position Constant_Value_e;// Computed Parameter: Constant_Value_e\r\n                                                     //  Referenced by: '<S9>/Constant'\r\n\r\n  px4_Bus_actuator_motors Constant_Value_f;// Computed Parameter: Constant_Value_f\r\n                                              //  Referenced by: '<S71>/Constant'\r\n\r\n  px4_Bus_input_rc Out1_Y0_m;          // Computed Parameter: Out1_Y0_m\r\n                                          //  Referenced by: '<S13>/Out1'\r\n\r\n  px4_Bus_input_rc Out1_Y0_j;          // Computed Parameter: Out1_Y0_j\r\n                                          //  Referenced by: '<S70>/Out1'\r\n\r\n  px4_Bus_input_rc Constant_Value_m;   // Computed Parameter: Constant_Value_m\r\n                                          //  Referenced by: '<S69>/Constant'\r\n\r\n  px4_Bus_input_rc Constant_Value_o;   // Computed Parameter: Constant_Value_o\r\n                                          //  Referenced by: '<S12>/Constant'\r\n\r\n  px4_Bus_vehicle_attitude Out1_Y0_k;  // Computed Parameter: Out1_Y0_k\r\n                                          //  Referenced by: '<S14>/Out1'\r\n\r\n  px4_Bus_vehicle_attitude Constant_Value_l;// Computed Parameter: Constant_Value_l\r\n                                               //  Referenced by: '<S8>/Constant'\r\n\r\n  px4_Bus_home_position Out1_Y0_o;     // Computed Parameter: Out1_Y0_o\r\n                                          //  Referenced by: '<S52>/Out1'\r\n\r\n  px4_Bus_home_position Constant_Value_b;// Computed Parameter: Constant_Value_b\r\n                                            //  Referenced by: '<S37>/Constant'\r\n\r\n  px4_Bus_vehicle_angular_velocity Out1_Y0_e;// Computed Parameter: Out1_Y0_e\r\n                                                //  Referenced by: '<S10>/Out1'\r\n\r\n  px4_Bus_vehicle_angular_velocity Constant_Value_n;// Computed Parameter: Constant_Value_n\r\n                                                       //  Referenced by: '<S5>/Constant'\r\n\r\n  px4_Bus_actuator_armed Out1_Y0_d;    // Computed Parameter: Out1_Y0_d\r\n                                          //  Referenced by: '<S11>/Out1'\r\n\r\n  px4_Bus_actuator_armed Out1_Y0_l;    // Computed Parameter: Out1_Y0_l\r\n                                          //  Referenced by: '<S68>/Out1'\r\n\r\n  px4_Bus_actuator_armed Constant_Value_j;// Computed Parameter: Constant_Value_j\r\n                                             //  Referenced by: '<S6>/Constant'\r\n\r\n  px4_Bus_actuator_armed Constant_Value_k;// Computed Parameter: Constant_Value_k\r\n                                             //  Referenced by: '<S57>/Constant'\r\n\r\n  real_T yaw_Out_Y0;                   // Computed Parameter: yaw_Out_Y0\r\n                                          //  Referenced by: '<S32>/yaw_Out'\r\n\r\n  real_T Delay_InitialCondition;       // Expression: 0.0\r\n                                          //  Referenced by: '<S30>/Delay'\r\n\r\n  real_T Rate_Value;                   // Expression: 0.01\r\n                                          //  Referenced by: '<S30>/Rate'\r\n\r\n  real_T Gain1_Gain;                   // Expression: -1\r\n                                          //  Referenced by: '<S30>/Gain1'\r\n\r\n  real_T Gain_Gain;                    // Expression: -1\r\n                                          //  Referenced by: '<S30>/Gain'\r\n\r\n  real_T Delay_InitialCondition_g;     // Expression: 1\r\n                                          //  Referenced by: '<S31>/Delay'\r\n\r\n  real_T Constant_Value_fo;            // Expression: 0\r\n                                          //  Referenced by: '<S31>/Constant'\r\n\r\n  real_T Out_Y0;                       // Computed Parameter: Out_Y0\r\n                                          //  Referenced by: '<S28>/Out'\r\n\r\n  real_T Gain_Gain_l;                  // Expression: -1\r\n                                          //  Referenced by: '<S26>/Gain'\r\n\r\n  real_T yaw_Out_Y0_f;                 // Computed Parameter: yaw_Out_Y0_f\r\n                                          //  Referenced by: '<S29>/yaw_Out'\r\n\r\n  real_T Delay_InitialCondition_n;     // Expression: 0.0\r\n                                          //  Referenced by: '<S21>/Delay'\r\n\r\n  real_T Delay_InitialCondition_m;     // Expression: 0.0\r\n                                          //  Referenced by: '<S26>/Delay'\r\n\r\n  real_T Switch_Threshold;             // Expression: 0\r\n                                          //  Referenced by: '<S26>/Switch'\r\n\r\n  real_T Rateofdescent_Value;          // Expression: 0.02\r\n                                          //  Referenced by: '<S26>/Rate of descent'\r\n\r\n  real_T Gain2_Gain;                   // Expression: -1\r\n                                          //  Referenced by: '<S26>/Gain2'\r\n\r\n  real_T Gain1_Gain_a;                 // Expression: -1\r\n                                          //  Referenced by: '<S26>/Gain1'\r\n\r\n  real_T Delay_InitialCondition_j;     // Expression: 1\r\n                                          //  Referenced by: '<S27>/Delay'\r\n\r\n  real_T Constant_Value_nn;            // Expression: 0\r\n                                          //  Referenced by: '<S27>/Constant'\r\n\r\n  real_T Constant_Value_jd;            // Expression: 0\r\n                                          //  Referenced by: '<S33>/Constant'\r\n\r\n  real_T Constant_Value_gw;            // Expression: 6\r\n                                          //  Referenced by: '<S23>/Constant'\r\n\r\n  real_T yaw_Out_Y0_p;                 // Computed Parameter: yaw_Out_Y0_p\r\n                                          //  Referenced by: '<S25>/yaw_Out'\r\n\r\n  real_T Delay_InitialCondition_g0;    // Expression: 1\r\n                                          //  Referenced by: '<S24>/Delay'\r\n\r\n  real_T Constant_Value_i;             // Expression: 0\r\n                                          //  Referenced by: '<S24>/Constant'\r\n\r\n  real_T ReadParameter_SampleTime;     // Expression: -1\r\n                                          //  Referenced by: '<S19>/Read Parameter'\r\n\r\n  real_T ReadParameter_SampleTime_c;   // Expression: -1\r\n                                          //  Referenced by: '<S51>/Read Parameter'\r\n\r\n  real_T ReadParameter_SampleTime_g;   // Expression: -1\r\n                                          //  Referenced by: '<S50>/Read Parameter'\r\n\r\n  real_T Constant1_Value;              // Expression: 0\r\n                                          //  Referenced by: '<S54>/Constant1'\r\n\r\n  real_T Constant1_Value_g;            // Expression: 100\r\n                                          //  Referenced by: '<S55>/Constant1'\r\n\r\n  real_T Gain_Gain_m;                  // Expression: 0.01\r\n                                          //  Referenced by: '<S63>/Gain'\r\n\r\n  real_T Saturation_UpperSat;          // Expression: 1\r\n                                          //  Referenced by: '<S63>/Saturation'\r\n\r\n  real_T Saturation_LowerSat;          // Expression: 0\r\n                                          //  Referenced by: '<S63>/Saturation'\r\n\r\n  real_T Constant2_Value;              // Expression: 0\r\n                                          //  Referenced by: '<S54>/Constant2'\r\n\r\n  real_T Constant2_Value_p;            // Expression: 100\r\n                                          //  Referenced by: '<S55>/Constant2'\r\n\r\n  real_T Gain_Gain_k;                  // Expression: 0.01\r\n                                          //  Referenced by: '<S64>/Gain'\r\n\r\n  real_T Saturation_UpperSat_c;        // Expression: 1\r\n                                          //  Referenced by: '<S64>/Saturation'\r\n\r\n  real_T Saturation_LowerSat_p;        // Expression: 0\r\n                                          //  Referenced by: '<S64>/Saturation'\r\n\r\n  real_T Constant3_Value;              // Expression: 0\r\n                                          //  Referenced by: '<S54>/Constant3'\r\n\r\n  real_T Constant3_Value_o;            // Expression: 100\r\n                                          //  Referenced by: '<S55>/Constant3'\r\n\r\n  real_T Gain_Gain_lf;                 // Expression: 0.01\r\n                                          //  Referenced by: '<S65>/Gain'\r\n\r\n  real_T Saturation_UpperSat_f;        // Expression: 1\r\n                                          //  Referenced by: '<S65>/Saturation'\r\n\r\n  real_T Saturation_LowerSat_c;        // Expression: 0\r\n                                          //  Referenced by: '<S65>/Saturation'\r\n\r\n  real_T Constant4_Value;              // Expression: 0\r\n                                          //  Referenced by: '<S54>/Constant4'\r\n\r\n  real_T Constant4_Value_h;            // Expression: 100\r\n                                          //  Referenced by: '<S55>/Constant4'\r\n\r\n  real_T Gain_Gain_mp;                 // Expression: 0.01\r\n                                          //  Referenced by: '<S66>/Gain'\r\n\r\n  real_T Saturation_UpperSat_o;        // Expression: 1\r\n                                          //  Referenced by: '<S66>/Saturation'\r\n\r\n  real_T Saturation_LowerSat_a;        // Expression: 0\r\n                                          //  Referenced by: '<S66>/Saturation'\r\n\r\n  real_T Constant5_Value;              // Expression: 0\r\n                                          //  Referenced by: '<S54>/Constant5'\r\n\r\n  real_T Constant5_Value_e;            // Expression: 100\r\n                                          //  Referenced by: '<S55>/Constant5'\r\n\r\n  real_T Gain_Gain_g;                  // Expression: 0.01\r\n                                          //  Referenced by: '<S67>/Gain'\r\n\r\n  real_T Saturation_UpperSat_fq;       // Expression: 1\r\n                                          //  Referenced by: '<S67>/Saturation'\r\n\r\n  real_T Saturation_LowerSat_e;        // Expression: 0\r\n                                          //  Referenced by: '<S67>/Saturation'\r\n\r\n  real_T Constant_Value_bd;            // Expression: 0\r\n                                          //  Referenced by: '<S54>/Constant'\r\n\r\n  real_T Constant_Value_a;             // Expression: 100\r\n                                          //  Referenced by: '<S55>/Constant'\r\n\r\n  real_T Gain_Gain_mg;                 // Expression: 0.01\r\n                                          //  Referenced by: '<S62>/Gain'\r\n\r\n  real_T Saturation_UpperSat_j;        // Expression: 1\r\n                                          //  Referenced by: '<S62>/Saturation'\r\n\r\n  real_T Saturation_LowerSat_av;       // Expression: 0\r\n                                          //  Referenced by: '<S62>/Saturation'\r\n\r\n  real_T ReadParameter1_SampleTime;    // Expression: -1\r\n                                          //  Referenced by: '<S55>/Read Parameter1'\r\n\r\n  real_T ReadParameter13_SampleTime;   // Expression: -1\r\n                                          //  Referenced by: '<S55>/Read Parameter13'\r\n\r\n  real_T ReadParameter2_SampleTime;    // Expression: -1\r\n                                          //  Referenced by: '<S55>/Read Parameter2'\r\n\r\n  real_T ReadParameter3_SampleTime;    // Expression: -1\r\n                                          //  Referenced by: '<S55>/Read Parameter3'\r\n\r\n  real_T ReadParameter4_SampleTime;    // Expression: -1\r\n                                          //  Referenced by: '<S55>/Read Parameter4'\r\n\r\n  real_T ReadParameter5_SampleTime;    // Expression: -1\r\n                                          //  Referenced by: '<S55>/Read Parameter5'\r\n\r\n  real_T tau_Yaw_Y0;                   // Computed Parameter: tau_Yaw_Y0\r\n                                          //  Referenced by: '<S73>/tau_Yaw'\r\n\r\n  real_T tau_Pitch_Y0;                 // Computed Parameter: tau_Pitch_Y0\r\n                                          //  Referenced by: '<S73>/tau_Pitch'\r\n\r\n  real_T tau_Roll_Y0;                  // Computed Parameter: tau_Roll_Y0\r\n                                          //  Referenced by: '<S73>/tau_Roll'\r\n\r\n  real_T Constant1_Value_k;            // Expression: 0\r\n                                          //  Referenced by: '<S109>/Constant1'\r\n\r\n  real_T Constant1_Value_o;            // Expression: 0\r\n                                          //  Referenced by: '<S161>/Constant1'\r\n\r\n  real_T Constant1_Value_p;            // Expression: 0\r\n                                          //  Referenced by: '<S213>/Constant1'\r\n\r\n  real_T Clamping_zero_Value;          // Expression: 0\r\n                                          //  Referenced by: '<S109>/Clamping_zero'\r\n\r\n  real_T Integrator_gainval;           // Computed Parameter: Integrator_gainval\r\n                                          //  Referenced by: '<S119>/Integrator'\r\n\r\n  real_T Filter_gainval;               // Computed Parameter: Filter_gainval\r\n                                          //  Referenced by: '<S114>/Filter'\r\n\r\n  real_T RateLimiter2_RisingLim;       // Expression: 40*pi/180\r\n                                          //  Referenced by: '<S73>/Rate Limiter2'\r\n\r\n  real_T RateLimiter2_FallingLim;      // Expression: -40*pi/180\r\n                                          //  Referenced by: '<S73>/Rate Limiter2'\r\n\r\n  real_T RateLimiter2_IC;              // Expression: 0\r\n                                          //  Referenced by: '<S73>/Rate Limiter2'\r\n\r\n  real_T Saturation1_UpperSat;         // Expression: 20*pi/180\r\n                                          //  Referenced by: '<S73>/Saturation1'\r\n\r\n  real_T Saturation1_LowerSat;         // Expression: -20*pi/180\r\n                                          //  Referenced by: '<S73>/Saturation1'\r\n\r\n  real_T Clamping_zero_Value_b;        // Expression: 0\r\n                                          //  Referenced by: '<S161>/Clamping_zero'\r\n\r\n  real_T Integrator_gainval_i;       // Computed Parameter: Integrator_gainval_i\r\n                                        //  Referenced by: '<S171>/Integrator'\r\n\r\n  real_T Filter_gainval_p;             // Computed Parameter: Filter_gainval_p\r\n                                          //  Referenced by: '<S166>/Filter'\r\n\r\n  real_T RateLimiter1_RisingLim;       // Expression: 40*pi/180\r\n                                          //  Referenced by: '<S73>/Rate Limiter1'\r\n\r\n  real_T RateLimiter1_FallingLim;      // Expression: -40*pi/180\r\n                                          //  Referenced by: '<S73>/Rate Limiter1'\r\n\r\n  real_T RateLimiter1_IC;              // Expression: 0\r\n                                          //  Referenced by: '<S73>/Rate Limiter1'\r\n\r\n  real_T Saturation_UpperSat_m;        // Expression: 20*pi/180\r\n                                          //  Referenced by: '<S73>/Saturation'\r\n\r\n  real_T Saturation_LowerSat_l;        // Expression: -20*pi/180\r\n                                          //  Referenced by: '<S73>/Saturation'\r\n\r\n  real_T Clamping_zero_Value_f;        // Expression: 0\r\n                                          //  Referenced by: '<S213>/Clamping_zero'\r\n\r\n  real_T Integrator_gainval_p;       // Computed Parameter: Integrator_gainval_p\r\n                                        //  Referenced by: '<S223>/Integrator'\r\n\r\n  real_T Filter_gainval_k;             // Computed Parameter: Filter_gainval_k\r\n                                          //  Referenced by: '<S218>/Filter'\r\n\r\n  real_T Constant_Value_ag;            // Expression: 0\r\n                                          //  Referenced by: '<S340>/Constant'\r\n\r\n  real_T Switch1_Threshold;            // Expression: 0\r\n                                          //  Referenced by: '<S342>/Switch1'\r\n\r\n  real_T des_pitch_Y0;                 // Computed Parameter: des_pitch_Y0\r\n                                          //  Referenced by: '<S76>/des_pitch'\r\n\r\n  real_T des_roll_Y0;                  // Computed Parameter: des_roll_Y0\r\n                                          //  Referenced by: '<S76>/des_roll'\r\n\r\n  real_T des_yawrate_Y0;               // Computed Parameter: des_yawrate_Y0\r\n                                          //  Referenced by: '<S76>/des_yawrate'\r\n\r\n  real_T tau_Thrust_Y0;                // Computed Parameter: tau_Thrust_Y0\r\n                                          //  Referenced by: '<S76>/tau_Thrust'\r\n\r\n  real_T Constant1_Value_c;            // Expression: 0\r\n                                          //  Referenced by: '<S524>/Constant1'\r\n\r\n  real_T Constant1_Value_f;            // Expression: 0\r\n                                          //  Referenced by: '<S576>/Constant1'\r\n\r\n  real_T Gain_Gain_a;                  // Expression: -1\r\n                                          //  Referenced by: '<S341>/Gain'\r\n\r\n  real_T Constant_Value_p;             // Expression: 2*pi\r\n                                          //  Referenced by: '<S342>/Constant'\r\n\r\n  real_T Switch_Threshold_p;           // Expression: pi\r\n                                          //  Referenced by: '<S342>/Switch'\r\n\r\n  real_T Gain1_Gain_ad;                // Expression: -1\r\n                                          //  Referenced by: '<S76>/Gain1'\r\n\r\n  real_T Gain1_Gain_j;                 // Expression: -1\r\n                                          //  Referenced by: '<S340>/Gain1'\r\n\r\n  real_T Clamping_zero_Value_o;        // Expression: 0\r\n                                          //  Referenced by: '<S524>/Clamping_zero'\r\n\r\n  real_T Filter_gainval_i;             // Computed Parameter: Filter_gainval_i\r\n                                          //  Referenced by: '<S529>/Filter'\r\n\r\n  real_T Integrator_gainval_p4;     // Computed Parameter: Integrator_gainval_p4\r\n                                       //  Referenced by: '<S534>/Integrator'\r\n\r\n  real_T Clamping_zero_Value_bl;       // Expression: 0\r\n                                          //  Referenced by: '<S576>/Clamping_zero'\r\n\r\n  real_T Filter_gainval_d;             // Computed Parameter: Filter_gainval_d\r\n                                          //  Referenced by: '<S581>/Filter'\r\n\r\n  real_T Integrator_gainval_ik;     // Computed Parameter: Integrator_gainval_ik\r\n                                       //  Referenced by: '<S586>/Integrator'\r\n\r\n  real_T Constant_Value_pp[4];         // Expression: [1 0 0 0]\r\n                                          //  Referenced by: '<S77>/Constant'\r\n\r\n  real_T Constant_Value_c;             // Expression: 1\r\n                                          //  Referenced by: '<S607>/Constant'\r\n\r\n  real_T Constant_Value_md;            // Expression: 1\r\n                                          //  Referenced by: '<S608>/Constant'\r\n\r\n  real_T Switch_Threshold_o;           // Expression: 0\r\n                                          //  Referenced by: '<S77>/Switch'\r\n\r\n  real_T Constant2_Value_g;            // Expression: 1500\r\n                                          //  Referenced by: '<S75>/Constant2'\r\n\r\n  real_T Gain2_Gain_d;                 // Expression: 1/400\r\n                                          //  Referenced by: '<S75>/Gain2'\r\n\r\n  real_T Saturation2_UpperSat;         // Expression: 1\r\n                                          //  Referenced by: '<S75>/Saturation2'\r\n\r\n  real_T Saturation2_LowerSat;         // Expression: -1\r\n                                          //  Referenced by: '<S75>/Saturation2'\r\n\r\n  real_T Gain1_Gain_h;                 // Expression: -20*pi/180\r\n                                          //  Referenced by: '<S4>/Gain1'\r\n\r\n  real_T Constant1_Value_h;            // Expression: 1500\r\n                                          //  Referenced by: '<S75>/Constant1'\r\n\r\n  real_T Gain1_Gain_e;                 // Expression: 1/400\r\n                                          //  Referenced by: '<S75>/Gain1'\r\n\r\n  real_T Saturation1_UpperSat_p;       // Expression: 1\r\n                                          //  Referenced by: '<S75>/Saturation1'\r\n\r\n  real_T Saturation1_LowerSat_j;       // Expression: -1\r\n                                          //  Referenced by: '<S75>/Saturation1'\r\n\r\n  real_T Gain2_Gain_m;                 // Expression: 20*pi/180\r\n                                          //  Referenced by: '<S4>/Gain2'\r\n\r\n  real_T Constant_Value_ol;            // Expression: 1100\r\n                                          //  Referenced by: '<S75>/Constant'\r\n\r\n  real_T Gain_Gain_e;                  // Expression: 1/800\r\n                                          //  Referenced by: '<S75>/Gain'\r\n\r\n  real_T Saturation_UpperSat_ji;       // Expression: 0.90\r\n                                          //  Referenced by: '<S75>/Saturation'\r\n\r\n  real_T Saturation_LowerSat_l4;       // Expression: 0\r\n                                          //  Referenced by: '<S75>/Saturation'\r\n\r\n  real_T Constant3_Value_n;            // Expression: 1500\r\n                                          //  Referenced by: '<S75>/Constant3'\r\n\r\n  real_T Gain3_Gain;                   // Expression: 1/400\r\n                                          //  Referenced by: '<S75>/Gain3'\r\n\r\n  real_T Saturation3_UpperSat;         // Expression: 1\r\n                                          //  Referenced by: '<S75>/Saturation3'\r\n\r\n  real_T Saturation3_LowerSat;         // Expression: -1\r\n                                          //  Referenced by: '<S75>/Saturation3'\r\n\r\n  real_T Gain4_Gain;                   // Expression: 50*pi/180\r\n                                          //  Referenced by: '<S4>/Gain4'\r\n\r\n  real_T Gain_Gain_k1;                 // Expression: -1\r\n                                          //  Referenced by: '<S4>/Gain'\r\n\r\n  real_T Gain_Gain_kw;                 // Expression: 5\r\n                                          //  Referenced by: '<S3>/Gain'\r\n\r\n  real_T Gain1_Gain_b;                 // Expression: 5\r\n                                          //  Referenced by: '<S3>/Gain1'\r\n\r\n  real_T Gain2_Gain_du;                // Expression: 10\r\n                                          //  Referenced by: '<S3>/Gain2'\r\n\r\n  real_T Gain3_Gain_o;                 // Expression: 1\r\n                                          //  Referenced by: '<S3>/Gain3'\r\n\r\n  real_T Constant_Value_olz;           // Expression: 0\r\n                                          //  Referenced by: '<S59>/Constant'\r\n\r\n  uint64_T Constant7_Value;            // Computed Parameter: Constant7_Value\r\n                                          //  Referenced by: '<S44>/Constant7'\r\n\r\n  real32_T Constant1_Value_d[2];       // Computed Parameter: Constant1_Value_d\r\n                                          //  Referenced by: '<S51>/Constant1'\r\n\r\n  real32_T Constant_Value_f2;          // Computed Parameter: Constant_Value_f2\r\n                                          //  Referenced by: '<S51>/Constant'\r\n\r\n  real32_T Gain_Gain_h;                // Computed Parameter: Gain_Gain_h\r\n                                          //  Referenced by: '<S50>/Gain'\r\n\r\n  real32_T Constant1_Value_k4[2];      // Computed Parameter: Constant1_Value_k4\r\n                                          //  Referenced by: '<S50>/Constant1'\r\n\r\n  real32_T Constant_Value_l4;          // Computed Parameter: Constant_Value_l4\r\n                                          //  Referenced by: '<S50>/Constant'\r\n\r\n  real32_T Constant_Value_fh[3];       // Computed Parameter: Constant_Value_fh\r\n                                          //  Referenced by: '<S44>/Constant'\r\n\r\n  real32_T Constant1_Value_hv[3];      // Computed Parameter: Constant1_Value_hv\r\n                                          //  Referenced by: '<S44>/Constant1'\r\n\r\n  real32_T Constant2_Value_f[3];       // Computed Parameter: Constant2_Value_f\r\n                                          //  Referenced by: '<S44>/Constant2'\r\n\r\n  real32_T Constant3_Value_a;          // Computed Parameter: Constant3_Value_a\r\n                                          //  Referenced by: '<S44>/Constant3'\r\n\r\n  real32_T Constant4_Value_g;          // Computed Parameter: Constant4_Value_g\r\n                                          //  Referenced by: '<S44>/Constant4'\r\n\r\n  boolean_T Constant5_Value_j;         // Computed Parameter: Constant5_Value_j\r\n                                          //  Referenced by: '<S42>/Constant5'\r\n\r\n  boolean_T Constant5_Value_k;         // Computed Parameter: Constant5_Value_k\r\n                                          //  Referenced by: '<S43>/Constant5'\r\n\r\n  boolean_T Constant1_Value_dl;        // Computed Parameter: Constant1_Value_dl\r\n                                          //  Referenced by: '<S45>/Constant1'\r\n\r\n  boolean_T Constant5_Value_h;         // Computed Parameter: Constant5_Value_h\r\n                                          //  Referenced by: '<S45>/Constant5'\r\n\r\n  boolean_T Constant5_Value_l;         // Computed Parameter: Constant5_Value_l\r\n                                          //  Referenced by: '<S44>/Constant5'\r\n\r\n  int8_T Constant_Value_ge;            // Computed Parameter: Constant_Value_ge\r\n                                          //  Referenced by: '<S109>/Constant'\r\n\r\n  int8_T Constant2_Value_i;            // Computed Parameter: Constant2_Value_i\r\n                                          //  Referenced by: '<S109>/Constant2'\r\n\r\n  int8_T Constant3_Value_h;            // Computed Parameter: Constant3_Value_h\r\n                                          //  Referenced by: '<S109>/Constant3'\r\n\r\n  int8_T Constant4_Value_f;            // Computed Parameter: Constant4_Value_f\r\n                                          //  Referenced by: '<S109>/Constant4'\r\n\r\n  int8_T Constant_Value_a1;            // Computed Parameter: Constant_Value_a1\r\n                                          //  Referenced by: '<S161>/Constant'\r\n\r\n  int8_T Constant2_Value_l;            // Computed Parameter: Constant2_Value_l\r\n                                          //  Referenced by: '<S161>/Constant2'\r\n\r\n  int8_T Constant3_Value_j;            // Computed Parameter: Constant3_Value_j\r\n                                          //  Referenced by: '<S161>/Constant3'\r\n\r\n  int8_T Constant4_Value_a;            // Computed Parameter: Constant4_Value_a\r\n                                          //  Referenced by: '<S161>/Constant4'\r\n\r\n  int8_T Constant_Value_jj;            // Computed Parameter: Constant_Value_jj\r\n                                          //  Referenced by: '<S213>/Constant'\r\n\r\n  int8_T Constant2_Value_o;            // Computed Parameter: Constant2_Value_o\r\n                                          //  Referenced by: '<S213>/Constant2'\r\n\r\n  int8_T Constant3_Value_l;            // Computed Parameter: Constant3_Value_l\r\n                                          //  Referenced by: '<S213>/Constant3'\r\n\r\n  int8_T Constant4_Value_n;            // Computed Parameter: Constant4_Value_n\r\n                                          //  Referenced by: '<S213>/Constant4'\r\n\r\n  int8_T Constant_Value_n1;            // Computed Parameter: Constant_Value_n1\r\n                                          //  Referenced by: '<S524>/Constant'\r\n\r\n  int8_T Constant2_Value_gq;           // Computed Parameter: Constant2_Value_gq\r\n                                          //  Referenced by: '<S524>/Constant2'\r\n\r\n  int8_T Constant3_Value_i;            // Computed Parameter: Constant3_Value_i\r\n                                          //  Referenced by: '<S524>/Constant3'\r\n\r\n  int8_T Constant4_Value_hf;           // Computed Parameter: Constant4_Value_hf\r\n                                          //  Referenced by: '<S524>/Constant4'\r\n\r\n  int8_T Constant_Value_gf;            // Computed Parameter: Constant_Value_gf\r\n                                          //  Referenced by: '<S576>/Constant'\r\n\r\n  int8_T Constant2_Value_ga;           // Computed Parameter: Constant2_Value_ga\r\n                                          //  Referenced by: '<S576>/Constant2'\r\n\r\n  int8_T Constant3_Value_b;            // Computed Parameter: Constant3_Value_b\r\n                                          //  Referenced by: '<S576>/Constant3'\r\n\r\n  int8_T Constant4_Value_fv;           // Computed Parameter: Constant4_Value_fv\r\n                                          //  Referenced by: '<S576>/Constant4'\r\n\r\n  uint8_T Constant_Value_fm;           // Computed Parameter: Constant_Value_fm\r\n                                          //  Referenced by: '<S36>/Constant'\r\n\r\n  uint8_T Constant6_Value;             // Computed Parameter: Constant6_Value\r\n                                          //  Referenced by: '<S44>/Constant6'\r\n\r\n};\r\n\r\n// Real-time Model Data Structure\r\nstruct tag_RTM_FLIGHT_HEXA_Hovering_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n// Block parameters (default storage)\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern P_FLIGHT_HEXA_Hovering_T FLIGHT_HEXA_Hovering_P;\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n\r\n// Block signals (default storage)\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern struct B_FLIGHT_HEXA_Hovering_T FLIGHT_HEXA_Hovering_B;\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n\r\n// Block states (default storage)\r\nextern struct DW_FLIGHT_HEXA_Hovering_T FLIGHT_HEXA_Hovering_DW;\r\n\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  // Model entry point functions\r\n  extern void FLIGHT_HEXA_Hovering_initialize(void);\r\n  extern void FLIGHT_HEXA_Hovering_step(void);\r\n  extern void FLIGHT_HEXA_Hovering_terminate(void);\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n\r\n// Real-time Model object\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern RT_MODEL_FLIGHT_HEXA_Hovering_T *const FLIGHT_HEXA_Hovering_M;\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n\r\n#endif\r\n\r\nextern volatile boolean_T stopRequested;\r\nextern volatile boolean_T runModel;\r\n\r\n//-\r\n//  These blocks were eliminated from the model due to optimizations:\r\n//\r\n//  Block '<S5>/NOT' : Unused code path elimination\r\n//  Block '<S6>/NOT' : Unused code path elimination\r\n//  Block '<S7>/Bitwise Operator' : Unused code path elimination\r\n//  Block '<S7>/Data Type Conversion' : Unused code path elimination\r\n//  Block '<S7>/Data Type Conversion1' : Unused code path elimination\r\n//  Block '<S7>/Data Type Conversion2' : Unused code path elimination\r\n//  Block '<S7>/Gain' : Unused code path elimination\r\n//  Block '<S7>/Gain1' : Unused code path elimination\r\n//  Block '<S12>/NOT' : Unused code path elimination\r\n//  Block '<S8>/NOT' : Unused code path elimination\r\n//  Block '<S9>/NOT' : Unused code path elimination\r\n//  Block '<S39>/Compare' : Unused code path elimination\r\n//  Block '<S39>/Constant' : Unused code path elimination\r\n//  Block '<S40>/NOT' : Unused code path elimination\r\n//  Block '<S35>/Subtract' : Unused code path elimination\r\n//  Block '<S37>/NOT' : Unused code path elimination\r\n//  Block '<S38>/NOT' : Unused code path elimination\r\n//  Block '<S57>/NOT' : Unused code path elimination\r\n//  Block '<S58>/Bitwise Operator' : Unused code path elimination\r\n//  Block '<S58>/Data Type Conversion' : Unused code path elimination\r\n//  Block '<S58>/Data Type Conversion1' : Unused code path elimination\r\n//  Block '<S58>/Data Type Conversion2' : Unused code path elimination\r\n//  Block '<S58>/Gain' : Unused code path elimination\r\n//  Block '<S58>/Gain1' : Unused code path elimination\r\n//  Block '<S69>/NOT' : Unused code path elimination\r\n//  Block '<S348>/Data Type Duplicate' : Unused code path elimination\r\n//  Block '<S348>/Data Type Propagation' : Unused code path elimination\r\n//  Block '<S21>/Reshape1' : Reshape block reduction\r\n//  Block '<S4>/Data Type Conversion' : Eliminate redundant data type conversion\r\n\r\n\r\n//-\r\n//  The generated code includes comments that allow you to trace directly\r\n//  back to the appropriate location in the model.  The basic format\r\n//  is <system>/block_name, where system is the system number (uniquely\r\n//  assigned by Simulink) and block_name is the name of the block.\r\n//\r\n//  Use the MATLAB hilite_system command to trace the generated code back\r\n//  to the model.  For example,\r\n//\r\n//  hilite_system('<S3>')    - opens system 3\r\n//  hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n//\r\n//  Here is the system hierarchy for this model\r\n//\r\n//  '<Root>' : 'FLIGHT_HEXA_Hovering'\r\n//  '<S1>'   : 'FLIGHT_HEXA_Hovering/Estimator Output'\r\n//  '<S2>'   : 'FLIGHT_HEXA_Hovering/Navigation'\r\n//  '<S3>'   : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors'\r\n//  '<S4>'   : 'FLIGHT_HEXA_Hovering/Subsystem Reference'\r\n//  '<S5>'   : 'FLIGHT_HEXA_Hovering/Estimator Output/PX4 uORB Read1'\r\n//  '<S6>'   : 'FLIGHT_HEXA_Hovering/Estimator Output/PX4 uORB Read2'\r\n//  '<S7>'   : 'FLIGHT_HEXA_Hovering/Estimator Output/Radio Control Transmitter'\r\n//  '<S8>'   : 'FLIGHT_HEXA_Hovering/Estimator Output/vehicle_attitude'\r\n//  '<S9>'   : 'FLIGHT_HEXA_Hovering/Estimator Output/vehicle_local_pos'\r\n//  '<S10>'  : 'FLIGHT_HEXA_Hovering/Estimator Output/PX4 uORB Read1/Enabled Subsystem'\r\n//  '<S11>'  : 'FLIGHT_HEXA_Hovering/Estimator Output/PX4 uORB Read2/Enabled Subsystem'\r\n//  '<S12>'  : 'FLIGHT_HEXA_Hovering/Estimator Output/Radio Control Transmitter/PX4 uORB Read'\r\n//  '<S13>'  : 'FLIGHT_HEXA_Hovering/Estimator Output/Radio Control Transmitter/PX4 uORB Read/Enabled Subsystem'\r\n//  '<S14>'  : 'FLIGHT_HEXA_Hovering/Estimator Output/vehicle_attitude/Enabled Subsystem'\r\n//  '<S15>'  : 'FLIGHT_HEXA_Hovering/Estimator Output/vehicle_local_pos/Enabled Subsystem'\r\n//  '<S16>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm'\r\n//  '<S17>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission'\r\n//  '<S18>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem'\r\n//  '<S19>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC'\r\n//  '<S20>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/IDLE'\r\n//  '<S21>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Land'\r\n//  '<S22>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Take-off'\r\n//  '<S23>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Waypoint'\r\n//  '<S24>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/IDLE/Maintain Current Yaw during IDLE'\r\n//  '<S25>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/IDLE/Maintain Current Yaw during IDLE/Enabled Subsystem2'\r\n//  '<S26>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Land/Ensure Smooth descend during Land'\r\n//  '<S27>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Land/Maintain Current Yaw during Land'\r\n//  '<S28>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Land/Ensure Smooth descend during Land/Enabled Subsystem'\r\n//  '<S29>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Land/Maintain Current Yaw during Land/Enabled Subsystem2'\r\n//  '<S30>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Take-off/Ensure smooth ascend during Takeoff'\r\n//  '<S31>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Take-off/Maintain Current Yaw during TakeOff'\r\n//  '<S32>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Take-off/Maintain Current Yaw during TakeOff/Enabled Subsystem2'\r\n//  '<S33>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Waypoint/Output signal conditioning'\r\n//  '<S34>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Guidance Subsystem/Waypoint/Output signal conditioning/Compare To Constant'\r\n//  '<S35>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Read waypoints from OBC'\r\n//  '<S36>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC'\r\n//  '<S37>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/homePositionRead'\r\n//  '<S38>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/positionSetpointRead'\r\n//  '<S39>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Read waypoints from OBC/Compare To Constant'\r\n//  '<S40>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Read waypoints from OBC/PX4 uORB Read'\r\n//  '<S41>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Read waypoints from OBC/PX4 uORB Read/Enabled Subsystem'\r\n//  '<S42>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/Current_Type_Adapted_WayPoint'\r\n//  '<S43>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/Current_WayPoint'\r\n//  '<S44>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/Empty_WayPoint'\r\n//  '<S45>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/Next_WayPoint'\r\n//  '<S46>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/PX4 uORB Message'\r\n//  '<S47>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/PX4 uORB Write'\r\n//  '<S48>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/Current_Type_Adapted_WayPoint/Convert_to_type_adapted_WP'\r\n//  '<S49>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/Current_Type_Adapted_WayPoint/Convert_to_type_adapted_WP/If Action Subsystem'\r\n//  '<S50>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/Current_Type_Adapted_WayPoint/Convert_to_type_adapted_WP/If Action Subsystem1'\r\n//  '<S51>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/Send waypoints to OBC/Current_Type_Adapted_WayPoint/Convert_to_type_adapted_WP/If Action Subsystem2'\r\n//  '<S52>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/homePositionRead/Enabled Subsystem'\r\n//  '<S53>'  : 'FLIGHT_HEXA_Hovering/Navigation/Quadcopter Navigation Algorithm/Read waypoint from QGroundControl Mission/Read Position Setpoint from Mission set in QGC/positionSetpointRead/Enabled Subsystem'\r\n//  '<S54>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Emergency Kill'\r\n//  '<S55>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Fault_Injection'\r\n//  '<S56>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/MATLAB Function'\r\n//  '<S57>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/PX4 uORB Read2'\r\n//  '<S58>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Radio Control Transmitter'\r\n//  '<S59>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Subsystem'\r\n//  '<S60>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Emergency Kill/Compare To Constant'\r\n//  '<S61>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Fault_Injection/Compare To Constant'\r\n//  '<S62>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Fault_Injection/Subsystem Reference'\r\n//  '<S63>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Fault_Injection/Subsystem Reference1'\r\n//  '<S64>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Fault_Injection/Subsystem Reference2'\r\n//  '<S65>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Fault_Injection/Subsystem Reference3'\r\n//  '<S66>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Fault_Injection/Subsystem Reference4'\r\n//  '<S67>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Fault_Injection/Subsystem Reference5'\r\n//  '<S68>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/PX4 uORB Read2/Enabled Subsystem'\r\n//  '<S69>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Radio Control Transmitter/PX4 uORB Read'\r\n//  '<S70>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Radio Control Transmitter/PX4 uORB Read/Enabled Subsystem'\r\n//  '<S71>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Subsystem/PX4 uORB Message'\r\n//  '<S72>'  : 'FLIGHT_HEXA_Hovering/Publish ActuatorMotors/Subsystem/PX4 uORB Write'\r\n//  '<S73>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller'\r\n//  '<S74>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Chart'\r\n//  '<S75>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/PWM2CMD'\r\n//  '<S76>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller'\r\n//  '<S77>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternion Validity Check'\r\n//  '<S78>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles'\r\n//  '<S79>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller'\r\n//  '<S80>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1'\r\n//  '<S81>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2'\r\n//  '<S82>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3'\r\n//  '<S83>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4'\r\n//  '<S84>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Anti-windup'\r\n//  '<S85>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/D Gain'\r\n//  '<S86>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/External Derivative'\r\n//  '<S87>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Filter'\r\n//  '<S88>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Filter ICs'\r\n//  '<S89>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/I Gain'\r\n//  '<S90>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Ideal P Gain'\r\n//  '<S91>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Ideal P Gain Fdbk'\r\n//  '<S92>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Integrator'\r\n//  '<S93>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Integrator ICs'\r\n//  '<S94>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/N Copy'\r\n//  '<S95>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/N Gain'\r\n//  '<S96>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/P Copy'\r\n//  '<S97>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Parallel P Gain'\r\n//  '<S98>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Reset Signal'\r\n//  '<S99>'  : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Saturation'\r\n//  '<S100>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Saturation Fdbk'\r\n//  '<S101>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Sum'\r\n//  '<S102>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Sum Fdbk'\r\n//  '<S103>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Tracking Mode'\r\n//  '<S104>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Tracking Mode Sum'\r\n//  '<S105>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Tsamp - Integral'\r\n//  '<S106>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Tsamp - Ngain'\r\n//  '<S107>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/postSat Signal'\r\n//  '<S108>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/preSat Signal'\r\n//  '<S109>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Anti-windup/Disc. Clamping Parallel'\r\n//  '<S110>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n//  '<S111>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n//  '<S112>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/D Gain/Internal Parameters'\r\n//  '<S113>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/External Derivative/Error'\r\n//  '<S114>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Filter/Disc. Forward Euler Filter'\r\n//  '<S115>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Filter ICs/Internal IC - Filter'\r\n//  '<S116>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/I Gain/Internal Parameters'\r\n//  '<S117>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Ideal P Gain/Passthrough'\r\n//  '<S118>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n//  '<S119>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Integrator/Discrete'\r\n//  '<S120>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Integrator ICs/Internal IC'\r\n//  '<S121>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/N Copy/Disabled'\r\n//  '<S122>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/N Gain/Internal Parameters'\r\n//  '<S123>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/P Copy/Disabled'\r\n//  '<S124>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Parallel P Gain/Internal Parameters'\r\n//  '<S125>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Reset Signal/Disabled'\r\n//  '<S126>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Saturation/Enabled'\r\n//  '<S127>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Saturation Fdbk/Disabled'\r\n//  '<S128>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Sum/Sum_PID'\r\n//  '<S129>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Sum Fdbk/Disabled'\r\n//  '<S130>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Tracking Mode/Disabled'\r\n//  '<S131>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Tracking Mode Sum/Passthrough'\r\n//  '<S132>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S133>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/Tsamp - Ngain/Passthrough'\r\n//  '<S134>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/postSat Signal/Forward_Path'\r\n//  '<S135>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller/preSat Signal/Forward_Path'\r\n//  '<S136>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Anti-windup'\r\n//  '<S137>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/D Gain'\r\n//  '<S138>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/External Derivative'\r\n//  '<S139>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Filter'\r\n//  '<S140>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Filter ICs'\r\n//  '<S141>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/I Gain'\r\n//  '<S142>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Ideal P Gain'\r\n//  '<S143>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Ideal P Gain Fdbk'\r\n//  '<S144>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Integrator'\r\n//  '<S145>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Integrator ICs'\r\n//  '<S146>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/N Copy'\r\n//  '<S147>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/N Gain'\r\n//  '<S148>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/P Copy'\r\n//  '<S149>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Parallel P Gain'\r\n//  '<S150>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Reset Signal'\r\n//  '<S151>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Saturation'\r\n//  '<S152>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Saturation Fdbk'\r\n//  '<S153>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Sum'\r\n//  '<S154>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Sum Fdbk'\r\n//  '<S155>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Tracking Mode'\r\n//  '<S156>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Tracking Mode Sum'\r\n//  '<S157>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Tsamp - Integral'\r\n//  '<S158>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Tsamp - Ngain'\r\n//  '<S159>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/postSat Signal'\r\n//  '<S160>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/preSat Signal'\r\n//  '<S161>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Anti-windup/Disc. Clamping Parallel'\r\n//  '<S162>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n//  '<S163>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n//  '<S164>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/D Gain/Internal Parameters'\r\n//  '<S165>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/External Derivative/Error'\r\n//  '<S166>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Filter/Disc. Forward Euler Filter'\r\n//  '<S167>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Filter ICs/Internal IC - Filter'\r\n//  '<S168>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/I Gain/Internal Parameters'\r\n//  '<S169>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Ideal P Gain/Passthrough'\r\n//  '<S170>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Ideal P Gain Fdbk/Disabled'\r\n//  '<S171>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Integrator/Discrete'\r\n//  '<S172>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Integrator ICs/Internal IC'\r\n//  '<S173>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/N Copy/Disabled'\r\n//  '<S174>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/N Gain/Internal Parameters'\r\n//  '<S175>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/P Copy/Disabled'\r\n//  '<S176>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Parallel P Gain/Internal Parameters'\r\n//  '<S177>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Reset Signal/Disabled'\r\n//  '<S178>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Saturation/Enabled'\r\n//  '<S179>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Saturation Fdbk/Disabled'\r\n//  '<S180>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Sum/Sum_PID'\r\n//  '<S181>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Sum Fdbk/Disabled'\r\n//  '<S182>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Tracking Mode/Disabled'\r\n//  '<S183>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Tracking Mode Sum/Passthrough'\r\n//  '<S184>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S185>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/Tsamp - Ngain/Passthrough'\r\n//  '<S186>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/postSat Signal/Forward_Path'\r\n//  '<S187>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller1/preSat Signal/Forward_Path'\r\n//  '<S188>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Anti-windup'\r\n//  '<S189>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/D Gain'\r\n//  '<S190>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/External Derivative'\r\n//  '<S191>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Filter'\r\n//  '<S192>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Filter ICs'\r\n//  '<S193>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/I Gain'\r\n//  '<S194>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Ideal P Gain'\r\n//  '<S195>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Ideal P Gain Fdbk'\r\n//  '<S196>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Integrator'\r\n//  '<S197>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Integrator ICs'\r\n//  '<S198>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/N Copy'\r\n//  '<S199>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/N Gain'\r\n//  '<S200>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/P Copy'\r\n//  '<S201>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Parallel P Gain'\r\n//  '<S202>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Reset Signal'\r\n//  '<S203>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Saturation'\r\n//  '<S204>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Saturation Fdbk'\r\n//  '<S205>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Sum'\r\n//  '<S206>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Sum Fdbk'\r\n//  '<S207>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Tracking Mode'\r\n//  '<S208>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Tracking Mode Sum'\r\n//  '<S209>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Tsamp - Integral'\r\n//  '<S210>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Tsamp - Ngain'\r\n//  '<S211>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/postSat Signal'\r\n//  '<S212>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/preSat Signal'\r\n//  '<S213>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Anti-windup/Disc. Clamping Parallel'\r\n//  '<S214>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n//  '<S215>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n//  '<S216>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/D Gain/Internal Parameters'\r\n//  '<S217>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/External Derivative/Error'\r\n//  '<S218>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Filter/Disc. Forward Euler Filter'\r\n//  '<S219>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Filter ICs/Internal IC - Filter'\r\n//  '<S220>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/I Gain/Internal Parameters'\r\n//  '<S221>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Ideal P Gain/Passthrough'\r\n//  '<S222>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Ideal P Gain Fdbk/Disabled'\r\n//  '<S223>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Integrator/Discrete'\r\n//  '<S224>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Integrator ICs/Internal IC'\r\n//  '<S225>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/N Copy/Disabled'\r\n//  '<S226>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/N Gain/Internal Parameters'\r\n//  '<S227>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/P Copy/Disabled'\r\n//  '<S228>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Parallel P Gain/Internal Parameters'\r\n//  '<S229>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Reset Signal/Disabled'\r\n//  '<S230>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Saturation/Enabled'\r\n//  '<S231>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Saturation Fdbk/Disabled'\r\n//  '<S232>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Sum/Sum_PID'\r\n//  '<S233>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Sum Fdbk/Disabled'\r\n//  '<S234>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Tracking Mode/Disabled'\r\n//  '<S235>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Tracking Mode Sum/Passthrough'\r\n//  '<S236>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S237>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/Tsamp - Ngain/Passthrough'\r\n//  '<S238>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/postSat Signal/Forward_Path'\r\n//  '<S239>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller2/preSat Signal/Forward_Path'\r\n//  '<S240>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Anti-windup'\r\n//  '<S241>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/D Gain'\r\n//  '<S242>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/External Derivative'\r\n//  '<S243>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Filter'\r\n//  '<S244>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Filter ICs'\r\n//  '<S245>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/I Gain'\r\n//  '<S246>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Ideal P Gain'\r\n//  '<S247>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Ideal P Gain Fdbk'\r\n//  '<S248>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Integrator'\r\n//  '<S249>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Integrator ICs'\r\n//  '<S250>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/N Copy'\r\n//  '<S251>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/N Gain'\r\n//  '<S252>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/P Copy'\r\n//  '<S253>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Parallel P Gain'\r\n//  '<S254>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Reset Signal'\r\n//  '<S255>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Saturation'\r\n//  '<S256>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Saturation Fdbk'\r\n//  '<S257>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Sum'\r\n//  '<S258>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Sum Fdbk'\r\n//  '<S259>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Tracking Mode'\r\n//  '<S260>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Tracking Mode Sum'\r\n//  '<S261>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Tsamp - Integral'\r\n//  '<S262>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Tsamp - Ngain'\r\n//  '<S263>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/postSat Signal'\r\n//  '<S264>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/preSat Signal'\r\n//  '<S265>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Anti-windup/Disabled'\r\n//  '<S266>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/D Gain/Disabled'\r\n//  '<S267>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/External Derivative/Disabled'\r\n//  '<S268>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Filter/Disabled'\r\n//  '<S269>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Filter ICs/Disabled'\r\n//  '<S270>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/I Gain/Disabled'\r\n//  '<S271>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Ideal P Gain/Passthrough'\r\n//  '<S272>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Ideal P Gain Fdbk/Disabled'\r\n//  '<S273>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Integrator/Disabled'\r\n//  '<S274>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Integrator ICs/Disabled'\r\n//  '<S275>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/N Copy/Disabled wSignal Specification'\r\n//  '<S276>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/N Gain/Disabled'\r\n//  '<S277>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/P Copy/Disabled'\r\n//  '<S278>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Parallel P Gain/Internal Parameters'\r\n//  '<S279>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Reset Signal/Disabled'\r\n//  '<S280>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Saturation/Passthrough'\r\n//  '<S281>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Saturation Fdbk/Disabled'\r\n//  '<S282>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Sum/Passthrough_P'\r\n//  '<S283>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Sum Fdbk/Disabled'\r\n//  '<S284>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Tracking Mode/Disabled'\r\n//  '<S285>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Tracking Mode Sum/Passthrough'\r\n//  '<S286>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S287>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/Tsamp - Ngain/Passthrough'\r\n//  '<S288>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/postSat Signal/Forward_Path'\r\n//  '<S289>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller3/preSat Signal/Forward_Path'\r\n//  '<S290>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Anti-windup'\r\n//  '<S291>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/D Gain'\r\n//  '<S292>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/External Derivative'\r\n//  '<S293>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Filter'\r\n//  '<S294>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Filter ICs'\r\n//  '<S295>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/I Gain'\r\n//  '<S296>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Ideal P Gain'\r\n//  '<S297>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Ideal P Gain Fdbk'\r\n//  '<S298>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Integrator'\r\n//  '<S299>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Integrator ICs'\r\n//  '<S300>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/N Copy'\r\n//  '<S301>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/N Gain'\r\n//  '<S302>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/P Copy'\r\n//  '<S303>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Parallel P Gain'\r\n//  '<S304>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Reset Signal'\r\n//  '<S305>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Saturation'\r\n//  '<S306>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Saturation Fdbk'\r\n//  '<S307>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Sum'\r\n//  '<S308>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Sum Fdbk'\r\n//  '<S309>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Tracking Mode'\r\n//  '<S310>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Tracking Mode Sum'\r\n//  '<S311>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Tsamp - Integral'\r\n//  '<S312>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Tsamp - Ngain'\r\n//  '<S313>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/postSat Signal'\r\n//  '<S314>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/preSat Signal'\r\n//  '<S315>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Anti-windup/Disabled'\r\n//  '<S316>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/D Gain/Disabled'\r\n//  '<S317>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/External Derivative/Disabled'\r\n//  '<S318>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Filter/Disabled'\r\n//  '<S319>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Filter ICs/Disabled'\r\n//  '<S320>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/I Gain/Disabled'\r\n//  '<S321>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Ideal P Gain/Passthrough'\r\n//  '<S322>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Ideal P Gain Fdbk/Disabled'\r\n//  '<S323>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Integrator/Disabled'\r\n//  '<S324>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Integrator ICs/Disabled'\r\n//  '<S325>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/N Copy/Disabled wSignal Specification'\r\n//  '<S326>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/N Gain/Disabled'\r\n//  '<S327>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/P Copy/Disabled'\r\n//  '<S328>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Parallel P Gain/Internal Parameters'\r\n//  '<S329>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Reset Signal/Disabled'\r\n//  '<S330>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Saturation/Passthrough'\r\n//  '<S331>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Saturation Fdbk/Disabled'\r\n//  '<S332>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Sum/Passthrough_P'\r\n//  '<S333>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Sum Fdbk/Disabled'\r\n//  '<S334>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Tracking Mode/Disabled'\r\n//  '<S335>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Tracking Mode Sum/Passthrough'\r\n//  '<S336>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S337>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/Tsamp - Ngain/Passthrough'\r\n//  '<S338>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/postSat Signal/Forward_Path'\r\n//  '<S339>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Attitude controller/PID Controller4/preSat Signal/Forward_Path'\r\n//  '<S340>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/Altitude Signal conditioning'\r\n//  '<S341>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/Calculate Transformation Matrix'\r\n//  '<S342>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/Calculate minimum Turn'\r\n//  '<S343>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller'\r\n//  '<S344>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1'\r\n//  '<S345>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5'\r\n//  '<S346>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude'\r\n//  '<S347>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz'\r\n//  '<S348>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/Altitude Signal conditioning/Saturation Dynamic'\r\n//  '<S349>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Anti-windup'\r\n//  '<S350>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/D Gain'\r\n//  '<S351>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/External Derivative'\r\n//  '<S352>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Filter'\r\n//  '<S353>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Filter ICs'\r\n//  '<S354>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/I Gain'\r\n//  '<S355>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Ideal P Gain'\r\n//  '<S356>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Ideal P Gain Fdbk'\r\n//  '<S357>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Integrator'\r\n//  '<S358>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Integrator ICs'\r\n//  '<S359>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/N Copy'\r\n//  '<S360>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/N Gain'\r\n//  '<S361>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/P Copy'\r\n//  '<S362>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Parallel P Gain'\r\n//  '<S363>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Reset Signal'\r\n//  '<S364>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Saturation'\r\n//  '<S365>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Saturation Fdbk'\r\n//  '<S366>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Sum'\r\n//  '<S367>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Sum Fdbk'\r\n//  '<S368>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Tracking Mode'\r\n//  '<S369>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Tracking Mode Sum'\r\n//  '<S370>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Tsamp - Integral'\r\n//  '<S371>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Tsamp - Ngain'\r\n//  '<S372>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/postSat Signal'\r\n//  '<S373>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/preSat Signal'\r\n//  '<S374>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Anti-windup/Disabled'\r\n//  '<S375>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/D Gain/Disabled'\r\n//  '<S376>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/External Derivative/Disabled'\r\n//  '<S377>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Filter/Disabled'\r\n//  '<S378>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Filter ICs/Disabled'\r\n//  '<S379>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/I Gain/Disabled'\r\n//  '<S380>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Ideal P Gain/Passthrough'\r\n//  '<S381>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n//  '<S382>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Integrator/Disabled'\r\n//  '<S383>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Integrator ICs/Disabled'\r\n//  '<S384>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/N Copy/Disabled wSignal Specification'\r\n//  '<S385>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/N Gain/Disabled'\r\n//  '<S386>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/P Copy/Disabled'\r\n//  '<S387>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Parallel P Gain/Internal Parameters'\r\n//  '<S388>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Reset Signal/Disabled'\r\n//  '<S389>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Saturation/Enabled'\r\n//  '<S390>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Saturation Fdbk/Disabled'\r\n//  '<S391>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Sum/Passthrough_P'\r\n//  '<S392>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Sum Fdbk/Disabled'\r\n//  '<S393>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Tracking Mode/Disabled'\r\n//  '<S394>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Tracking Mode Sum/Passthrough'\r\n//  '<S395>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S396>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/Tsamp - Ngain/Passthrough'\r\n//  '<S397>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/postSat Signal/Forward_Path'\r\n//  '<S398>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller/preSat Signal/Forward_Path'\r\n//  '<S399>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Anti-windup'\r\n//  '<S400>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/D Gain'\r\n//  '<S401>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/External Derivative'\r\n//  '<S402>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Filter'\r\n//  '<S403>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Filter ICs'\r\n//  '<S404>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/I Gain'\r\n//  '<S405>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Ideal P Gain'\r\n//  '<S406>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Ideal P Gain Fdbk'\r\n//  '<S407>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Integrator'\r\n//  '<S408>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Integrator ICs'\r\n//  '<S409>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/N Copy'\r\n//  '<S410>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/N Gain'\r\n//  '<S411>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/P Copy'\r\n//  '<S412>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Parallel P Gain'\r\n//  '<S413>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Reset Signal'\r\n//  '<S414>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Saturation'\r\n//  '<S415>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Saturation Fdbk'\r\n//  '<S416>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Sum'\r\n//  '<S417>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Sum Fdbk'\r\n//  '<S418>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Tracking Mode'\r\n//  '<S419>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Tracking Mode Sum'\r\n//  '<S420>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Tsamp - Integral'\r\n//  '<S421>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Tsamp - Ngain'\r\n//  '<S422>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/postSat Signal'\r\n//  '<S423>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/preSat Signal'\r\n//  '<S424>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Anti-windup/Disabled'\r\n//  '<S425>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/D Gain/Disabled'\r\n//  '<S426>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/External Derivative/Disabled'\r\n//  '<S427>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Filter/Disabled'\r\n//  '<S428>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Filter ICs/Disabled'\r\n//  '<S429>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/I Gain/Disabled'\r\n//  '<S430>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Ideal P Gain/Passthrough'\r\n//  '<S431>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Ideal P Gain Fdbk/Disabled'\r\n//  '<S432>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Integrator/Disabled'\r\n//  '<S433>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Integrator ICs/Disabled'\r\n//  '<S434>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/N Copy/Disabled wSignal Specification'\r\n//  '<S435>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/N Gain/Disabled'\r\n//  '<S436>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/P Copy/Disabled'\r\n//  '<S437>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Parallel P Gain/Internal Parameters'\r\n//  '<S438>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Reset Signal/Disabled'\r\n//  '<S439>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Saturation/Enabled'\r\n//  '<S440>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Saturation Fdbk/Disabled'\r\n//  '<S441>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Sum/Passthrough_P'\r\n//  '<S442>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Sum Fdbk/Disabled'\r\n//  '<S443>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Tracking Mode/Disabled'\r\n//  '<S444>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Tracking Mode Sum/Passthrough'\r\n//  '<S445>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S446>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/Tsamp - Ngain/Passthrough'\r\n//  '<S447>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/postSat Signal/Forward_Path'\r\n//  '<S448>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller1/preSat Signal/Forward_Path'\r\n//  '<S449>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Anti-windup'\r\n//  '<S450>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/D Gain'\r\n//  '<S451>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/External Derivative'\r\n//  '<S452>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Filter'\r\n//  '<S453>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Filter ICs'\r\n//  '<S454>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/I Gain'\r\n//  '<S455>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Ideal P Gain'\r\n//  '<S456>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Ideal P Gain Fdbk'\r\n//  '<S457>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Integrator'\r\n//  '<S458>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Integrator ICs'\r\n//  '<S459>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/N Copy'\r\n//  '<S460>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/N Gain'\r\n//  '<S461>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/P Copy'\r\n//  '<S462>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Parallel P Gain'\r\n//  '<S463>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Reset Signal'\r\n//  '<S464>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Saturation'\r\n//  '<S465>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Saturation Fdbk'\r\n//  '<S466>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Sum'\r\n//  '<S467>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Sum Fdbk'\r\n//  '<S468>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Tracking Mode'\r\n//  '<S469>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Tracking Mode Sum'\r\n//  '<S470>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Tsamp - Integral'\r\n//  '<S471>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Tsamp - Ngain'\r\n//  '<S472>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/postSat Signal'\r\n//  '<S473>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/preSat Signal'\r\n//  '<S474>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Anti-windup/Disabled'\r\n//  '<S475>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/D Gain/Disabled'\r\n//  '<S476>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/External Derivative/Disabled'\r\n//  '<S477>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Filter/Disabled'\r\n//  '<S478>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Filter ICs/Disabled'\r\n//  '<S479>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/I Gain/Disabled'\r\n//  '<S480>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Ideal P Gain/Passthrough'\r\n//  '<S481>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Ideal P Gain Fdbk/Disabled'\r\n//  '<S482>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Integrator/Disabled'\r\n//  '<S483>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Integrator ICs/Disabled'\r\n//  '<S484>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/N Copy/Disabled wSignal Specification'\r\n//  '<S485>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/N Gain/Disabled'\r\n//  '<S486>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/P Copy/Disabled'\r\n//  '<S487>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Parallel P Gain/Internal Parameters'\r\n//  '<S488>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Reset Signal/Disabled'\r\n//  '<S489>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Saturation/Enabled'\r\n//  '<S490>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Saturation Fdbk/Disabled'\r\n//  '<S491>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Sum/Passthrough_P'\r\n//  '<S492>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Sum Fdbk/Disabled'\r\n//  '<S493>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Tracking Mode/Disabled'\r\n//  '<S494>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Tracking Mode Sum/Passthrough'\r\n//  '<S495>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S496>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/Tsamp - Ngain/Passthrough'\r\n//  '<S497>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/postSat Signal/Forward_Path'\r\n//  '<S498>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID Controller5/preSat Signal/Forward_Path'\r\n//  '<S499>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Anti-windup'\r\n//  '<S500>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/D Gain'\r\n//  '<S501>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/External Derivative'\r\n//  '<S502>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Filter'\r\n//  '<S503>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Filter ICs'\r\n//  '<S504>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/I Gain'\r\n//  '<S505>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Ideal P Gain'\r\n//  '<S506>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Ideal P Gain Fdbk'\r\n//  '<S507>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Integrator'\r\n//  '<S508>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Integrator ICs'\r\n//  '<S509>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/N Copy'\r\n//  '<S510>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/N Gain'\r\n//  '<S511>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/P Copy'\r\n//  '<S512>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Parallel P Gain'\r\n//  '<S513>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Reset Signal'\r\n//  '<S514>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Saturation'\r\n//  '<S515>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Saturation Fdbk'\r\n//  '<S516>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Sum'\r\n//  '<S517>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Sum Fdbk'\r\n//  '<S518>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Tracking Mode'\r\n//  '<S519>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Tracking Mode Sum'\r\n//  '<S520>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Tsamp - Integral'\r\n//  '<S521>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Tsamp - Ngain'\r\n//  '<S522>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/postSat Signal'\r\n//  '<S523>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/preSat Signal'\r\n//  '<S524>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Anti-windup/Disc. Clamping Parallel'\r\n//  '<S525>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n//  '<S526>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n//  '<S527>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/D Gain/Internal Parameters'\r\n//  '<S528>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/External Derivative/Error'\r\n//  '<S529>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Filter/Disc. Forward Euler Filter'\r\n//  '<S530>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Filter ICs/Internal IC - Filter'\r\n//  '<S531>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/I Gain/Internal Parameters'\r\n//  '<S532>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Ideal P Gain/Passthrough'\r\n//  '<S533>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Ideal P Gain Fdbk/Passthrough'\r\n//  '<S534>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Integrator/Discrete'\r\n//  '<S535>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Integrator ICs/Internal IC'\r\n//  '<S536>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/N Copy/Disabled'\r\n//  '<S537>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/N Gain/Internal Parameters'\r\n//  '<S538>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/P Copy/Disabled'\r\n//  '<S539>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Parallel P Gain/Internal Parameters'\r\n//  '<S540>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Reset Signal/Disabled'\r\n//  '<S541>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Saturation/Enabled'\r\n//  '<S542>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Saturation Fdbk/Passthrough'\r\n//  '<S543>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Sum/Sum_PID'\r\n//  '<S544>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Sum Fdbk/Enabled'\r\n//  '<S545>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Tracking Mode/Disabled'\r\n//  '<S546>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Tracking Mode Sum/Passthrough'\r\n//  '<S547>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S548>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/Tsamp - Ngain/Passthrough'\r\n//  '<S549>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/postSat Signal/Feedback_Path'\r\n//  '<S550>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_Altitude/preSat Signal/Feedback_Path'\r\n//  '<S551>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Anti-windup'\r\n//  '<S552>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/D Gain'\r\n//  '<S553>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/External Derivative'\r\n//  '<S554>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Filter'\r\n//  '<S555>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Filter ICs'\r\n//  '<S556>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/I Gain'\r\n//  '<S557>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Ideal P Gain'\r\n//  '<S558>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Ideal P Gain Fdbk'\r\n//  '<S559>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Integrator'\r\n//  '<S560>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Integrator ICs'\r\n//  '<S561>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/N Copy'\r\n//  '<S562>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/N Gain'\r\n//  '<S563>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/P Copy'\r\n//  '<S564>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Parallel P Gain'\r\n//  '<S565>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Reset Signal'\r\n//  '<S566>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Saturation'\r\n//  '<S567>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Saturation Fdbk'\r\n//  '<S568>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Sum'\r\n//  '<S569>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Sum Fdbk'\r\n//  '<S570>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Tracking Mode'\r\n//  '<S571>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Tracking Mode Sum'\r\n//  '<S572>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Tsamp - Integral'\r\n//  '<S573>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Tsamp - Ngain'\r\n//  '<S574>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/postSat Signal'\r\n//  '<S575>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/preSat Signal'\r\n//  '<S576>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Anti-windup/Disc. Clamping Parallel'\r\n//  '<S577>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Anti-windup/Disc. Clamping Parallel/Dead Zone'\r\n//  '<S578>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Anti-windup/Disc. Clamping Parallel/Dead Zone/Enabled'\r\n//  '<S579>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/D Gain/Internal Parameters'\r\n//  '<S580>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/External Derivative/Error'\r\n//  '<S581>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Filter/Disc. Forward Euler Filter'\r\n//  '<S582>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Filter ICs/Internal IC - Filter'\r\n//  '<S583>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/I Gain/Internal Parameters'\r\n//  '<S584>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Ideal P Gain/Passthrough'\r\n//  '<S585>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Ideal P Gain Fdbk/Passthrough'\r\n//  '<S586>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Integrator/Discrete'\r\n//  '<S587>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Integrator ICs/Internal IC'\r\n//  '<S588>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/N Copy/Disabled'\r\n//  '<S589>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/N Gain/Internal Parameters'\r\n//  '<S590>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/P Copy/Disabled'\r\n//  '<S591>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Parallel P Gain/Internal Parameters'\r\n//  '<S592>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Reset Signal/Disabled'\r\n//  '<S593>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Saturation/Enabled'\r\n//  '<S594>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Saturation Fdbk/Passthrough'\r\n//  '<S595>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Sum/Sum_PID'\r\n//  '<S596>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Sum Fdbk/Enabled'\r\n//  '<S597>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Tracking Mode/Disabled'\r\n//  '<S598>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Tracking Mode Sum/Passthrough'\r\n//  '<S599>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Tsamp - Integral/TsSignalSpecification'\r\n//  '<S600>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/Tsamp - Ngain/Passthrough'\r\n//  '<S601>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/postSat Signal/Feedback_Path'\r\n//  '<S602>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Position & Altitude controller/PID_vz/preSat Signal/Feedback_Path'\r\n//  '<S603>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternion Validity Check/Quaternion Norm'\r\n//  '<S604>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles/Angle Calculation'\r\n//  '<S605>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles/Quaternion Normalize'\r\n//  '<S606>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles/Angle Calculation/Protect asincos input'\r\n//  '<S607>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles/Angle Calculation/Protect asincos input/If Action Subsystem'\r\n//  '<S608>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles/Angle Calculation/Protect asincos input/If Action Subsystem1'\r\n//  '<S609>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles/Angle Calculation/Protect asincos input/If Action Subsystem2'\r\n//  '<S610>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles/Quaternion Normalize/Quaternion Modulus'\r\n//  '<S611>' : 'FLIGHT_HEXA_Hovering/Subsystem Reference/Quaternions to Rotation Angles/Quaternion Normalize/Quaternion Modulus/Quaternion Norm'\r\n\r\n#endif                                 // FLIGHT_HEXA_Hovering_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"FLIGHT_HEXA_Hovering_private.h","type":"header","group":"model","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: FLIGHT_HEXA_Hovering_private.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef FLIGHT_HEXA_Hovering_private_h_\r\n#define FLIGHT_HEXA_Hovering_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"FLIGHT_HEXA_Hovering.h\"\r\n#include \"FLIGHT_HEXA_Hovering_types.h\"\r\n#ifndef UCHAR_MAX\r\n#include <limits.h>\r\n#endif\r\n\r\n#if ( UCHAR_MAX != (0xFFU) ) || ( SCHAR_MAX != (0x7F) )\r\n#error Code was generated for compiler with different sized uchar/char. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( USHRT_MAX != (0xFFFFU) ) || ( SHRT_MAX != (0x7FFF) )\r\n#error Code was generated for compiler with different sized ushort/short. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( UINT_MAX != (0xFFFFFFFFU) ) || ( INT_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized uint/int. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( ULONG_MAX != (0xFFFFFFFFU) ) || ( LONG_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized ulong/long. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n// Skipping ulong_long/long_long check: insufficient preprocessor integer range. \r\nextern real_T rt_remd_snf(real_T u0, real_T u1);\r\nextern real_T rt_atan2d_snf(real_T u0, real_T u1);\r\nextern void FLIGHT_HEXA_Hovering_SourceBlock_Init\r\n  (DW_SourceBlock_FLIGHT_HEXA_Hovering_T *localDW);\r\nextern void FLIGHT_HEXA_Hovering_SourceBlock\r\n  (B_SourceBlock_FLIGHT_HEXA_Hovering_T *localB,\r\n   DW_SourceBlock_FLIGHT_HEXA_Hovering_T *localDW);\r\nextern void FLIGHT_HEXA_Hovering_SourceBlock_k_Init\r\n  (DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T *localDW);\r\nextern void FLIGHT_HEXA_Hovering_SourceBlock_b\r\n  (B_SourceBlock_FLIGHT_HEXA_Hovering_i_T *localB,\r\n   DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T *localDW);\r\nextern void FLIGHT_HEXA_Hovering_MATLABSystem_Init\r\n  (DW_MATLABSystem_FLIGHT_HEXA_Hovering_T *localDW);\r\nextern void FLIGHT_HEXA_Hovering_MATLABSystem(const real_T rtu_0[3], const\r\n  real_T rtu_1[3], boolean_T rtu_2, uint8_T rtu_3,\r\n  B_MATLABSystem_FLIGHT_HEXA_Hovering_T *localB);\r\nextern void FLIGHT_HEXA_Hovering_SourceBlock_Term\r\n  (DW_SourceBlock_FLIGHT_HEXA_Hovering_T *localDW);\r\nextern void FLIGHT_HEXA_Hovering_SourceBlock_o_Term\r\n  (DW_SourceBlock_FLIGHT_HEXA_Hovering_m_T *localDW);\r\nextern void FLIGHT_HEXA_Hovering_MATLABSystem_Term\r\n  (DW_MATLABSystem_FLIGHT_HEXA_Hovering_T *localDW);\r\n\r\n#endif                                 // FLIGHT_HEXA_Hovering_private_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"FLIGHT_HEXA_Hovering_types.h","type":"header","group":"model","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Model files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: FLIGHT_HEXA_Hovering_types.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef FLIGHT_HEXA_Hovering_types_h_\r\n#define FLIGHT_HEXA_Hovering_types_h_\r\n#include \"rtwtypes.h\"\r\n#include \"MW_Parameter.h\"\r\n#include <uORB/topics/vehicle_angular_velocity.h>\r\n#include <uORB/topics/actuator_armed.h>\r\n#include <uORB/topics/input_rc.h>\r\n#include <uORB/topics/vehicle_attitude.h>\r\n#include <uORB/topics/vehicle_local_position.h>\r\n#include <uORB/topics/trajectory_waypoint.h>\r\n#include <uORB/topics/vehicle_trajectory_waypoint.h>\r\n#include <uORB/topics/home_position.h>\r\n#include <uORB/topics/position_setpoint.h>\r\n#include <uORB/topics/position_setpoint_triplet.h>\r\n#include <uORB/topics/actuator_motors.h>\r\n#ifndef struct_b_px4_internal_block_SampleTimeImpl_FLIGHT_HEXA_Hovering_T\r\n#define struct_b_px4_internal_block_SampleTimeImpl_FLIGHT_HEXA_Hovering_T\r\n\r\nstruct b_px4_internal_block_SampleTimeImpl_FLIGHT_HEXA_Hovering_T\r\n{\r\n  int32_T __dummy;\r\n};\r\n\r\n#endif     // struct_b_px4_internal_block_SampleTimeImpl_FLIGHT_HEXA_Hovering_T\r\n\r\n#ifndef struct_px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T\r\n#define struct_px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T\r\n\r\nstruct px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  b_px4_internal_block_SampleTimeImpl_FLIGHT_HEXA_Hovering_T SampleTimeHandler;\r\n  pollfd_t eventStructObj;\r\n  orb_metadata_t * orbMetadataObj;\r\n};\r\n\r\n#endif           // struct_px4_internal_block_Subscriber_FLIGHT_HEXA_Hovering_T\r\n\r\n#ifndef struct_px4_internal_block_LLA2LocalCoordinatesNED_FLIGHT_HEXA_Hoveri_T\r\n#define struct_px4_internal_block_LLA2LocalCoordinatesNED_FLIGHT_HEXA_Hoveri_T\r\n\r\nstruct px4_internal_block_LLA2LocalCoordinatesNED_FLIGHT_HEXA_Hoveri_T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  boolean_T isSetupComplete;\r\n};\r\n\r\n#endif\r\n      // struct_px4_internal_block_LLA2LocalCoordinatesNED_FLIGHT_HEXA_Hoveri_T\r\n\r\n#ifndef struct_px4_internal_block_LLA2LocalCoordinates_FLIGHT_HEXA_Hovering_T\r\n#define struct_px4_internal_block_LLA2LocalCoordinates_FLIGHT_HEXA_Hovering_T\r\n\r\nstruct px4_internal_block_LLA2LocalCoordinates_FLIGHT_HEXA_Hovering_T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  boolean_T previousValidReceived;\r\n  boolean_T nextValidReceived;\r\n};\r\n\r\n#endif // struct_px4_internal_block_LLA2LocalCoordinates_FLIGHT_HEXA_Hovering_T\r\n\r\n// Custom Type definition for MATLABSystem: '<S55>/Read Parameter5'\r\n#include \"MW_Parameter.h\"\r\n#ifndef struct_px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T\r\n#define struct_px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T\r\n\r\nstruct px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  real_T SampleTime;\r\n  MW_Param_Handle MW_PARAMHANDLE;\r\n};\r\n\r\n#endif      // struct_px4_internal_block_ParameterUpdate_FLIGHT_HEXA_Hovering_T\r\n\r\n#ifndef struct_px4_internal_block_Publisher_FLIGHT_HEXA_Hovering_T\r\n#define struct_px4_internal_block_Publisher_FLIGHT_HEXA_Hovering_T\r\n\r\nstruct px4_internal_block_Publisher_FLIGHT_HEXA_Hovering_T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  orb_advert_t orbAdvertiseObj;\r\n  orb_metadata_t * orbMetadataObj;\r\n};\r\n\r\n#endif            // struct_px4_internal_block_Publisher_FLIGHT_HEXA_Hovering_T\r\n\r\n#ifndef struct_cell_wrap_FLIGHT_HEXA_Hovering_T\r\n#define struct_cell_wrap_FLIGHT_HEXA_Hovering_T\r\n\r\nstruct cell_wrap_FLIGHT_HEXA_Hovering_T\r\n{\r\n  uint32_T f1[8];\r\n};\r\n\r\n#endif                               // struct_cell_wrap_FLIGHT_HEXA_Hovering_T\r\n\r\n#ifndef struct_uav_sluav_internal_system_WaypointFollower_FLIGHT_HEXA_Hoveri_T\r\n#define struct_uav_sluav_internal_system_WaypointFollower_FLIGHT_HEXA_Hoveri_T\r\n\r\nstruct uav_sluav_internal_system_WaypointFollower_FLIGHT_HEXA_Hoveri_T\r\n{\r\n  int32_T isInitialized;\r\n  cell_wrap_FLIGHT_HEXA_Hovering_T inputVarSize[3];\r\n  real_T LookaheadDistance;\r\n  real_T WaypointIndex;\r\n  real_T NumWaypoints;\r\n  real_T WaypointsInternal[9];\r\n  boolean_T LastWaypointFlag;\r\n  boolean_T StartFlag;\r\n  real_T InitialPose[4];\r\n  real_T LookaheadFactor;\r\n  uint8_T LookaheadDistFlag;\r\n};\r\n\r\n#endif\r\n      // struct_uav_sluav_internal_system_WaypointFollower_FLIGHT_HEXA_Hoveri_T\r\n\r\n#ifndef struct_px4_internal_block_getPX4AbsoluteTime_FLIGHT_HEXA_Hovering_T\r\n#define struct_px4_internal_block_getPX4AbsoluteTime_FLIGHT_HEXA_Hovering_T\r\n\r\nstruct px4_internal_block_getPX4AbsoluteTime_FLIGHT_HEXA_Hovering_T\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n  b_px4_internal_block_SampleTimeImpl_FLIGHT_HEXA_Hovering_T SampleTimeHandler;\r\n};\r\n\r\n#endif   // struct_px4_internal_block_getPX4AbsoluteTime_FLIGHT_HEXA_Hovering_T\r\n\r\n// Parameters (default storage)\r\ntypedef struct P_FLIGHT_HEXA_Hovering_T_ P_FLIGHT_HEXA_Hovering_T;\r\n\r\n// Forward declaration for rtModel\r\ntypedef struct tag_RTM_FLIGHT_HEXA_Hovering_T RT_MODEL_FLIGHT_HEXA_Hovering_T;\r\n\r\n#endif                                 // FLIGHT_HEXA_Hovering_types_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"FLIGHT_HEXA_Hovering_data.cpp","type":"source","group":"data","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Data files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: FLIGHT_HEXA_Hovering_data.cpp\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#include \"FLIGHT_HEXA_Hovering.h\"\r\n\r\n// Block parameters (default storage)\r\nP_FLIGHT_HEXA_Hovering_T FLIGHT_HEXA_Hovering_P = {\r\n  // Mask Parameter: PIDController_D\r\n  //  Referenced by: '<S112>/Derivative Gain'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController1_D\r\n  //  Referenced by: '<S164>/Derivative Gain'\r\n\r\n  0.0025,\r\n\r\n  // Mask Parameter: PIDController2_D\r\n  //  Referenced by: '<S216>/Derivative Gain'\r\n\r\n  0.0025,\r\n\r\n  // Mask Parameter: PID_Altitude_D\r\n  //  Referenced by: '<S527>/Derivative Gain'\r\n\r\n  0.01,\r\n\r\n  // Mask Parameter: PID_vz_D\r\n  //  Referenced by: '<S579>/Derivative Gain'\r\n\r\n  0.05,\r\n\r\n  // Mask Parameter: PIDController_I\r\n  //  Referenced by: '<S116>/Integral Gain'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController1_I\r\n  //  Referenced by: '<S168>/Integral Gain'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController2_I\r\n  //  Referenced by: '<S220>/Integral Gain'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PID_Altitude_I\r\n  //  Referenced by: '<S531>/Integral Gain'\r\n\r\n  0.01,\r\n\r\n  // Mask Parameter: PID_vz_I\r\n  //  Referenced by: '<S583>/Integral Gain'\r\n\r\n  0.1,\r\n\r\n  // Mask Parameter: PIDController_InitialConditionForFilter\r\n  //  Referenced by: '<S114>/Filter'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController1_InitialConditionForFilter\r\n  //  Referenced by: '<S166>/Filter'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController2_InitialConditionForFilter\r\n  //  Referenced by: '<S218>/Filter'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PID_Altitude_InitialConditionForFilter\r\n  //  Referenced by: '<S529>/Filter'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PID_vz_InitialConditionForFilter\r\n  //  Referenced by: '<S581>/Filter'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController_InitialConditionForIntegrator\r\n  //  Referenced by: '<S119>/Integrator'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController1_InitialConditionForIntegrator\r\n  //  Referenced by: '<S171>/Integrator'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController2_InitialConditionForIntegrator\r\n  //  Referenced by: '<S223>/Integrator'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PID_Altitude_InitialConditionForIntegrator\r\n  //  Referenced by: '<S534>/Integrator'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PID_vz_InitialConditionForIntegrator\r\n  //  Referenced by: '<S586>/Integrator'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController_LowerSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S126>/Saturation'\r\n  //    '<S111>/DeadZone'\r\n\r\n  -0.1,\r\n\r\n  // Mask Parameter: PIDController1_LowerSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S178>/Saturation'\r\n  //    '<S163>/DeadZone'\r\n\r\n  -0.2,\r\n\r\n  // Mask Parameter: PIDController2_LowerSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S230>/Saturation'\r\n  //    '<S215>/DeadZone'\r\n\r\n  -0.2,\r\n\r\n  // Mask Parameter: PIDController1_LowerSaturationLimit_h\r\n  //  Referenced by: '<S439>/Saturation'\r\n\r\n  -4.0,\r\n\r\n  // Mask Parameter: PIDController_LowerSaturationLimit_o\r\n  //  Referenced by: '<S389>/Saturation'\r\n\r\n  -0.3490658503988659,\r\n\r\n  // Mask Parameter: PIDController5_LowerSaturationLimit\r\n  //  Referenced by: '<S489>/Saturation'\r\n\r\n  -0.87266462599716477,\r\n\r\n  // Mask Parameter: PID_Altitude_LowerSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S541>/Saturation'\r\n  //    '<S526>/DeadZone'\r\n\r\n  -2.0,\r\n\r\n  // Mask Parameter: PID_vz_LowerSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S593>/Saturation'\r\n  //    '<S578>/DeadZone'\r\n\r\n  0.0,\r\n\r\n  // Mask Parameter: PIDController_N\r\n  //  Referenced by: '<S122>/Filter Coefficient'\r\n\r\n  100.0,\r\n\r\n  // Mask Parameter: PIDController1_N\r\n  //  Referenced by: '<S174>/Filter Coefficient'\r\n\r\n  50.0,\r\n\r\n  // Mask Parameter: PIDController2_N\r\n  //  Referenced by: '<S226>/Filter Coefficient'\r\n\r\n  50.0,\r\n\r\n  // Mask Parameter: PID_Altitude_N\r\n  //  Referenced by: '<S537>/Filter Coefficient'\r\n\r\n  10.0,\r\n\r\n  // Mask Parameter: PID_vz_N\r\n  //  Referenced by: '<S589>/Filter Coefficient'\r\n\r\n  10.0,\r\n\r\n  // Mask Parameter: PIDController_P\r\n  //  Referenced by: '<S124>/Proportional Gain'\r\n\r\n  0.2,\r\n\r\n  // Mask Parameter: PIDController3_P\r\n  //  Referenced by: '<S278>/Proportional Gain'\r\n\r\n  4.0,\r\n\r\n  // Mask Parameter: PIDController1_P\r\n  //  Referenced by: '<S176>/Proportional Gain'\r\n\r\n  0.035,\r\n\r\n  // Mask Parameter: PIDController4_P\r\n  //  Referenced by: '<S328>/Proportional Gain'\r\n\r\n  4.0,\r\n\r\n  // Mask Parameter: PIDController2_P\r\n  //  Referenced by: '<S228>/Proportional Gain'\r\n\r\n  0.035,\r\n\r\n  // Mask Parameter: PIDController1_P_f\r\n  //  Referenced by: '<S437>/Proportional Gain'\r\n\r\n  0.6,\r\n\r\n  // Mask Parameter: PIDController_P_b\r\n  //  Referenced by: '<S387>/Proportional Gain'\r\n\r\n  0.3,\r\n\r\n  // Mask Parameter: PIDController5_P\r\n  //  Referenced by: '<S487>/Proportional Gain'\r\n\r\n  2.0,\r\n\r\n  // Mask Parameter: PID_Altitude_P\r\n  //  Referenced by: '<S539>/Proportional Gain'\r\n\r\n  1.5,\r\n\r\n  // Mask Parameter: PID_vz_P\r\n  //  Referenced by: '<S591>/Proportional Gain'\r\n\r\n  0.5,\r\n\r\n  // Mask Parameter: PIDController_UpperSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S126>/Saturation'\r\n  //    '<S111>/DeadZone'\r\n\r\n  0.1,\r\n\r\n  // Mask Parameter: PIDController1_UpperSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S178>/Saturation'\r\n  //    '<S163>/DeadZone'\r\n\r\n  0.2,\r\n\r\n  // Mask Parameter: PIDController2_UpperSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S230>/Saturation'\r\n  //    '<S215>/DeadZone'\r\n\r\n  0.2,\r\n\r\n  // Mask Parameter: PIDController1_UpperSaturationLimit_e\r\n  //  Referenced by: '<S439>/Saturation'\r\n\r\n  4.0,\r\n\r\n  // Mask Parameter: PIDController_UpperSaturationLimit_e\r\n  //  Referenced by: '<S389>/Saturation'\r\n\r\n  0.3490658503988659,\r\n\r\n  // Mask Parameter: PIDController5_UpperSaturationLimit\r\n  //  Referenced by: '<S489>/Saturation'\r\n\r\n  0.87266462599716477,\r\n\r\n  // Mask Parameter: PID_Altitude_UpperSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S541>/Saturation'\r\n  //    '<S526>/DeadZone'\r\n\r\n  2.0,\r\n\r\n  // Mask Parameter: PID_vz_UpperSaturationLimit\r\n  //  Referenced by:\r\n  //    '<S593>/Saturation'\r\n  //    '<S578>/DeadZone'\r\n\r\n  1.0,\r\n\r\n  // Mask Parameter: CompareToConstant_const\r\n  //  Referenced by: '<S60>/Constant'\r\n\r\n  1800.0,\r\n\r\n  // Mask Parameter: CompareToConstant_const_d\r\n  //  Referenced by: '<S61>/Constant'\r\n\r\n  1400U,\r\n\r\n  // Mask Parameter: CompareToConstant_const_dt\r\n  //  Referenced by: '<S34>/Constant'\r\n\r\n  5U,\r\n\r\n  // Computed Parameter: Out1_Y0\r\n  //  Referenced by: '<S41>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    0U,                                // type\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    ,                                  // _padding0\r\n\r\n    {\r\n      {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      } }\r\n    // waypoints\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value\r\n  //  Referenced by: '<S46>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    0U,                                // type\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    ,                                  // _padding0\r\n\r\n    {\r\n      {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      } }\r\n    // waypoints\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_g\r\n  //  Referenced by: '<S40>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    0U,                                // type\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    ,                                  // _padding0\r\n\r\n    {\r\n      {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      }, {\r\n        (0ULL),                        // timestamp\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // position\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // velocity\r\n\r\n        {\r\n          0.0F, 0.0F, 0.0F }\r\n        ,                              // acceleration\r\n        0.0F,                          // yaw\r\n        0.0F,                          // yaw_speed\r\n        false,                         // point_valid\r\n        0U,                            // type\r\n\r\n        {\r\n          0U, 0U }\r\n        // _padding0\r\n      } }\r\n    // waypoints\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_h\r\n  //  Referenced by: '<S53>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n\r\n    {\r\n      (0ULL),                          // timestamp\r\n      0.0,                             // lat\r\n      0.0,                             // lon\r\n      0.0F,                            // vx\r\n      0.0F,                            // vy\r\n      0.0F,                            // vz\r\n      0.0F,                            // alt\r\n      0.0F,                            // yaw\r\n      0.0F,                            // yawspeed\r\n      0.0F,                            // loiter_radius\r\n      0.0F,                            // acceptance_radius\r\n      0.0F,                            // cruising_speed\r\n      0.0F,                            // cruising_throttle\r\n      false,                           // valid\r\n      0U,                              // type\r\n      false,                           // yaw_valid\r\n      false,                           // yawspeed_valid\r\n      false,                           // loiter_direction_counter_clockwise\r\n      false,                           // gliding_enabled\r\n      false,                           // disable_weather_vane\r\n      0U                               // _padding0\r\n    },                                 // previous\r\n\r\n    {\r\n      (0ULL),                          // timestamp\r\n      0.0,                             // lat\r\n      0.0,                             // lon\r\n      0.0F,                            // vx\r\n      0.0F,                            // vy\r\n      0.0F,                            // vz\r\n      0.0F,                            // alt\r\n      0.0F,                            // yaw\r\n      0.0F,                            // yawspeed\r\n      0.0F,                            // loiter_radius\r\n      0.0F,                            // acceptance_radius\r\n      0.0F,                            // cruising_speed\r\n      0.0F,                            // cruising_throttle\r\n      false,                           // valid\r\n      0U,                              // type\r\n      false,                           // yaw_valid\r\n      false,                           // yawspeed_valid\r\n      false,                           // loiter_direction_counter_clockwise\r\n      false,                           // gliding_enabled\r\n      false,                           // disable_weather_vane\r\n      0U                               // _padding0\r\n    },                                 // current\r\n\r\n    {\r\n      (0ULL),                          // timestamp\r\n      0.0,                             // lat\r\n      0.0,                             // lon\r\n      0.0F,                            // vx\r\n      0.0F,                            // vy\r\n      0.0F,                            // vz\r\n      0.0F,                            // alt\r\n      0.0F,                            // yaw\r\n      0.0F,                            // yawspeed\r\n      0.0F,                            // loiter_radius\r\n      0.0F,                            // acceptance_radius\r\n      0.0F,                            // cruising_speed\r\n      0.0F,                            // cruising_throttle\r\n      false,                           // valid\r\n      0U,                              // type\r\n      false,                           // yaw_valid\r\n      false,                           // yawspeed_valid\r\n      false,                           // loiter_direction_counter_clockwise\r\n      false,                           // gliding_enabled\r\n      false,                           // disable_weather_vane\r\n      0U                               // _padding0\r\n    }                                  // next\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_d\r\n  //  Referenced by: '<S38>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n\r\n    {\r\n      (0ULL),                          // timestamp\r\n      0.0,                             // lat\r\n      0.0,                             // lon\r\n      0.0F,                            // vx\r\n      0.0F,                            // vy\r\n      0.0F,                            // vz\r\n      0.0F,                            // alt\r\n      0.0F,                            // yaw\r\n      0.0F,                            // yawspeed\r\n      0.0F,                            // loiter_radius\r\n      0.0F,                            // acceptance_radius\r\n      0.0F,                            // cruising_speed\r\n      0.0F,                            // cruising_throttle\r\n      false,                           // valid\r\n      0U,                              // type\r\n      false,                           // yaw_valid\r\n      false,                           // yawspeed_valid\r\n      false,                           // loiter_direction_counter_clockwise\r\n      false,                           // gliding_enabled\r\n      false,                           // disable_weather_vane\r\n      0U                               // _padding0\r\n    },                                 // previous\r\n\r\n    {\r\n      (0ULL),                          // timestamp\r\n      0.0,                             // lat\r\n      0.0,                             // lon\r\n      0.0F,                            // vx\r\n      0.0F,                            // vy\r\n      0.0F,                            // vz\r\n      0.0F,                            // alt\r\n      0.0F,                            // yaw\r\n      0.0F,                            // yawspeed\r\n      0.0F,                            // loiter_radius\r\n      0.0F,                            // acceptance_radius\r\n      0.0F,                            // cruising_speed\r\n      0.0F,                            // cruising_throttle\r\n      false,                           // valid\r\n      0U,                              // type\r\n      false,                           // yaw_valid\r\n      false,                           // yawspeed_valid\r\n      false,                           // loiter_direction_counter_clockwise\r\n      false,                           // gliding_enabled\r\n      false,                           // disable_weather_vane\r\n      0U                               // _padding0\r\n    },                                 // current\r\n\r\n    {\r\n      (0ULL),                          // timestamp\r\n      0.0,                             // lat\r\n      0.0,                             // lon\r\n      0.0F,                            // vx\r\n      0.0F,                            // vy\r\n      0.0F,                            // vz\r\n      0.0F,                            // alt\r\n      0.0F,                            // yaw\r\n      0.0F,                            // yawspeed\r\n      0.0F,                            // loiter_radius\r\n      0.0F,                            // acceptance_radius\r\n      0.0F,                            // cruising_speed\r\n      0.0F,                            // cruising_throttle\r\n      false,                           // valid\r\n      0U,                              // type\r\n      false,                           // yaw_valid\r\n      false,                           // yawspeed_valid\r\n      false,                           // loiter_direction_counter_clockwise\r\n      false,                           // gliding_enabled\r\n      false,                           // disable_weather_vane\r\n      0U                               // _padding0\r\n    }                                  // next\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_p\r\n  //  Referenced by: '<S15>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_sample\r\n    (0ULL),                            // ref_timestamp\r\n    0.0,                               // ref_lat\r\n    0.0,                               // ref_lon\r\n    0.0F,                              // x\r\n    0.0F,                              // y\r\n    0.0F,                              // z\r\n\r\n    {\r\n      0.0F, 0.0F }\r\n    ,                                  // delta_xy\r\n    0.0F,                              // delta_z\r\n    0.0F,                              // vx\r\n    0.0F,                              // vy\r\n    0.0F,                              // vz\r\n    0.0F,                              // z_deriv\r\n\r\n    {\r\n      0.0F, 0.0F }\r\n    ,                                  // delta_vxy\r\n    0.0F,                              // delta_vz\r\n    0.0F,                              // ax\r\n    0.0F,                              // ay\r\n    0.0F,                              // az\r\n    0.0F,                              // heading\r\n    0.0F,                              // delta_heading\r\n    0.0F,                              // ref_alt\r\n    0.0F,                              // dist_bottom\r\n    0.0F,                              // eph\r\n    0.0F,                              // epv\r\n    0.0F,                              // evh\r\n    0.0F,                              // evv\r\n    0.0F,                              // vxy_max\r\n    0.0F,                              // vz_max\r\n    0.0F,                              // hagl_min\r\n    0.0F,                              // hagl_max\r\n    false,                             // xy_valid\r\n    false,                             // z_valid\r\n    false,                             // v_xy_valid\r\n    false,                             // v_z_valid\r\n    0U,                                // xy_reset_counter\r\n    0U,                                // z_reset_counter\r\n    0U,                                // vxy_reset_counter\r\n    0U,                                // vz_reset_counter\r\n    0U,                                // heading_reset_counter\r\n    false,                             // heading_good_for_control\r\n    false,                             // xy_global\r\n    false,                             // z_global\r\n    false,                             // dist_bottom_valid\r\n    0U,                                // dist_bottom_sensor_bitfield\r\n    false,                             // dead_reckoning\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_e\r\n  //  Referenced by: '<S9>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_sample\r\n    (0ULL),                            // ref_timestamp\r\n    0.0,                               // ref_lat\r\n    0.0,                               // ref_lon\r\n    0.0F,                              // x\r\n    0.0F,                              // y\r\n    0.0F,                              // z\r\n\r\n    {\r\n      0.0F, 0.0F }\r\n    ,                                  // delta_xy\r\n    0.0F,                              // delta_z\r\n    0.0F,                              // vx\r\n    0.0F,                              // vy\r\n    0.0F,                              // vz\r\n    0.0F,                              // z_deriv\r\n\r\n    {\r\n      0.0F, 0.0F }\r\n    ,                                  // delta_vxy\r\n    0.0F,                              // delta_vz\r\n    0.0F,                              // ax\r\n    0.0F,                              // ay\r\n    0.0F,                              // az\r\n    0.0F,                              // heading\r\n    0.0F,                              // delta_heading\r\n    0.0F,                              // ref_alt\r\n    0.0F,                              // dist_bottom\r\n    0.0F,                              // eph\r\n    0.0F,                              // epv\r\n    0.0F,                              // evh\r\n    0.0F,                              // evv\r\n    0.0F,                              // vxy_max\r\n    0.0F,                              // vz_max\r\n    0.0F,                              // hagl_min\r\n    0.0F,                              // hagl_max\r\n    false,                             // xy_valid\r\n    false,                             // z_valid\r\n    false,                             // v_xy_valid\r\n    false,                             // v_z_valid\r\n    0U,                                // xy_reset_counter\r\n    0U,                                // z_reset_counter\r\n    0U,                                // vxy_reset_counter\r\n    0U,                                // vz_reset_counter\r\n    0U,                                // heading_reset_counter\r\n    false,                             // heading_good_for_control\r\n    false,                             // xy_global\r\n    false,                             // z_global\r\n    false,                             // dist_bottom_valid\r\n    0U,                                // dist_bottom_sensor_bitfield\r\n    false,                             // dead_reckoning\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_f\r\n  //  Referenced by: '<S71>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_sample\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }\r\n    ,                                  // control\r\n    0U,                                // reversible_flags\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U }\r\n    // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_m\r\n  //  Referenced by: '<S13>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_last_signal\r\n    0,                                 // rssi\r\n    0.0F,                              // rssi_dbm\r\n    0U,                                // rc_lost_frame_count\r\n    0U,                                // rc_total_frame_count\r\n    0U,                                // rc_ppm_frame_length\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    ,                                  // values\r\n    0U,                                // channel_count\r\n    false,                             // rc_failsafe\r\n    false,                             // rc_lost\r\n    0U,                                // input_source\r\n    0,                                 // link_quality\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_j\r\n  //  Referenced by: '<S70>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_last_signal\r\n    0,                                 // rssi\r\n    0.0F,                              // rssi_dbm\r\n    0U,                                // rc_lost_frame_count\r\n    0U,                                // rc_total_frame_count\r\n    0U,                                // rc_ppm_frame_length\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    ,                                  // values\r\n    0U,                                // channel_count\r\n    false,                             // rc_failsafe\r\n    false,                             // rc_lost\r\n    0U,                                // input_source\r\n    0,                                 // link_quality\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_m\r\n  //  Referenced by: '<S69>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_last_signal\r\n    0,                                 // rssi\r\n    0.0F,                              // rssi_dbm\r\n    0U,                                // rc_lost_frame_count\r\n    0U,                                // rc_total_frame_count\r\n    0U,                                // rc_ppm_frame_length\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    ,                                  // values\r\n    0U,                                // channel_count\r\n    false,                             // rc_failsafe\r\n    false,                             // rc_lost\r\n    0U,                                // input_source\r\n    0,                                 // link_quality\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_o\r\n  //  Referenced by: '<S12>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_last_signal\r\n    0,                                 // rssi\r\n    0.0F,                              // rssi_dbm\r\n    0U,                                // rc_lost_frame_count\r\n    0U,                                // rc_total_frame_count\r\n    0U,                                // rc_ppm_frame_length\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    ,                                  // values\r\n    0U,                                // channel_count\r\n    false,                             // rc_failsafe\r\n    false,                             // rc_lost\r\n    0U,                                // input_source\r\n    0,                                 // link_quality\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_k\r\n  //  Referenced by: '<S14>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_sample\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F, 0.0F }\r\n    ,                                  // q\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F, 0.0F }\r\n    ,                                  // delta_q_reset\r\n    0U,                                // quat_reset_counter\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_l\r\n  //  Referenced by: '<S8>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_sample\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F, 0.0F }\r\n    ,                                  // q\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F, 0.0F }\r\n    ,                                  // delta_q_reset\r\n    0U,                                // quat_reset_counter\r\n\r\n    {\r\n      0U, 0U, 0U, 0U, 0U, 0U, 0U }\r\n    // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_o\r\n  //  Referenced by: '<S52>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    0.0,                               // lat\r\n    0.0,                               // lon\r\n    0.0F,                              // alt\r\n    0.0F,                              // x\r\n    0.0F,                              // y\r\n    0.0F,                              // z\r\n    0.0F,                              // yaw\r\n    false,                             // valid_alt\r\n    false,                             // valid_hpos\r\n    false,                             // valid_lpos\r\n    false                              // manual_home\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_b\r\n  //  Referenced by: '<S37>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    0.0,                               // lat\r\n    0.0,                               // lon\r\n    0.0F,                              // alt\r\n    0.0F,                              // x\r\n    0.0F,                              // y\r\n    0.0F,                              // z\r\n    0.0F,                              // yaw\r\n    false,                             // valid_alt\r\n    false,                             // valid_hpos\r\n    false,                             // valid_lpos\r\n    false                              // manual_home\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_e\r\n  //  Referenced by: '<S10>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_sample\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F }\r\n    ,                                  // xyz\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F }\r\n    // xyz_derivative\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_n\r\n  //  Referenced by: '<S5>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    (0ULL),                            // timestamp_sample\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F }\r\n    ,                                  // xyz\r\n\r\n    {\r\n      0.0F, 0.0F, 0.0F }\r\n    // xyz_derivative\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_d\r\n  //  Referenced by: '<S11>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    false,                             // armed\r\n    false,                             // prearmed\r\n    false,                             // ready_to_arm\r\n    false,                             // lockdown\r\n    false,                             // manual_lockdown\r\n    false,                             // force_failsafe\r\n    false,                             // in_esc_calibration_mode\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Out1_Y0_l\r\n  //  Referenced by: '<S68>/Out1'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    false,                             // armed\r\n    false,                             // prearmed\r\n    false,                             // ready_to_arm\r\n    false,                             // lockdown\r\n    false,                             // manual_lockdown\r\n    false,                             // force_failsafe\r\n    false,                             // in_esc_calibration_mode\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_j\r\n  //  Referenced by: '<S6>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    false,                             // armed\r\n    false,                             // prearmed\r\n    false,                             // ready_to_arm\r\n    false,                             // lockdown\r\n    false,                             // manual_lockdown\r\n    false,                             // force_failsafe\r\n    false,                             // in_esc_calibration_mode\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: Constant_Value_k\r\n  //  Referenced by: '<S57>/Constant'\r\n\r\n  {\r\n    (0ULL),                            // timestamp\r\n    false,                             // armed\r\n    false,                             // prearmed\r\n    false,                             // ready_to_arm\r\n    false,                             // lockdown\r\n    false,                             // manual_lockdown\r\n    false,                             // force_failsafe\r\n    false,                             // in_esc_calibration_mode\r\n    0U                                 // _padding0\r\n  },\r\n\r\n  // Computed Parameter: yaw_Out_Y0\r\n  //  Referenced by: '<S32>/yaw_Out'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0.0\r\n  //  Referenced by: '<S30>/Delay'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0.01\r\n  //  Referenced by: '<S30>/Rate'\r\n\r\n  0.01,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S30>/Gain1'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S30>/Gain'\r\n\r\n  -1.0,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S31>/Delay'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S31>/Constant'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: Out_Y0\r\n  //  Referenced by: '<S28>/Out'\r\n\r\n  0.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S26>/Gain'\r\n\r\n  -1.0,\r\n\r\n  // Computed Parameter: yaw_Out_Y0_f\r\n  //  Referenced by: '<S29>/yaw_Out'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0.0\r\n  //  Referenced by: '<S21>/Delay'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0.0\r\n  //  Referenced by: '<S26>/Delay'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S26>/Switch'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0.02\r\n  //  Referenced by: '<S26>/Rate of descent'\r\n\r\n  0.02,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S26>/Gain2'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S26>/Gain1'\r\n\r\n  -1.0,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S27>/Delay'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S27>/Constant'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S33>/Constant'\r\n\r\n  0.0,\r\n\r\n  // Expression: 6\r\n  //  Referenced by: '<S23>/Constant'\r\n\r\n  6.0,\r\n\r\n  // Computed Parameter: yaw_Out_Y0_p\r\n  //  Referenced by: '<S25>/yaw_Out'\r\n\r\n  0.0,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S24>/Delay'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S24>/Constant'\r\n\r\n  0.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S19>/Read Parameter'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S51>/Read Parameter'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S50>/Read Parameter'\r\n\r\n  -1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S54>/Constant1'\r\n\r\n  0.0,\r\n\r\n  // Expression: 100\r\n  //  Referenced by: '<S55>/Constant1'\r\n\r\n  100.0,\r\n\r\n  // Expression: 0.01\r\n  //  Referenced by: '<S63>/Gain'\r\n\r\n  0.01,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S63>/Saturation'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S63>/Saturation'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S54>/Constant2'\r\n\r\n  0.0,\r\n\r\n  // Expression: 100\r\n  //  Referenced by: '<S55>/Constant2'\r\n\r\n  100.0,\r\n\r\n  // Expression: 0.01\r\n  //  Referenced by: '<S64>/Gain'\r\n\r\n  0.01,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S64>/Saturation'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S64>/Saturation'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S54>/Constant3'\r\n\r\n  0.0,\r\n\r\n  // Expression: 100\r\n  //  Referenced by: '<S55>/Constant3'\r\n\r\n  100.0,\r\n\r\n  // Expression: 0.01\r\n  //  Referenced by: '<S65>/Gain'\r\n\r\n  0.01,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S65>/Saturation'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S65>/Saturation'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S54>/Constant4'\r\n\r\n  0.0,\r\n\r\n  // Expression: 100\r\n  //  Referenced by: '<S55>/Constant4'\r\n\r\n  100.0,\r\n\r\n  // Expression: 0.01\r\n  //  Referenced by: '<S66>/Gain'\r\n\r\n  0.01,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S66>/Saturation'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S66>/Saturation'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S54>/Constant5'\r\n\r\n  0.0,\r\n\r\n  // Expression: 100\r\n  //  Referenced by: '<S55>/Constant5'\r\n\r\n  100.0,\r\n\r\n  // Expression: 0.01\r\n  //  Referenced by: '<S67>/Gain'\r\n\r\n  0.01,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S67>/Saturation'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S67>/Saturation'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S54>/Constant'\r\n\r\n  0.0,\r\n\r\n  // Expression: 100\r\n  //  Referenced by: '<S55>/Constant'\r\n\r\n  100.0,\r\n\r\n  // Expression: 0.01\r\n  //  Referenced by: '<S62>/Gain'\r\n\r\n  0.01,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S62>/Saturation'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S62>/Saturation'\r\n\r\n  0.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S55>/Read Parameter1'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S55>/Read Parameter13'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S55>/Read Parameter2'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S55>/Read Parameter3'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S55>/Read Parameter4'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S55>/Read Parameter5'\r\n\r\n  -1.0,\r\n\r\n  // Computed Parameter: tau_Yaw_Y0\r\n  //  Referenced by: '<S73>/tau_Yaw'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: tau_Pitch_Y0\r\n  //  Referenced by: '<S73>/tau_Pitch'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: tau_Roll_Y0\r\n  //  Referenced by: '<S73>/tau_Roll'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S109>/Constant1'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S161>/Constant1'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S213>/Constant1'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S109>/Clamping_zero'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: Integrator_gainval\r\n  //  Referenced by: '<S119>/Integrator'\r\n\r\n  0.01,\r\n\r\n  // Computed Parameter: Filter_gainval\r\n  //  Referenced by: '<S114>/Filter'\r\n\r\n  0.01,\r\n\r\n  // Expression: 40*pi/180\r\n  //  Referenced by: '<S73>/Rate Limiter2'\r\n\r\n  0.69813170079773179,\r\n\r\n  // Expression: -40*pi/180\r\n  //  Referenced by: '<S73>/Rate Limiter2'\r\n\r\n  -0.69813170079773179,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S73>/Rate Limiter2'\r\n\r\n  0.0,\r\n\r\n  // Expression: 20*pi/180\r\n  //  Referenced by: '<S73>/Saturation1'\r\n\r\n  0.3490658503988659,\r\n\r\n  // Expression: -20*pi/180\r\n  //  Referenced by: '<S73>/Saturation1'\r\n\r\n  -0.3490658503988659,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S161>/Clamping_zero'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: Integrator_gainval_i\r\n  //  Referenced by: '<S171>/Integrator'\r\n\r\n  0.01,\r\n\r\n  // Computed Parameter: Filter_gainval_p\r\n  //  Referenced by: '<S166>/Filter'\r\n\r\n  0.01,\r\n\r\n  // Expression: 40*pi/180\r\n  //  Referenced by: '<S73>/Rate Limiter1'\r\n\r\n  0.69813170079773179,\r\n\r\n  // Expression: -40*pi/180\r\n  //  Referenced by: '<S73>/Rate Limiter1'\r\n\r\n  -0.69813170079773179,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S73>/Rate Limiter1'\r\n\r\n  0.0,\r\n\r\n  // Expression: 20*pi/180\r\n  //  Referenced by: '<S73>/Saturation'\r\n\r\n  0.3490658503988659,\r\n\r\n  // Expression: -20*pi/180\r\n  //  Referenced by: '<S73>/Saturation'\r\n\r\n  -0.3490658503988659,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S213>/Clamping_zero'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: Integrator_gainval_p\r\n  //  Referenced by: '<S223>/Integrator'\r\n\r\n  0.01,\r\n\r\n  // Computed Parameter: Filter_gainval_k\r\n  //  Referenced by: '<S218>/Filter'\r\n\r\n  0.01,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S340>/Constant'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S342>/Switch1'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: des_pitch_Y0\r\n  //  Referenced by: '<S76>/des_pitch'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: des_roll_Y0\r\n  //  Referenced by: '<S76>/des_roll'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: des_yawrate_Y0\r\n  //  Referenced by: '<S76>/des_yawrate'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: tau_Thrust_Y0\r\n  //  Referenced by: '<S76>/tau_Thrust'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S524>/Constant1'\r\n\r\n  0.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S576>/Constant1'\r\n\r\n  0.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S341>/Gain'\r\n\r\n  -1.0,\r\n\r\n  // Expression: 2*pi\r\n  //  Referenced by: '<S342>/Constant'\r\n\r\n  6.2831853071795862,\r\n\r\n  // Expression: pi\r\n  //  Referenced by: '<S342>/Switch'\r\n\r\n  3.1415926535897931,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S76>/Gain1'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S340>/Gain1'\r\n\r\n  -1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S524>/Clamping_zero'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: Filter_gainval_i\r\n  //  Referenced by: '<S529>/Filter'\r\n\r\n  0.01,\r\n\r\n  // Computed Parameter: Integrator_gainval_p4\r\n  //  Referenced by: '<S534>/Integrator'\r\n\r\n  0.01,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S576>/Clamping_zero'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: Filter_gainval_d\r\n  //  Referenced by: '<S581>/Filter'\r\n\r\n  0.01,\r\n\r\n  // Computed Parameter: Integrator_gainval_ik\r\n  //  Referenced by: '<S586>/Integrator'\r\n\r\n  0.01,\r\n\r\n  // Expression: [1 0 0 0]\r\n  //  Referenced by: '<S77>/Constant'\r\n\r\n  { 1.0, 0.0, 0.0, 0.0 },\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S607>/Constant'\r\n\r\n  1.0,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S608>/Constant'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S77>/Switch'\r\n\r\n  0.0,\r\n\r\n  // Expression: 1500\r\n  //  Referenced by: '<S75>/Constant2'\r\n\r\n  1500.0,\r\n\r\n  // Expression: 1/400\r\n  //  Referenced by: '<S75>/Gain2'\r\n\r\n  0.0025,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S75>/Saturation2'\r\n\r\n  1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S75>/Saturation2'\r\n\r\n  -1.0,\r\n\r\n  // Expression: -20*pi/180\r\n  //  Referenced by: '<S4>/Gain1'\r\n\r\n  -0.3490658503988659,\r\n\r\n  // Expression: 1500\r\n  //  Referenced by: '<S75>/Constant1'\r\n\r\n  1500.0,\r\n\r\n  // Expression: 1/400\r\n  //  Referenced by: '<S75>/Gain1'\r\n\r\n  0.0025,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S75>/Saturation1'\r\n\r\n  1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S75>/Saturation1'\r\n\r\n  -1.0,\r\n\r\n  // Expression: 20*pi/180\r\n  //  Referenced by: '<S4>/Gain2'\r\n\r\n  0.3490658503988659,\r\n\r\n  // Expression: 1100\r\n  //  Referenced by: '<S75>/Constant'\r\n\r\n  1100.0,\r\n\r\n  // Expression: 1/800\r\n  //  Referenced by: '<S75>/Gain'\r\n\r\n  0.00125,\r\n\r\n  // Expression: 0.90\r\n  //  Referenced by: '<S75>/Saturation'\r\n\r\n  0.9,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S75>/Saturation'\r\n\r\n  0.0,\r\n\r\n  // Expression: 1500\r\n  //  Referenced by: '<S75>/Constant3'\r\n\r\n  1500.0,\r\n\r\n  // Expression: 1/400\r\n  //  Referenced by: '<S75>/Gain3'\r\n\r\n  0.0025,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S75>/Saturation3'\r\n\r\n  1.0,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S75>/Saturation3'\r\n\r\n  -1.0,\r\n\r\n  // Expression: 50*pi/180\r\n  //  Referenced by: '<S4>/Gain4'\r\n\r\n  0.87266462599716477,\r\n\r\n  // Expression: -1\r\n  //  Referenced by: '<S4>/Gain'\r\n\r\n  -1.0,\r\n\r\n  // Expression: 5\r\n  //  Referenced by: '<S3>/Gain'\r\n\r\n  5.0,\r\n\r\n  // Expression: 5\r\n  //  Referenced by: '<S3>/Gain1'\r\n\r\n  5.0,\r\n\r\n  // Expression: 10\r\n  //  Referenced by: '<S3>/Gain2'\r\n\r\n  10.0,\r\n\r\n  // Expression: 1\r\n  //  Referenced by: '<S3>/Gain3'\r\n\r\n  1.0,\r\n\r\n  // Expression: 0\r\n  //  Referenced by: '<S59>/Constant'\r\n\r\n  0.0,\r\n\r\n  // Computed Parameter: Constant7_Value\r\n  //  Referenced by: '<S44>/Constant7'\r\n\r\n  (0ULL),\r\n\r\n  // Computed Parameter: Constant1_Value_d\r\n  //  Referenced by: '<S51>/Constant1'\r\n\r\n  { 0.0F, 0.0F },\r\n\r\n  // Computed Parameter: Constant_Value_f2\r\n  //  Referenced by: '<S51>/Constant'\r\n\r\n  0.0F,\r\n\r\n  // Computed Parameter: Gain_Gain_h\r\n  //  Referenced by: '<S50>/Gain'\r\n\r\n  -1.0F,\r\n\r\n  // Computed Parameter: Constant1_Value_k4\r\n  //  Referenced by: '<S50>/Constant1'\r\n\r\n  { 0.0F, 0.0F },\r\n\r\n  // Computed Parameter: Constant_Value_l4\r\n  //  Referenced by: '<S50>/Constant'\r\n\r\n  0.0F,\r\n\r\n  // Computed Parameter: Constant_Value_fh\r\n  //  Referenced by: '<S44>/Constant'\r\n\r\n  { 0.0F, 0.0F, 0.0F },\r\n\r\n  // Computed Parameter: Constant1_Value_hv\r\n  //  Referenced by: '<S44>/Constant1'\r\n\r\n  { 0.0F, 0.0F, 0.0F },\r\n\r\n  // Computed Parameter: Constant2_Value_f\r\n  //  Referenced by: '<S44>/Constant2'\r\n\r\n  { 0.0F, 0.0F, 0.0F },\r\n\r\n  // Computed Parameter: Constant3_Value_a\r\n  //  Referenced by: '<S44>/Constant3'\r\n\r\n  0.0F,\r\n\r\n  // Computed Parameter: Constant4_Value_g\r\n  //  Referenced by: '<S44>/Constant4'\r\n\r\n  0.0F,\r\n\r\n  // Computed Parameter: Constant5_Value_j\r\n  //  Referenced by: '<S42>/Constant5'\r\n\r\n  true,\r\n\r\n  // Computed Parameter: Constant5_Value_k\r\n  //  Referenced by: '<S43>/Constant5'\r\n\r\n  true,\r\n\r\n  // Computed Parameter: Constant1_Value_dl\r\n  //  Referenced by: '<S45>/Constant1'\r\n\r\n  true,\r\n\r\n  // Computed Parameter: Constant5_Value_h\r\n  //  Referenced by: '<S45>/Constant5'\r\n\r\n  true,\r\n\r\n  // Computed Parameter: Constant5_Value_l\r\n  //  Referenced by: '<S44>/Constant5'\r\n\r\n  false,\r\n\r\n  // Computed Parameter: Constant_Value_ge\r\n  //  Referenced by: '<S109>/Constant'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant2_Value_i\r\n  //  Referenced by: '<S109>/Constant2'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant3_Value_h\r\n  //  Referenced by: '<S109>/Constant3'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant4_Value_f\r\n  //  Referenced by: '<S109>/Constant4'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant_Value_a1\r\n  //  Referenced by: '<S161>/Constant'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant2_Value_l\r\n  //  Referenced by: '<S161>/Constant2'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant3_Value_j\r\n  //  Referenced by: '<S161>/Constant3'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant4_Value_a\r\n  //  Referenced by: '<S161>/Constant4'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant_Value_jj\r\n  //  Referenced by: '<S213>/Constant'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant2_Value_o\r\n  //  Referenced by: '<S213>/Constant2'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant3_Value_l\r\n  //  Referenced by: '<S213>/Constant3'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant4_Value_n\r\n  //  Referenced by: '<S213>/Constant4'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant_Value_n1\r\n  //  Referenced by: '<S524>/Constant'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant2_Value_gq\r\n  //  Referenced by: '<S524>/Constant2'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant3_Value_i\r\n  //  Referenced by: '<S524>/Constant3'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant4_Value_hf\r\n  //  Referenced by: '<S524>/Constant4'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant_Value_gf\r\n  //  Referenced by: '<S576>/Constant'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant2_Value_ga\r\n  //  Referenced by: '<S576>/Constant2'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant3_Value_b\r\n  //  Referenced by: '<S576>/Constant3'\r\n\r\n  1,\r\n\r\n  // Computed Parameter: Constant4_Value_fv\r\n  //  Referenced by: '<S576>/Constant4'\r\n\r\n  -1,\r\n\r\n  // Computed Parameter: Constant_Value_fm\r\n  //  Referenced by: '<S36>/Constant'\r\n\r\n  0U,\r\n\r\n  // Computed Parameter: Constant6_Value\r\n  //  Referenced by: '<S44>/Constant6'\r\n\r\n  255U\r\n};\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rtGetInf.cpp","type":"source","group":"utility","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rtGetInf.cpp\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n\r\n#include \"rtwtypes.h\"\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rtGetInf.h\"\r\n\r\n}\r\n\r\n#include <stddef.h>\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rt_nonfinite.h\"\r\n\r\n}\r\n\r\n#define NumBitsPerChar                 8U\r\n\r\nextern \"C\"\r\n{\r\n  //\r\n  // Initialize rtInf needed by the generated code.\r\n  // Inf is initialized as non-signaling. Assumes IEEE.\r\n  //\r\n  real_T rtGetInf(void)\r\n  {\r\n    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n    real_T inf = 0.0;\r\n    if (bitsPerReal == 32U) {\r\n      inf = rtGetInfF();\r\n    } else {\r\n      union {\r\n        LittleEndianIEEEDouble bitVal;\r\n        real_T fltVal;\r\n      } tmpVal;\r\n\r\n      tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n      tmpVal.bitVal.words.wordL = 0x00000000U;\r\n      inf = tmpVal.fltVal;\r\n    }\r\n\r\n    return inf;\r\n  }\r\n\r\n  //\r\n  // Initialize rtInfF needed by the generated code.\r\n  // Inf is initialized as non-signaling. Assumes IEEE.\r\n  //\r\n  real32_T rtGetInfF(void)\r\n  {\r\n    IEEESingle infF;\r\n    infF.wordL.wordLuint = 0x7F800000U;\r\n    return infF.wordL.wordLreal;\r\n  }\r\n\r\n  //\r\n  // Initialize rtMinusInf needed by the generated code.\r\n  // Inf is initialized as non-signaling. Assumes IEEE.\r\n  //\r\n  real_T rtGetMinusInf(void)\r\n  {\r\n    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n    real_T minf = 0.0;\r\n    if (bitsPerReal == 32U) {\r\n      minf = rtGetMinusInfF();\r\n    } else {\r\n      union {\r\n        LittleEndianIEEEDouble bitVal;\r\n        real_T fltVal;\r\n      } tmpVal;\r\n\r\n      tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n      tmpVal.bitVal.words.wordL = 0x00000000U;\r\n      minf = tmpVal.fltVal;\r\n    }\r\n\r\n    return minf;\r\n  }\r\n\r\n  //\r\n  // Initialize rtMinusInfF needed by the generated code.\r\n  // Inf is initialized as non-signaling. Assumes IEEE.\r\n  //\r\n  real32_T rtGetMinusInfF(void)\r\n  {\r\n    IEEESingle minfF;\r\n    minfF.wordL.wordLuint = 0xFF800000U;\r\n    return minfF.wordL.wordLreal;\r\n  }\r\n}\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rtGetInf.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef rtGetInf_h_\r\n#define rtGetInf_h_\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rt_nonfinite.h\"\r\n\r\n}\r\n\r\n#include \"rtwtypes.h\"\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern real_T rtGetInf(void);\r\n  extern real32_T rtGetInfF(void);\r\n  extern real_T rtGetMinusInf(void);\r\n  extern real32_T rtGetMinusInfF(void);\r\n\r\n#ifdef __cplusplus\r\n\r\n}                                      // extern \"C\"\r\n\r\n#endif\r\n#endif                                 // rtGetInf_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rtGetNaN.cpp","type":"source","group":"utility","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rtGetNaN.cpp\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n\r\n#include \"rtwtypes.h\"\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rtGetNaN.h\"\r\n\r\n}\r\n\r\n#include <stddef.h>\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rt_nonfinite.h\"\r\n\r\n}\r\n\r\n#define NumBitsPerChar                 8U\r\n\r\nextern \"C\"\r\n{\r\n  //\r\n  // Initialize rtNaN needed by the generated code.\r\n  // NaN is initialized as non-signaling. Assumes IEEE.\r\n  //\r\n  real_T rtGetNaN(void)\r\n  {\r\n    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n    real_T nan = 0.0;\r\n    if (bitsPerReal == 32U) {\r\n      nan = rtGetNaNF();\r\n    } else {\r\n      union {\r\n        LittleEndianIEEEDouble bitVal;\r\n        real_T fltVal;\r\n      } tmpVal;\r\n\r\n      tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n      tmpVal.bitVal.words.wordL = 0x00000000U;\r\n      nan = tmpVal.fltVal;\r\n    }\r\n\r\n    return nan;\r\n  }\r\n\r\n  //\r\n  // Initialize rtNaNF needed by the generated code.\r\n  // NaN is initialized as non-signaling. Assumes IEEE.\r\n  //\r\n  real32_T rtGetNaNF(void)\r\n  {\r\n    IEEESingle nanF = { { 0.0F } };\r\n\r\n    nanF.wordL.wordLuint = 0xFFC00000U;\r\n    return nanF.wordL.wordLreal;\r\n  }\r\n}\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rtGetNaN.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef rtGetNaN_h_\r\n#define rtGetNaN_h_\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rt_nonfinite.h\"\r\n\r\n}\r\n\r\n#include \"rtwtypes.h\"\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern real_T rtGetNaN(void);\r\n  extern real32_T rtGetNaNF(void);\r\n\r\n#ifdef __cplusplus\r\n\r\n}                                      // extern \"C\"\r\n\r\n#endif\r\n#endif                                 // rtGetNaN_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rt_defines.h","type":"header","group":"utility","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rt_defines.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef rt_defines_h_\r\n#define rt_defines_h_\r\n\r\n//===========*\r\n//  Constants *\r\n// ===========\r\n#define RT_PI                          3.14159265358979323846\r\n#define RT_PIF                         3.1415927F\r\n#define RT_LN_10                       2.30258509299404568402\r\n#define RT_LN_10F                      2.3025851F\r\n#define RT_LOG10E                      0.43429448190325182765\r\n#define RT_LOG10EF                     0.43429449F\r\n#define RT_E                           2.7182818284590452354\r\n#define RT_EF                          2.7182817F\r\n\r\n//\r\n//  UNUSED_PARAMETER(x)\r\n//    Used to specify that a function parameter (argument) is required but not\r\n//    accessed by the function body.\r\n\r\n#ifndef UNUSED_PARAMETER\r\n#if defined(__LCC__)\r\n#define UNUSED_PARAMETER(x)                                      // do nothing\r\n#else\r\n\r\n//\r\n//  This is the semi-ANSI standard way of indicating that an\r\n//  unused function parameter is required.\r\n\r\n#define UNUSED_PARAMETER(x)            (void) (x)\r\n#endif\r\n#endif\r\n#endif                                 // rt_defines_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rt_nonfinite.cpp","type":"source","group":"utility","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rt_nonfinite.cpp\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rtGetNaN.h\"\r\n\r\n}\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rtGetInf.h\"\r\n\r\n}\r\n\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n\r\nextern \"C\"\r\n{\r\n\r\n#include \"rt_nonfinite.h\"\r\n\r\n}\r\n\r\n#define NumBitsPerChar                 8U\r\n\r\nextern \"C\"\r\n{\r\n  real_T rtInf;\r\n  real_T rtMinusInf;\r\n  real_T rtNaN;\r\n  real32_T rtInfF;\r\n  real32_T rtMinusInfF;\r\n  real32_T rtNaNF;\r\n}\r\n\r\nextern \"C\"\r\n{\r\n  //\r\n  // Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n  // generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n  //\r\n  void rt_InitInfAndNaN(size_t realSize)\r\n  {\r\n    (void) (realSize);\r\n    rtNaN = rtGetNaN();\r\n    rtNaNF = rtGetNaNF();\r\n    rtInf = rtGetInf();\r\n    rtInfF = rtGetInfF();\r\n    rtMinusInf = rtGetMinusInf();\r\n    rtMinusInfF = rtGetMinusInfF();\r\n  }\r\n\r\n  // Test if value is infinite\r\n  boolean_T rtIsInf(real_T value)\r\n  {\r\n    return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n  }\r\n\r\n  // Test if single-precision value is infinite\r\n  boolean_T rtIsInfF(real32_T value)\r\n  {\r\n    return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n  }\r\n\r\n  // Test if value is not a number\r\n  boolean_T rtIsNaN(real_T value)\r\n  {\r\n    boolean_T result = (boolean_T) 0;\r\n    size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n    if (bitsPerReal == 32U) {\r\n      result = rtIsNaNF((real32_T)value);\r\n    } else {\r\n      union {\r\n        LittleEndianIEEEDouble bitVal;\r\n        real_T fltVal;\r\n      } tmpVal;\r\n\r\n      tmpVal.fltVal = value;\r\n      result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) ==\r\n                           0x7FF00000 &&\r\n                           ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                            (tmpVal.bitVal.words.wordL != 0) ));\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // Test if single-precision value is not a number\r\n  boolean_T rtIsNaNF(real32_T value)\r\n  {\r\n    IEEESingle tmp;\r\n    tmp.wordL.wordLreal = value;\r\n    return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                       (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n  }\r\n}\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rt_nonfinite.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef rt_nonfinite_h_\r\n#define rt_nonfinite_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n#ifdef __cplusplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  extern real_T rtInf;\r\n  extern real_T rtMinusInf;\r\n  extern real_T rtNaN;\r\n  extern real32_T rtInfF;\r\n  extern real32_T rtMinusInfF;\r\n  extern real32_T rtNaNF;\r\n  extern void rt_InitInfAndNaN(size_t realSize);\r\n  extern boolean_T rtIsInf(real_T value);\r\n  extern boolean_T rtIsInfF(real32_T value);\r\n  extern boolean_T rtIsNaN(real_T value);\r\n  extern boolean_T rtIsNaNF(real32_T value);\r\n  struct BigEndianIEEEDouble {\r\n    struct {\r\n      uint32_T wordH;\r\n      uint32_T wordL;\r\n    } words;\r\n  };\r\n\r\n  struct LittleEndianIEEEDouble {\r\n    struct {\r\n      uint32_T wordL;\r\n      uint32_T wordH;\r\n    } words;\r\n  };\r\n\r\n  struct IEEESingle {\r\n    union {\r\n      real32_T wordLreal;\r\n      uint32_T wordLuint;\r\n    } wordL;\r\n  };\r\n\r\n#ifdef __cplusplus\r\n\r\n}                                      // extern \"C\"\r\n\r\n#endif\r\n#endif                                 // rt_nonfinite_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Utility files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rtwtypes.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n// Logical type definitions\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n//=======================================================================*\r\n//  Target hardware information\r\n//    Device type: ARM Compatible->ARM Cortex\r\n//    Number of bits:     char:   8    short:   16    int:  32\r\n//                        long:  32    long long:  64\r\n//                        native word size:  32\r\n//    Byte ordering: LittleEndian\r\n//    Signed integer division rounds to: Zero\r\n//    Shift right on a signed integer as arithmetic shift: on\r\n// =======================================================================\r\n\r\n//=======================================================================*\r\n//  Fixed width word size data types:                                     *\r\n//    int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n//    uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n//    real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n// =======================================================================\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n//===========================================================================*\r\n//  Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n//                            real_T, time_T, ulong_T, ulonglong_T.           *\r\n// ===========================================================================\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n//===========================================================================*\r\n//  Complex number type definitions                                           *\r\n// ===========================================================================\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n//=======================================================================*\r\n//  Min and Max:                                                          *\r\n//    int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n//    uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n// =======================================================================\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n// Block D-Work pointer type\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 // RTWTYPES_H\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Interface files","code":"//\r\n// Academic License - for use in teaching, academic research, and meeting\r\n// course requirements at degree granting institutions only.  Not for\r\n// government, commercial, or other organizational use.\r\n//\r\n// File: rtmodel.h\r\n//\r\n// Code generated for Simulink model 'FLIGHT_HEXA_Hovering'.\r\n//\r\n// Model version                  : 5.30\r\n// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n// C/C++ source code generated on : Thu Jan  9 13:36:09 2025\r\n//\r\n// Target selection: ert.tlc\r\n// Embedded hardware selection: ARM Compatible->ARM Cortex\r\n// Code generation objectives: Unspecified\r\n// Validation result: Not run\r\n//\r\n#ifndef rtmodel_h_\r\n#define rtmodel_h_\r\n#include \"FLIGHT_HEXA_Hovering.h\"\r\n\r\n// Macros generated for backwards compatibility\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 // rtmodel_h_\r\n\r\n//\r\n// File trailer for generated code.\r\n//\r\n// [EOF]\r\n//\r\n"},{"name":"MW_PX4_TaskControl.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2024a\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright 2018-2023 The MathWorks, Inc.\n *\n * File: MW_PX4_TaskControl.c\n *\n * Abstract:\n *  This file contains the main application for Simulink that is launched\n *  by PX4 stack at boot up. The main function spawns a new task and assigns\n *  the main function in ert_main.c as callback.\n *\n */\n\n#include \"nuttxinitialize.h\"\n#include \"MW_PX4_TaskControl.h\"\n/*Simulink model generated code specific headers*/\n\n#define MW_StringifyDefine(x) MW_StringifyDefineExpanded(x)\n#define MW_StringifyDefineExpanded(x) #x\n\n#define MW_StringifyDefineFunction(x, y) MW_StringifyDefineExpandedFunction(x, y)\n#define MW_StringifyDefineExpandedFunction(x, y) x##y\n\n#define MW_StringifyDefineX(x) MW_StringifyDefineExpandedX(x)\n#define MW_StringifyDefineExpandedX(x) x.##h\n\n#define MW_StringifyDefineTypesX(x) MW_StringifyDefineExpandedTypesX(x)\n#define MW_StringifyDefineExpandedTypesX(x) x##_types.h\n\n#define MW_StringifyDefinePrivateX(x) MW_StringifyDefineExpandedPrivateX(x)\n#define MW_StringifyDefineExpandedPrivateX(x) x##_private.h\n\n#include MW_StringifyDefine(MODEL.h)\n#include MW_StringifyDefine(MW_StringifyDefineTypesX(MODEL))\n#include MW_StringifyDefine(MW_StringifyDefinePrivateX(MODEL))\n\n#ifndef MW_PX4_DISABLE_MAVLINK\n#include \"mavlink_main.h\"\n#endif\n\n#define DEBUG 0\n\n#ifdef PIL\nextern int errorOccurred;\n#endif\n\nextern \"C\" __EXPORT int px4_simulink_app_main(int argc,\n                                              char* argv[]); /* sbcheck:ok:extern_c needed */\n\nextern struct hrt_call\n    BaseRate_HRT; /* Base-rate HRT-callback is used to post base-rate semaphore */\nextern int terminatingmodel;\nextern int baserate_sem_copy; /* used for checking HRT semaphore water-mark*/\nstatic bool g_baseRateLife =\n    false;                        /* global storage to contain the status of the px4_simulink_app */\nstatic int px4_simulink_app_task; /* Handle of daemon thread */\nchar mavlink_shell_started = 0;\n\n/* Print the correct usage. */\nvoid px4_app_usage(const char* reason) {\n    if (reason) {\n        PX4_INFO(\"px4_simulink_app : %s\\n\", reason);\n    }\n    errx(1, \"usage: px4_simulink_app {start|stop|status} [-p <additional params>]\\n\\n\");\n}\n\n#if defined(MW_PX4_DISABLE_MAVLINK)\nuint8_t buffer[100];\nMavlinkShell shell;\nvoid shellWait(MavlinkShell* shell_ptr, uint8_t buf[]) {\n    /*The shell wait here is to be used for commands which are expected to\n      return a few characters (a max. of 100 characters.)*/\n    int read = 0, readTotal = 0;\n    for (int i = 0; i < 100; i++) {\n        buf[i] = 0;\n    }\n    while (strstr((char*)buf, \"nsh>\") == NULL) {\n        read = shell_ptr->read(buf + readTotal, 100 - readTotal);\n        readTotal = readTotal + read;\n    }\n}\n#endif\n\nvoid px4_simulink_app_control_MAVLink() {\n    if (mavlink_shell_started == 0) {\n#ifdef MW_PX4_DISABLE_MAVLINK\n        shell.start();\n        shellWait(&shell, buffer);\n#endif\n    }\n\n#ifdef MW_PX4_DISABLE_MAVLINK\n    shell.write((uint8_t*)\"mavlink stop-all\\n\", sizeof(\"mavlink stop-all\\n\"));\n    usleep(100000);\n#endif\n}\n\nint px4_simulink_app_main(int argc, char* argv[]) {\n    if (argc < 2) {\n        px4_app_usage(\"missing command\");\n    }\n\n    if (!strcmp(argv[1], \"start\")) {\n        if (g_baseRateLife == false) {\n            /* Start the Simulink Tasks here */\n#if DEBUG\n            printf(\"px4_simulink_app : Starting the Simulink model\\n\");\n            fflush(stdout);\n#endif\n\n            /* Reset semaphore */\n            g_baseRateLife = true;\n            terminatingmodel =\n                0; // reset global variable. For more info on the rational behind this, please see:\n            // http://nuttx.org/doku.php?id=wiki:nxinternal:tasks-vs-processes#nuttx_flat-build_behavior\n\n            px4_simulink_app_task = px4_task_spawn_cmd(\n                \"px4_simulink_app_task\", /* Definition of px4_task_spawn_cmd :\n                                            C:\\px4\\Firmware\\src\\platforms\\nuttx\\px4_layer\\px4_nuttx_tasks.c\n                                          */\n                SCHED_DEFAULT,           /* For STM32 F4, NuttX has SCHED_DEFAULT as SCHED_RR */\n                SCHED_PRIORITY_MAX - 15, /* SCHED_PRIORITY_MAX: 255 */\n                2048, px4_simulink_app_task_main, (char* const*)NULL);\n\n        } else {\n            warnx(\"px4_simulink_app : Simulink model is already running\\n\");\n            fflush(stdout);\n        }\n#if defined(MW_PX4_NUTTX_BUILD)\n        exit(0);\n#else\n        return 0;\n#endif\n    }\n\n    if (!strcmp(argv[1], \"stop\")) {\n        if (g_baseRateLife == true) {\n#ifdef PIL\n            errorOccurred = 1;\n#else\n            rtmSetErrorStatus(MW_StringifyDefineFunction(MODEL, _M), \"Module stopped by user\");\n            g_baseRateLife = false;\n            px4_sem_post(&baserateTaskSem);\n#endif\n#if DEBUG\n            PX4_INFO(\"px4_simulink_app : Exiting the Simulink model\\n\");\n#endif\n        } else {\n            warnx(\"px4_simulink_app : No Simulink model is running\\n\");\n        }\n\n        fflush(stdout);\n#if defined(MW_PX4_NUTTX_BUILD)\n        exit(0);\n#else\n        return 0;\n#endif\n    }\n\n    if (!strcmp(argv[1], \"status\")) {\n        if (g_baseRateLife) {\n            PX4_INFO(\"px4_simulink_app : model is running\\n\");\n        } else {\n            PX4_INFO(\"px4_simulink_app : model is not started\\n\");\n        }\n        fflush(stdout);\n#if defined(MW_PX4_NUTTX_BUILD)\n        exit(0);\n#else\n        return 0;\n#endif\n    }\n\n    px4_app_usage(\"unrecognized command\");\n#if defined(MW_PX4_NUTTX_BUILD)\n    exit(1);\n#else\n    return 1;\n#endif\n}\n\nvoid MW_PX4_Terminate() {\n    hrt_cancel(&BaseRate_HRT);\n    g_baseRateLife = false; // set status of PX4 Simulink App to stop\n\n#if defined(MW_HRT_CONSTRAINT) && (1 == MW_HRT_CONSTRAINT)\n    if (baserate_sem_copy > MW_SEM_WATERMARK) {\n        PX4_INFO(\"Hard real-time constraint violated, shutting down. Updating log file. \\n\");\n        FILE* fp_taskover_run = NULL;\n        char msg_watermark[100] = {0};\n        char msg_timestamp[50] = {0};\n        struct tm* sTm;\n        time_t now = time(NULL);\n        sTm = gmtime(&now);\n        sprintf(msg_watermark,\n                \"Base-rate semaphore exceeded water-mark value %d. Model base-rate = %.3f sec.\",\n                MW_SEM_WATERMARK, (float)MW_BASERATE_PERIOD);\n        strftime(msg_timestamp, sizeof(msg_timestamp), \"%Y-%m-%d %H:%M:%S\", sTm);\n        fp_taskover_run = fopen(\"/fs/microsd/log/task_overrun_log.txt\", \"a+\");\n        fprintf(fp_taskover_run, \"%s Timestamp=%s \\n\", msg_watermark, msg_timestamp);\n        fclose(fp_taskover_run);\n    }\n#endif\n\n#if DEBUG\n    PX4_INFO(\"px4_simulink_app : Received command to end the Simulink task \\n\");\n    fflush(stdout);\n#endif\n}\n\n// LocalWords:  HRT px nsh mavlink nuttx doku nxinternal Nutt SCHED fs microsd\n// LocalWords:  dev ACM tty\n"},{"name":"MW_ParameterRead.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2024a\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/* Copyright 2018-2020 The MathWorks, Inc. */\n/* Reads the Parameter value and outputs the same.\n\n **/\n#include \"MW_ParameterRead.h\"\n\n//Below Macro can be enabled for debugging purposes\n#define DEBUG 0\n\n/*\n ****************************************************************************************************************************************************\n * Wrapper function For Initializing and getting the parameter handle\n * Input Params\n * isString  - Denotes if the Parameter is string or numeric\n * sampleTime - Sample time of the block\n \n * Output Params\n * param_handle  - Handle to the requested parameter.\n ****************************************************************************************************************************************************\n */\nMW_Param_Handle MW_Init_Param(void * ParameterName, uint8_T isString , double sampleTime)\n{\n\n    MW_Param_Handle param_handle = PARAM_INVALID;\n    char * parameterStr;\n    /* Check parameters */\n    if (0 == isString)\n    {\n        fprintf(stderr,\"Only string as ParameterName name is supported.\\n\");\n#if defined(MW_PX4_NUTTX_BUILD)\t\n\texit(1);\n#else\n\treturn 1;\n#endif\n    }\n    else\n    {\n        parameterStr = (char*)ParameterName;\n    }\n    param_handle = param_find(parameterStr);\n#if DEBUG\n    printf(\"In MW_Init_Param. Parameter name = %s.\\n\", parameterStr);\n#endif\n    if (param_handle != PARAM_INVALID)\n    {\n#if DEBUG\n        printf(\"In MW_Init_Param. Valid Parameter Handle = %u.\\n\", param_handle);\n#endif    \n    }\n    else\n    {\n#if DEBUG\n        printf(\"In MW_Init_Param. Invalid Parameter Handle. \\n\");\n#endif\n    }\n    return param_handle;\n}\n\n/*\n ****************************************************************************************************************************************************\n * Wrapper function For reading the parameter\n * Input Params\n * param_h  - Handle to the parameter requested\n * dataType - Data Type of the Parameter Requested\n * dataPtr - Pointer to the data, into which param_get is written to\n *\n * Output Params\n * status  - 0 for a valid Parameter Handle ; 1 for a valid Parameter Handle\n ****************************************************************************************************************************************************\n */\nbool MW_Param_Step(MW_Param_Handle param_h, MW_PARAM_DATA_TYPE dataType, void * dataPtr)\n{\n    //status - 0 for a valid Parameter Handle\n    //status - 1 for an invalid Parameter Handle\n    bool status = 1;\n    if (param_h != PARAM_INVALID)\n    {\n#if DEBUG\n        printf(\"In MW_Param_Step.Parameter Handle = %u.\\n\", param_h);\n#endif\n        int32_t  ReturnTmpInt;\n        float ReturnTmpFlt;\n        switch (dataType)\n        {\n            case MW_INT32:\n                if (!param_get(param_h, &ReturnTmpInt))\n                {\n                    *(int*)dataPtr  = ReturnTmpInt;\n#if DEBUG\n                    printf(\"In MW_Param_Step MW_INT32. Value = %ld\\n\", *(int*)dataPtr);\n#endif\n                }\n                break;\n            case MW_SINGLE:\n                if (!param_get(param_h, &ReturnTmpFlt))\n                {\n                    *(float*)dataPtr  = ReturnTmpFlt;\n#if DEBUG\n                    printf(\"In MW_Param_Step MW_SINGLE. Value = %4.4f\\n\", *(float*)dataPtr);\n#endif\n                }\n                break;\n            default:\n                break;\n        }\n         status = 0;\n    }\n    return status;\n}\n\nvoid MW_Param_terminate(void) \n{\n}\n"},{"name":"MW_custom_RTOS_header.h","type":"header","group":"other","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef _MW_CUSTOM_RTOS_HEADER_H_\r\n#define _MW_CUSTOM_RTOS_HEADER_H_\r\n#define MW_BASERATE_PRIORITY           250\r\n#define MW_BASERATE_PERIOD             0.01\r\n#define MW_NUMBER_SUBRATES             0\r\n#define MW_NUMBER_APERIODIC_TASKS      0\r\n#define MW_IS_CONCURRENT               0\r\n#define MW_NUMBER_TIMER_DRIVEN_TASKS   0\r\n\r\nextern void exitFcn(int sig);\r\nextern void *terminateTask(void *arg);\r\nextern void *baseRateTask(void *arg);\r\nextern void *subrateTask(void *arg);\r\nextern pthread_t schedulerThread;\r\nextern pthread_t baseRateThread;\r\nextern pthread_t subRateThread[];\r\nextern px4_sem_t stopSem;\r\nextern px4_sem_t baserateTaskSem;\r\nextern px4_sem_t subrateTaskSem[];\r\nextern int taskId[];\r\nextern int subratePriority[];\r\n\r\n#endif\r\n\r\n#define MW_MAX_TASKNAME                16\r\n"},{"name":"MW_target_hardware_resources.h","type":"header","group":"other","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef PORTABLE_WORDSIZES\n#ifdef __MW_TARGET_USE_HARDWARE_RESOURCES_H__\n#ifndef __MW_TARGET_HARDWARE_RESOURCES_H__\n#define __MW_TARGET_HARDWARE_RESOURCES_H__\n\n#define MW_MULTI_TASKING_MODE 1\n#include \"MW_PX4_TaskControl.h\"\n\n#define MW_USECODERTARGET 1\n#define MW_TARGETHARDWARE PX4 Cube Orange\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERSIZE 1024\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERNUM 3\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_MAXCONTIGSAMPLES 10\n#define MW_CONNECTIONINFO_XCPONSERIAL_BAUDRATE codertarget.pixhawk.internal.getExternalModeBaudrate(hCS);\n#define MW_CONNECTIONINFO_XCPONSERIAL_COMPORT codertarget.pixhawk.internal.getExternalSerialPortName(hCS);\n#define MW_CONNECTIONINFO_XCPONSERIAL_VERBOSE 1\n#define MW_EXTMODE_CONFIGURATION XCP on Serial\n#define MW_RTOS NuttX\n#define MW_RTOSBASERATETASKPRIORITY 250\n#define MW_SCHEDULER_INTERRUPT_SOURCE 0\n#define MW_RUNTIME_BUILDACTION 1\n#define MW_CMAKECONFIG cubepilot_cubeorange_multicopter\n#define MW_CHANGECMAKECONFIG 48\n#define MW_AUTOMATIC_SERIAL_SCAN 1\n#define MW_COM_UPLOAD_STORAGE \n#define MW_NUTTX_SERIAL_PORT \n#define MW_ENABLE_HITL 1\n#define MW_SIMULATOR 1\n#define MW_CONNECTEDIOSERIALPORT /dev/ttyACM0\n#define MW_CONNECTEDIOSERIALPORT_CHECKBOX 1\n#define MW_CONNECTEDIOHOSTCOMPORT \n#define MW_SIMULINKIO_MODELTRANSPORTDATAFCN px4.internal.ConnectedIO.getConfigsetInfo\n#define MW_SIMULINKIO_SERVERDEPLOYFCN px4.internal.ConnectedIO.buildAndDeployPX4IOServer\n#define MW_CLOCKING_CPUCLOCKRATEMHZ 400\n#define MW_EXTSERIALPORT 0\n#define MW_EXTMODESERIALPORT_CHECKBOX 1\n#define MW_EXTMODEHOSTCOMPORT \n#define MW_PILSERIALPORT /dev/ttyACM0\n#define MW_PILSERIALPORT_CHECKBOX 1\n#define MW_PILHOSTCOMPORT \n#define MW_I2C_BUS1SPEEDKHZ_INDEX 0\n#define MW_I2C_BUS2SPEEDKHZ_INDEX 0\n#define MW_I2C_BUS1SPEEDKHZ 100\n#define MW_I2C_BUS2SPEEDKHZ 100\n#define MW_CAN_PORTINDEX 0\n#define MW_CAN_BAUDRATE_INDEX 2\n#define MW_CAN_BAUDRATE 500000\n#define MW_CAN_TESTMODE 0\n#define MW_ENABLEMAVLINKCHECKBOX 1\n#define MW_TTYACM0_BAUDRATE 27\n#define MW_TTYACM0_PARITY 0\n#define MW_TTYACM0_STOPBIT 0\n#define MW_TTYACM0_PORTMAP 48\n#define MW_TTYS0_BAUDRATE 27\n#define MW_TTYS0_PARITY 0\n#define MW_TTYS0_STOPBIT 0\n#define MW_TTYS0_PORTMAP 48\n#define MW_TTYS0HWFLOWCONTROL_CHECKBOX 0\n#define MW_TTYS1_BAUDRATE 27\n#define MW_TTYS1_PARITY 0\n#define MW_TTYS1_STOPBIT 0\n#define MW_TTYS1_PORTMAP 48\n#define MW_TTYS1HWFLOWCONTROL_CHECKBOX 0\n#define MW_TTYS2_BAUDRATE 27\n#define MW_TTYS2_PARITY 0\n#define MW_TTYS2_STOPBIT 0\n#define MW_TTYS2_PORTMAP 48\n#define MW_TTYS2HWFLOWCONTROL_CHECKBOX 0\n#define MW_TTYS5_BAUDRATE 27\n#define MW_TTYS5_PARITY 0\n#define MW_TTYS5_STOPBIT 0\n#define MW_TTYS5_PORTMAP 48\n#define MW_HRT_CONSTRAINT 0\n#define MW_SEM_WATERMARK 20\n#define MW_IOBLOCKSMODE deployed\n#define MW_DATAVERSION 2016.02\n\n#endif /* __MW_TARGET_HARDWARE_RESOURCES_H__ */\n\n#endif\n\n#endif\n"},{"name":"MW_uORB_Read.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2024a\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/* Copyright 2018-2020 The MathWorks, Inc. */\n\n#include \"nuttxinitialize.h\"\n#include \"MW_PX4_TaskControl.h\"\n#include \"MW_uORB_Read.h\"\n\n#define DEBUG 0\n\nvoid uORB_read_initialize(orb_metadata_t* orbData, pollfd_t* eventStructObj) {\n    int fd = orb_subscribe(orbData);\n    eventStructObj->fd = fd;\n    eventStructObj->events = POLLIN;\n#if DEBUG\n    PX4_INFO(\"* Subscribed to topic: %s (fd = %d)*\\n\", orbData->o_name, fd);\n#endif\n}\n\nboolean_T uORB_read_step(orb_metadata_t* orbData,\n                         pollfd_t* eventStructObj,\n                         void* busData,\n                         boolean_T blockingMode,\n                         double blockingTimeout) {\n    boolean_T updated = 0;\n    bool isUpdated = false;\n    if (blockingMode) {\n#if defined(MW_PX4_NUTTX_BUILD)\n        int poll_ret = px4_poll(eventStructObj, 1, blockingTimeout);\n        static int error_counter = 0;\n        if (poll_ret == 0) {\n#if DEBUG\n            PX4_ERR(\"Got no data within %.9lf second\", blockingTimeout / 1000.0);\n#endif\n        } else if (poll_ret < 0) {\n            if (error_counter < 10 || error_counter % 500 == 0) {\n                /* use a counter to prevent flooding and slowing the system down */\n#if DEBUG\n                PX4_ERR(\"ERROR return value from poll(): %d\", poll_ret);\n#endif\n            }\n            error_counter++;\n\n        } else {\n            if (eventStructObj->revents & POLLIN) {\n                orb_copy(orbData, eventStructObj->fd, busData);\n                updated = 1;\n            }\n        }\n#elif defined(MW_PX4_POSIX_BUILD)\n        double count = 0;\n        /* The blocking timeout mentioned in the block mask is seconds but\n         * system object converts it to milliseconds*/\n        while (count < blockingTimeout) {\n            // Sleep for 1 ms and then again check if\n            // uORB topic is updated\n            usleep(1000);\n            orb_check(eventStructObj->fd, &isUpdated);\n            if (isUpdated) {\n                orb_copy(orbData, eventStructObj->fd, busData);\n                break;\n            }\n            count++;\n        }\n\n        updated = isUpdated ? 1 : 0;\n#endif\n    } else {\n        orb_check(eventStructObj->fd, &isUpdated);\n        if (isUpdated) {\n            orb_copy(orbData, eventStructObj->fd, busData);\n        }\n        updated = isUpdated ? 1 : 0;\n    }\n\n    return updated;\n}\n\nvoid uORB_read_terminate(const pollfd_t* eventStructObj) {\n    orb_unsubscribe(eventStructObj->fd);\n}\n"},{"name":"MW_uORB_Write.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2024a\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/* Copyright 2018 The MathWorks, Inc. */\n\n#include \"nuttxinitialize.h\"\n#include \"MW_PX4_TaskControl.h\"\n#include \"MW_uORB_Write.h\"\n\n#define DEBUG 0\n\nvoid uORB_write_initialize(orb_metadata_t* orbData,\n                          orb_advert_t* orbAdvertObj,\n                          void* busData,\n                          int queueLen) {\n    *orbAdvertObj = orb_advertise_queue(orbData, busData, queueLen);    \n#if DEBUG\n    PX4_INFO(\"Started advertising topic: %s \\n\",  orbData->o_name);\n#endif    \n}\n\nvoid uORB_write_step(orb_metadata_t* orbData,\n                    orb_advert_t* orbAdvertObj,\n                    void* busData) {\n    orb_publish(orbData, *orbAdvertObj, busData);\n}\n\nvoid uORB_write_terminate(const orb_advert_t* orbAdvertObj) {\n    orb_unadvertise(*orbAdvertObj);\n}\n"},{"name":"MW_uORB_busstruct_conversion.h","type":"header","group":"other","path":"E:\\Hexacopter_FDDProject\\work\\code\\FLIGHT_HEXA_Hovering_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef _MW_UORB_BUSSTRUCT_CONVERSION_H_\r\n#define _MW_UORB_BUSSTRUCT_CONVERSION_H_\r\n\r\n#include <uORB/topics/actuator_armed.h>\r\n#include <uORB/topics/actuator_motors.h>\r\n#include <uORB/topics/home_position.h>\r\n#include <uORB/topics/input_rc.h>\r\n#include <uORB/topics/position_setpoint.h>\r\n#include <uORB/topics/position_setpoint_triplet.h>\r\n#include <uORB/topics/trajectory_waypoint.h>\r\n#include <uORB/topics/vehicle_angular_velocity.h>\r\n#include <uORB/topics/vehicle_attitude.h>\r\n#include <uORB/topics/vehicle_local_position.h>\r\n#include <uORB/topics/vehicle_trajectory_waypoint.h>\r\n\r\ntypedef struct actuator_armed_s  px4_Bus_actuator_armed ;\r\ntypedef struct actuator_motors_s  px4_Bus_actuator_motors ;\r\ntypedef struct home_position_s  px4_Bus_home_position ;\r\ntypedef struct input_rc_s  px4_Bus_input_rc ;\r\ntypedef struct position_setpoint_s  px4_Bus_position_setpoint ;\r\ntypedef struct position_setpoint_triplet_s  px4_Bus_position_setpoint_triplet ;\r\ntypedef struct trajectory_waypoint_s  px4_Bus_trajectory_waypoint ;\r\ntypedef struct vehicle_angular_velocity_s  px4_Bus_vehicle_angular_velocity ;\r\ntypedef struct vehicle_attitude_s  px4_Bus_vehicle_attitude ;\r\ntypedef struct vehicle_local_position_s  px4_Bus_vehicle_local_position ;\r\ntypedef struct vehicle_trajectory_waypoint_s  px4_Bus_vehicle_trajectory_waypoint ;\r\n\r\n#endif\r\n"},{"name":"nuttxinitialize.cpp","type":"source","group":"legacy","path":"C:\\ProgramData\\MATLAB\\SupportPackages\\R2024a\\toolbox\\target\\supportpackages\\px4\\src\\","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright 2018-2022 The MathWorks, Inc.\n *\n * File: nuttxinitialize.c\n *\n * Abstract:\n *  This file contains RTOS thread creation functions\n *\n */\n\n#include \"nuttxinitialize.h\"\n#include \"MW_PX4_TaskControl.h\"\n\n/***********************************************\n * Added for Simulink Threads\n ************************************************/\npthread_attr_t attr;\nstatic baseRateInfo_t g_info;\nstruct sched_param g_sp;\n// extern volatile boolean_T runModel ;\n\n/***********************************************\n * Added for HRT\n ************************************************/\nstruct hrt_call BaseRate_HRT;\nint baserate_sem_copy;\n\n\n#define MW_RTOS_DEBUG 0\n\nbaseRateInfo_t EXT_sig_info;\nbaseRateInfo_t SDCard_sig_info;\nextern pthread_t backgroundThread;\nextern pthread_t loggingThread;\nextern void exitFcn(int sig);\n\nvoid setTaskPeriod(double periodInSeconds, int sigNo) {\n    timer_t timerId;\n    struct sigevent sev;\n    struct itimerspec its;\n    long stNanoSec;\n    int status;\n\n    /* Create a timer */\n    sev.sigev_notify = SIGEV_SIGNAL;\n    sev.sigev_signo = sigNo;\n    sev.sigev_value.sival_ptr = &timerId;\n    status = timer_create(CLOCK_REALTIME, &sev, &timerId);\n    CHECK_STATUS(status, 0, \"timer_create\");\n\n    /* Arm real-time scheduling timer */\n    stNanoSec = (long)(periodInSeconds * 1e9);\n    its.it_value.tv_sec = stNanoSec / 1000000000;\n    its.it_value.tv_nsec = stNanoSec % 1000000000;\n    its.it_interval.tv_sec = its.it_value.tv_sec;\n    its.it_interval.tv_nsec = its.it_value.tv_nsec;\n    status = timer_settime(timerId, 0, &its, NULL);\n    CHECK_STATUS(status, 0, \"timer_settime\");\n}\n\nvoid print_sem_value() {\n    PX4_WARN(\"Sem value = %d\", baserate_sem_copy);\n}\n\nstatic void Base_HRT_Callback(void* arg) {\n#ifndef PX4_CONNECTEDIO\n    int sem_value_check;\n\n    px4_sem_getvalue(&baserateTaskSem, &sem_value_check);\n    px4_sem_post(&baserateTaskSem);\n    baserate_sem_copy = sem_value_check;\n\n#endif\n}\n\n/* ---------------------------- */\n/* Externally visible functions */\n/* ---------------------------- */\nvoid myWaitForThisEvent(int sigNo) {\n    sigset_t sigMask;\n\n    sigemptyset(&sigMask);\n    sigaddset(&sigMask, sigNo);\n    sigwaitinfo(&sigMask, NULL);\n    //\tCHECK_STATUS_NOT(status, -1, \"sigwaitinfo\");\n}\n\nvoid MW_PX4_WaitForThisEvent(void* arg) {\n#ifdef EXT_MODE\n    /*pace External mode thread at 10 Hz*/\n    usleep(100000);\n\n    /*Signaling is causing issue when sample time is greater than 0.1\n     and model runs for more than 60 seconds. In this case model stop is not\n     stopping External mode. Using usleep for now to sleep the External Mode thread.*/\n\n    // baseRateInfo_t ext_info = *((baseRateInfo_t *)arg);\n    // static boolean_T isTaskPeriodSet = false;\n    // boolean_T rtmStopReq = rtmGetStopRequested(MW_StringifyDefineFunction(MODEL, _M));\n\n    // if (!isTaskPeriodSet) {\n    //     setTaskPeriod(ext_info.period, ext_info.sigNo);\n    //     isTaskPeriodSet = true;\n    // }\n\n    // if (!rtmStopReq) {\n    //     myWaitForThisEvent(ext_info.sigNo);\n    // }\n\n#endif\n}\n\nvoid myAddBlockForThisEvent(int sigNo) {\n    int status;\n    sigset_t sigMask;\n\n    sigemptyset(&sigMask);\n    sigaddset(&sigMask, sigNo);\n    status = pthread_sigmask(SIG_BLOCK, &sigMask, NULL);\n    CHECK_STATUS(status, 0, \"pthread_sigmask\");\n}\n\nvoid nuttxRTOSInit(double baseRatePeriod, int numSubrates) {\n    /* This is because in Daren's original Task callback ,a sleep was added before creating the\n     * threads*/\n    sleep(1);\n\n    int status;\n\n#if defined(MW_PX4_NUTTX_BUILD)\n    size_t stackSize;\n    int baseRatePriority = MW_BASERATE_PRIORITY;\n#endif\n\n#ifdef MW_HAS_MULTIPLE_RATES\n    int i;\n    // char taskName[20];\n#endif\n#if defined(MW_PX4_NUTTX_BUILD)\n    sched_lock();\n#endif\n    // status = px4_sem_init(&termSem, 0, 0); PX4 PSP Dev: termSem no longer needed\n    // CHECK_STATUS(status, 0,\"px4_sem_init:termSem\");\n    status = px4_sem_init(&stopSem, 0, 0);\n    CHECK_STATUS(status, 0, \"px4_sem_init:stopSem\");\n    status = px4_sem_init(&baserateTaskSem, 0, 0);\n    CHECK_STATUS(status, 0, \"px4_sem_init:baserateTaskSem\");\n\n    // or you can use/check: _POSIX_PRIORITY_SCHEDULING\n    // _POSIX_THREAD_PRIORITY_SCHEDULING\n#if !defined(_POSIX_PRIORITY_SCHEDULING)\n    PX4_INFO(\"Priority scheduling is NOT supported by your system.\");\n    PX4_INFO(\"The generated code will not run correctly because your\");\n    PX4_INFO(\"model contains multiple rates and uses multi-tasking\");\n    PX4_INFO(\"code generation mode. You can only run the generated code\");\n    PX4_INFO(\"in single-tasking mode in your system. Open\");\n    PX4_INFO(\"Simulation -> Configuration Parameters -> Solver dialog\");\n    PX4_INFO(\"and set \\\"Tasking mode for periodic sample times\\\" parameter to SingleTasking.\");\n    PX4_INFO(\n        \"Re-build the Simulink model with the new settings and try executing the generated code \"\n        \"again.\");\n    fflush(stdout);\n    exit(-1);\n#endif\n\n#if defined(MW_PX4_NUTTX_BUILD)\n    /* Set scheduling policy of the main thread to SCHED_FIFO */\n    g_sp.sched_priority = sched_get_priority_max(SCHED_FIFO) - 50;\n    status = sched_setscheduler(0, SCHED_FIFO, &g_sp);\n    CHECK_STATUS(status, 0, \"sched_setscheduler\");\n\n    /*Added init attribute and scheduler policy */\n    pthread_attr_init(&attr);\n    status = pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);\n    CHECK_STATUS(status, 0, \"pthread_attr_setinheritsched\");\n    status = pthread_attr_setschedpolicy(&attr, SCHED_FIFO);\n    CHECK_STATUS(status, 0, \"pthread_attr_setschedpolicy\");\n    // status = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n    // CHECK_STATUS(status, 0, \"pthread_attr_setdetachstate\");\n\n    /* PTHREAD_STACK_MIN is the minimum stack size required to start a thread */\n    stackSize = 8192 + PTHREAD_STACK_MIN;\n\n    /*added stack attribute back in */\n    status = pthread_attr_setstacksize(&attr, stackSize);\n    CHECK_STATUS(status, 0, \"pthread_attr_setstacksize\");\n#endif\n    /* set up info structure */\n    g_info.period = baseRatePeriod;\n    g_info.sigNo = BASERATE_TIMER_SIGNAL; // SIGRTMIN;\n\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"   stackSize = %d sched_priority = %d\", stackSize, g_sp.sched_priority);\n    PX4_INFO(\"   MW_BASERATE_PERIOD = %8.5f MW_BASERATE_PRIORITY = %d SIGRTMIN = 0x%08X\",\n             (double)baseRatePeriod, (int)baseRatePriority, SIGRTMIN);\n    PX4_INFO(\"   Init info.period = %8.5f sigNo = 0x%04X\", g_info.period, g_info.sigNo);\n    PX4_INFO(\"**creating the Base Rate thread before calling pthread_create**\");\n    fflush(stdout);\n#endif\n\n    /* Create the Base Rate Task here */\n#if defined(MW_PX4_NUTTX_BUILD)\n    g_sp.sched_priority = baseRatePriority;\n    status = pthread_attr_setschedparam(&attr, &g_sp);\n    status = pthread_create(&baseRateThread, &attr, &baseRateTask, (void*)&g_info);\n#elif defined(MW_PX4_POSIX_BUILD)\n    status = pthread_create(&baseRateThread, nullptr, &baseRateTask, (void*)&g_info);\n#endif\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"** Base Rate Task ID = %d with Priority = %d\\n\", baseRateThread, g_sp.sched_priority);\n    fflush(stdout);\n#endif\n\n/* Create sub-rate Tasks here */\n#ifdef MW_HAS_MULTIPLE_RATES\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"Creating sub-rate task threads\\n\");\n    PX4_INFO(\"Number of sub rate tasks: %d \\n\", MW_NUMBER_SUBRATES);\n    fflush(stdout);\n#endif\n\n    for (i = 0; i < MW_NUMBER_SUBRATES; i++) {\n        taskId[i] = i;\n        status = px4_sem_init(&subrateTaskSem[i], 0, 0);\n        CHECK_STATUS(status, 0, \"px4_sem_init: subrateTaskSem\");\n        // g_sp.sched_priority = MW_BASERATE_PRIORITY -40 + subratePriority[i] - 1;\n        g_sp.sched_priority = subratePriority[i];\n#if MW_RTOS_DEBUG\n        PX4_INFO(\"MW_SUBRATE_PRIORITY = %d \", (int)g_sp.sched_priority);\n#endif\n\n#if defined(MW_PX4_NUTTX_BUILD)\n        status = pthread_attr_setschedparam(&attr, &g_sp);\n        CHECK_STATUS(status, 0, \"pthread_attr_setschedparam\");\n        status = pthread_create(&subRateThread[i], &attr, &subrateTask, (void*)&taskId[i]);\n#elif defined(MW_PX4_POSIX_BUILD)\n        status = pthread_create(&subRateThread[i], nullptr, &subrateTask, (void*)&taskId[i]);\n#endif\n        CHECK_STATUS(status, 0, \"pthread_create\");\n\n#if MW_RTOS_DEBUG\n        PX4_INFO(\"** Sub Rate Task ID = %d \", subRateThread[i]);\n        fflush(stdout);\n#endif\n    }\n#endif // End of \"If Multiple Rates\" check\n\n#if defined(MW_PX4_NUTTX_BUILD)\n    g_sp.sched_priority = baseRatePriority;\n    status = pthread_attr_setschedparam(&attr, &g_sp);\n#endif\n\n    /* Create the Scheduler Task here */\n    long stMicroSec;\n    stMicroSec = (long)(g_info.period * 1e6);\n    hrt_call_every(&BaseRate_HRT, stMicroSec, stMicroSec, Base_HRT_Callback,\n                   NULL); // timing callback to post base-rate semaphore\n\n/* Create the External Mode Task here */\n#ifdef EXT_MODE\n    /*---------- Creating EXT-mode Background Task ------------------*/\n    /* Setup signal info to block for EXT Mode */\n    EXT_sig_info.period = 0.1; // Sample rate at which we want Simulink to update w/ ext mode\n    EXT_sig_info.sigNo = SIGRTMIN;\n    /* Signaling the thread not working for low sample frequency*/\n    // sigemptyset(&EXT_sig_info.sigMask);\n    // sigaddset(&EXT_sig_info.sigMask, EXT_sig_info.sigNo);\n    // myAddBlockForThisEvent(EXT_sig_info.sigNo);\n\n    /* Setup thread for Custom Task */\n    fflush(stdout);\n#if defined(MW_PX4_NUTTX_BUILD)\n    g_sp.sched_priority = 40; // default is 100\n    status = pthread_attr_setschedparam(&attr, &g_sp);\n    status = pthread_create(&backgroundThread, &attr, &backgroundTask, (void*)&EXT_sig_info);\n#elif defined(MW_PX4_POSIX_BUILD)\n    status = pthread_create(&backgroundThread, nullptr, &backgroundTask, (void*)&EXT_sig_info);\n#endif\n    CHECK_STATUS(status, 0, \"EXT Mode Background pthread_create\");\n/*---------------------------------------------------------*/\n#endif\n\n/* Create the SD Card Task here */\n#if MAT_FILE\n    /*---------- Creating SD Card Background Task ------------------*/\n    fflush(stdout);\n#if defined(MW_PX4_NUTTX_BUILD)\n    g_sp.sched_priority = 40; // default is 100\n    status = pthread_attr_setschedparam(&attr, &g_sp);\n    status = pthread_create(&loggingThread, &attr, &loggingThreadFcn, NULL);\n#elif defined(MW_PX4_POSIX_BUILD)\n    status = pthread_create(&loggingThread, nullptr, &loggingThreadFcn, NULL);\n#endif\n    CHECK_STATUS(status, 0, \"SD Card Background pthread_create\");\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"** SD Card Background ID = %d \", loggingThread);\n    fflush(stdout);\n#endif\n\n/*---------------------------------------------------------*/\n#endif\n\n#if MW_RTOS_DEBUG\n    PX4_INFO(\"px4_simulink_app : Created Simulink task threads successfully\\n\");\n    fflush(stdout);\n#endif\n#if defined(MW_PX4_NUTTX_BUILD)\n    sched_unlock();\n#endif\n}\n\n/*---------- Following function is added as a workaround for uavcan module build failure -------------\n  Original definition of the function is in the file <px4dir>\\Firmware\\Boards\\px4\\fmu-v5\\src\\can.c*/\n#if defined(MW_PX4_NUTTX_BUILD) && defined(CONFIG_CAN) && defined(UAVCAN_NUM_IFACES_RUNTIME)\n__EXPORT\nuint16_t board_get_can_interfaces(void)\n{\n\tuint16_t enabled_interfaces = 0x7;\n\n\tif (!PX4_MFT_HW_SUPPORTED(PX4_MFT_CAN2)) {\n\t\tenabled_interfaces &= ~(1 << 1);\n\t}\n\n\tif (!PX4_MFT_HW_SUPPORTED(PX4_MFT_CAN3)) {\n\t\tenabled_interfaces &= ~(1 << 2);\n\t}\n\n\treturn enabled_interfaces;\n }\n#endif\n/*---------------------------------------------------------*/\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};