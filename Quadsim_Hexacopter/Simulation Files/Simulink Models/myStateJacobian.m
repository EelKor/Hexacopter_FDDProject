function x = myStateJacobian(x,u)
%% Euler integration of continuous-time dynamics x'=f(x) with sample time dt
dt = 0.05; % [s] Sample time
x = eye(15) + StateJacobianContinuous(x,u)*dt;

function J = StateJacobianContinuous(x,u)
m = 1.023;
g = 9.81;
ct = 1.4865e-07;
cq = 2.92500000000000e-09;
Jb = [0.00949990000000000,0,0;
    0,0.00949990000000000,0;
    0,0,0.0185760000000000];
Jx = Jb(1,1);
Jy = Jb(2,2);
Jz = Jb(3,3);
Jm = [3.78822248603988e-06];
d = [0.222250000000000];
d1 = d*cos(60*pi/180);
d2 = d*sin(60*pi/180);
tw = [0.0760000000000000]; % motor time delay
th = 0.01; % fault time delay

p = x(1);
q = x(2);
r = x(3);
w = x(4:9);
h = x(10:15);


J = zeros(15,15);
J(1,:) = 1/Jx*[0, Jm*sum([-1 1 -1 1 -1 1]'.*w)+(Jy-Jz)*r, (Jy-Jz)*q,...
    -2*d1*ct*h(1)*w(1)-Jm*q,...
    2*d1*ct*h(2)*w(2)+Jm*q,...
    2*d*ct*h(3)*w(3)-Jm*q,...
    2*d1*ct*h(4)*w(4)+Jm*q,...
    -2*d1*ct*h(5)*w(5)-Jm*q,...
    -2*d*ct*h(6)*w(6)+Jm*q,...
    -d1*ct*w(1)^2,...
    d1*ct*w(2)^2,...
    d1*ct*w(3)^2,...
    d1*ct*w(4)^2,...
    -d1*ct*w(5)^2,...
    -d1*ct*w(6)^2];
J(2,:) = 1/Jy*[Jm*sum([1 -1 1 -1 1 -1]'.*w)+(Jz-Jx)*r, 0, (Jz-Jx)*p,...
    -2*d2*ct*h(1)*w(1)+Jm*p,...
    -2*d2*ct*h(2)*w(2)-Jm*p,...
    Jm*p,...
    2*d2*ct*h(4)*w(4)-Jm*p,...
    2*d2*ct*h(5)*w(5)+Jm*p,...
    -Jm*p,...
    -d2*ct*w(1)^2,...
    -d2*ct*w(2)^2,...
    0,...
    d2*ct*w(4)^2,...
    d2*ct*w(5)^2,...
    0];
J(3,:) = 1/Jz*[(Jx-Jy)*q, (Jx-Jy)*p, 0,...
    -2*cq*h(1)*w(1),...
    2*cq*h(2)*w(2),...
    -2*cq*h(3)*w(3),...
    2*cq*h(4)*w(4),...
    -2*cq*h(5)*w(5),...
    2*cq*h(6)*w(6),...
    -cq*w(1)^2,...
    cq*w(2)^2,...
    -cq*w(3)^2,...
    cq*w(4)^2,...
    -cq*w(5)^2,...
    cq*w(6)^2];
J(4,4) = -1/tw;
J(5,5) = -1/tw;
J(6,6) = -1/tw;
J(7,7) = -1/tw;
J(8,8) = -1/tw;
J(9,9) = -1/tw;
J(10:15,:) = zeros(6,15);


    
    